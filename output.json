[ 
  { 
    "__ignoreNulls" = true;
    __structuredAttrs = false;
    addonInfo = null;
    all = <CODE>;
    args = <CODE>;
    buildInputs = <CODE>;
    buildPhase = ":";
    builder = <CODE>;
    cmakeFlags = <CODE>;
    configureFlags = <CODE>;
    configurePhase = ":";
    dependencies = <CODE>;
    depsBuildBuild = <CODE>;
    depsBuildBuildPropagated = <CODE>;
    depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; forceShare = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; outputs = [ "out" ]; patches = <CODE>; pname = "nvim-treesitter"; postInstall = ""; postPatch = "rm -r parser\n"; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; src = <CODE>; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; allowedRequisites = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ "SHELL=/bin/sh" "GREP=grep" "ZLESS_MAN=zless.1" "ZLESS_PROG=zless" ]; mesonFlags = [ ]; name = "gzip-1.13"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "xz-5.4.5"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = [ "https://tukaani.org/xz/xz-5.4.5.tar.bz2" ]; 
    }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "xz-5.4.5.tar.bz2"; out = «repeated»; outPath = "/nix/store/2cxa62ycswpswvysa0nzanmh0qm79ikn-xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = «repeated»; }; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = { aesSupport = false; avx2Support = false; avx512Support = false; avxSupport = false; canExecute = <LAMBDA>; config = "x86_64-unknown-linux-gnu"; darwinArch = "x86_64"; darwinMinVersion = "10.12"; darwinMinVersionVariable = null; darwinPlatform = null; darwinSdkVersion = "10.12"; efiArch = "x64"; emulator = <LAMBDA>; emulatorAvailable = <LAMBDA>; extensions = { executable = ""; library = ".so"; sharedLibrary = ".so"; staticLibrary = ".a"; }; fma4Support = false; fmaSupport = false; gcc = { }; hasSharedLibraries = true; is32bit = false; is64bit = true; isAarch = false; isAarch32 = false; isAarch64 = false; isAbiElfv2 = false; isAlpha = false; isAndroid = false; isArmv7 = false; isAvr = false; isBSD = false; isBigEndian = false; isCompatible = <LAMBDA>; isCygwin = false; isDarwin = false; isEfi = true; isFreeBSD = false; isGenode = false; isGhcjs = false; isGnu = true; isILP32 = false; isJavaScript = false; isLinux = true; isLittleEndian = true; isLoongArch64 = false; isM68k = false; isMacOS = false; isMicroBlaze = false; isMinGW = false; isMips = false; isMips32 = false; isMips64 = false; isMips64n32 = false; isMips64n64 = false; isMmix = false; isMsp430 = false; isMusl = false; isNetBSD = false; isNone = false; isOpenBSD = false; isOr1k = false; isPower = false; isPower64 = false; isRedox = false; isRiscV = false; isRiscV32 = false; isRiscV64 = false; isRx = false; isS390 = false; isS390x = false; isSparc = false; isStatic = false; isSunOS = false; isUClibc = false; isUnix = true; isVc4 = false; isWasi = false; isWasm = false; isWindows = false; isi686 = false; isiOS = false; isx86 = true; isx86_32 = false; isx86_64 = true; libDir = "lib64"; libc = "glibc"; linker = "bfd"; linux-kernel = { autoModules = true; baseConfig = "defconfig"; name = "pc"; target = "bzImage"; }; linuxArch = "x86_64"; parsed = { _type = "system"; abi = { _type = "abi"; assertions = [ { assertion = <LAMBDA>; message = "The \"gnu\" ABI is ambiguous on 32-bit ARM. Use \"gnueabi\" or \"gnueabihf\" instead.\n"; } { assertion = <LAMBDA>; message = "The \"gnu\" ABI is ambiguous on big-endian 64-bit PowerPC. Use \"gnuabielfv2\" or \"gnuabielfv1\" instead.\n"; } ]; name = "gnu"; }; cpu = { _type = "cpu-type"; arch = "x86-64"; bits = 64; family = "x86"; name = "x86_64"; significantByte = { _type = "significant-byte"; name = "littleEndian"; }; }; kernel = { _type = "kernel"; execFormat = { _type = "exec-format"; name = "elf"; }; families = { }; name = "linux"; }; vendor = { _type = "vendor"; name = "unknown"; }; }; qemuArch = "x86_64"; rust = { cargoEnvVarTarget = "X86_64_UNKNOWN_LINUX_GNU"; cargoShortTarget = "x86_64-unknown-linux-gnu"; isNoStdTarget = false; platform = { arch = "x86_64"; os = "linux"; target-family = [ "unix" ]; vendor = "unknown"; }; rustcTarget = "x86_64-unknown-linux-gnu"; rustcTargetSpec = "x86_64-unknown-linux-gnu"; }; rustc = { }; sse3Support = false; sse4_1Support = false; sse4_2Support = false; sse4_aSupport = false; ssse3Support = false; system = "x86_64-linux"; ubootArch = "x86_64"; uname = { processor = "x86_64"; release = null; system = "Linux"; }; useAndroidPrebuilt = false; useiOSPrebuilt = false; }; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontUnpack = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontUnpack = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p \"$out\"/bin\ncp -a '/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40'/bin/* \"$out\"/bin/\nchmod +w \"$out\"/bin/ld.bfd\npatchelf --set-interpreter '/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27'/lib/ld*.so.? \\\n  --set-rpath \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib:$(patchelf --print-rpath \"$out\"/bin/ld.bfd)\" \\\n  \"$out\"/bin/ld.bfd\n"; mesonFlags = [ ]; name = "binutils-patchelfed-ld-2.40"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "binutils-patchelfed-ld"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { all = <CODE>; args = [ "ash" "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh ]; builder = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = true; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "busybox"; outputHash = "ef4c1be6c7ae57e4f654efd90ae2d2e204d6769364c46469fa9ff3761195cba1"; outputHashAlgo = "sha256"; outputHashMode = "recursive"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "http://tarballs.nixos.org/stdenv-linux/i686/4907fc9e8d0d82b28b3c56e3a478a2882f1d700f/busybox"; urls = [ "http://tarballs.nixos.org/stdenv-linux/i686/4907fc9e8d0d82b28b3c56e3a478a2882f1d700f/busybox" ]; }; drvPath = <CODE>; executable = true; impureEnvVars = «repeated»; name = "busybox"; out = «repeated»; outPath = "/nix/store/lan2w3ab1mvpxj3ppiw2sizh8i7rpz7s-busybox"; outputHash = "ef4c1be6c7ae57e4f654efd90ae2d2e204d6769364c46469fa9ff3761195cba1"; outputHashAlgo = "sha256"; outputHashMode = "recursive"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "http://tarballs.nixos.org/stdenv-linux/i686/4907fc9e8d0d82b28b3c56e3a478a2882f1d700f/busybox"; urls = «repeated»; }; drvAttrs = { args = «repeated»; builder = «repeated»; hardeningUnsupportedFlags = [ "fortify3" ]; isGNU = true; langC = true; langCC = true; name = "bootstrap-tools"; system = "x86_64-linux"; tarball = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bootstrap-tools.tar.xz"; outputHash = "a5ce9c155ed09397614646c9717fc7cd94b1023d7b76b618d409e4fefd6e9d39"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "http://tarballs.nixos.org/stdenv-linux/x86_64/c5aabb0d603e2c1ea05f5a93b3be82437f5ebf31/bootstrap-tools.tar.xz"; urls = [ "http://tarballs.nixos.org/stdenv-linux/x86_64/c5aabb0d603e2c1ea05f5a93b3be82437f5ebf31/bootstrap-tools.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bootstrap-tools.tar.xz"; out = «repeated»; outPath = "/nix/store/cijs9ypwccmdfjhkq9a35nin7qizg6jm-bootstrap-tools.tar.xz"; outputHash = "a5ce9c155ed09397614646c9717fc7cd94b1023d7b76b618d409e4fefd6e9d39"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "http://tarballs.nixos.org/stdenv-linux/x86_64/c5aabb0d603e2c1ea05f5a93b3be82437f5ebf31/bootstrap-tools.tar.xz"; urls = «repeated»; }; }; drvPath = <CODE>; hardeningUnsupportedFlags = «repeated»; isGNU = true; langC = true; langCC = true; name = "bootstrap-tools"; out = { all = <CODE>; args = «repeated»; builder = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; hardeningUnsupportedFlags = «repeated»; isGNU = true; langC = true; langCC = true; name = "bootstrap-tools"; out = «repeated»; outPath = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools"; outputName = "out"; system = "x86_64-linux"; tarball = «repeated»; type = "derivation"; }; outPath = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools"; outputName = "out"; passthru = { isFromBootstrapFiles = true; }; system = "x86_64-linux"; tarball = «repeated»; type = "derivation"; }; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; libc_bin = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib $out/lib\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/include-glibc $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib $out/lib\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/include-glibc $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "bootstrap-stage0-glibc-bootstrapFiles"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "bootstrap-stage0-glibc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage0-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage0-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage0-stdenv-linux"; out = «repeated»; outPath = "/nix/store/lki616c5vfv23rvmv12kkvh5sgjrqrrd-bootstrap-stage0-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/lki616c5vfv23rvmv12kkvh5sgjrqrrd-bootstrap-stage0-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "bootstrapFiles"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; isFromBootstrapFiles = true; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage0-glibc-bootstrapFiles"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { isFromBootstrapFiles = true; }; patches = [ ]; pname = "bootstrap-stage0-glibc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "bootstrapFiles"; }; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage0-binutils-wrapper-"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "bootstrap-stage0-binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/bintools-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage0-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage0-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage0-stdenv-linux"; out = «repeated»; outPath = "/nix/store/lki616c5vfv23rvmv12kkvh5sgjrqrrd-bootstrap-stage0-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/lki616c5vfv23rvmv12kkvh5sgjrqrrd-bootstrap-stage0-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapperName = "BINTOOLS_WRAPPER"; }; drvPath = <CODE>; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildCommand = "mkdir -p $out\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib $out/lib\nln -s /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/include-glibc $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; isFromBootstrapFiles = true; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage0-glibc-bootstrapFiles"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage0-glibc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "bootstrapFiles"; }; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage0-binutils-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage0-binutils-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = «repeated»; outPath = "/nix/store/3fmiwc4znvwhkq19a85rg18bf4vb6vz8-bootstrap-stage0-binutils-wrapper-"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; emacsBufferSetup = <CODE>; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; nativeLibc = false; nativePrefix = ""; nativeTools = false; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage0-binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapperName = "BINTOOLS_WRAPPER"; }; outPath = "/nix/store/3fmiwc4znvwhkq19a85rg18bf4vb6vz8-bootstrap-stage0-binutils-wrapper-"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage0-binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapperName = "BINTOOLS_WRAPPER"; }; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/ni367kxdc4k6x5q72afh6wwzlfbi68jk-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage-xgcc-gcc-wrapper-"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "bootstrap-stage-xgcc-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; name = "expand-response-params"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage1-gcc-wrapper-"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "bootstrap-stage1-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = ""; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage1-gcc-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = ""; expandResponseParams = "/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage1-gcc-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = ""; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage1-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; outPath = "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage1-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/2vg1z903q0szawd1idqadp052x2n76sv-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/g0888hd3vmnlzyr44jqyprg5r7rm39m9-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage1-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage1-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage1-stdenv-linux"; out = «repeated»; outPath = "/nix/store/3jg2ksgvhgmpi48mi8s0mmw6w385whvx-bootstrap-stage1-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/3jg2ksgvhgmpi48mi8s0mmw6w385whvx-bootstrap-stage1-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; meta = <CODE>; name = "expand-response-params"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/ni367kxdc4k6x5q72afh6wwzlfbi68jk-expand-response-params"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; expandResponseParams = "/nix/store/ni367kxdc4k6x5q72afh6wwzlfbi68jk-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage-xgcc-gcc-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = «repeated»; expandResponseParams = "/nix/store/ni367kxdc4k6x5q72afh6wwzlfbi68jk-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage-xgcc-gcc-wrapper-"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/ranvd33gq3sxnx7c5ib0jmg28camqqr5-bootstrap-stage-xgcc-gcc-wrapper-"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = «repeated»; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage-xgcc-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; outPath = "/nix/store/ranvd33gq3sxnx7c5ib0jmg28camqqr5-bootstrap-stage-xgcc-gcc-wrapper-"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage-xgcc-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" -a ! -L \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\nccCFlags+=\" -B/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nexport hardening_unsupported_flags=\"fortify3\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = ""; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/h8q91pycad524dmyy8mjg2ghm5343iq2-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage1-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = «repeated»; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage1-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage1-stdenv-linux"; out = «repeated»; outPath = "/nix/store/xcyzazziaj0yq1qcjxz6mfsz0si0vrbq-bootstrap-stage1-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/xcyzazziaj0yq1qcjxz6mfsz0si0vrbq-bootstrap-stage1-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/wsqbfhmzjrck1fy8fp66dmbw0vx5wb24-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage-xgcc-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage-xgcc-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage-xgcc-stdenv-linux"; out = «repeated»; outPath = "/nix/store/y0gr8250y40l4jm60rpfv27ycrbs4f6h-bootstrap-stage-xgcc-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/y0gr8250y40l4jm60rpfv27ycrbs4f6h-bootstrap-stage-xgcc-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/azbs9m5ph5fgj4bnpd4md6mblz68g0q0-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage-xgcc-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = «repeated»; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage-xgcc-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage-xgcc-stdenv-linux"; out = «repeated»; outPath = "/nix/store/6h823hy4q6gjzkazfcz0kg8v2l1rwrqq-bootstrap-stage-xgcc-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/6h823hy4q6gjzkazfcz0kg8v2l1rwrqq-bootstrap-stage-xgcc-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/q5gqq7nz9n8ka99s164k6g1sdzc5ylv8-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage2-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage2-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage2-stdenv-linux"; out = «repeated»; outPath = "/nix/store/jvwipy09ixz057sgsyi6cfcpwyggq6m2-bootstrap-stage2-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/jvwipy09ixz057sgsyi6cfcpwyggq6m2-bootstrap-stage2-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.40"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p \"$out\"/bin\ncp -a '/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40'/bin/* \"$out\"/bin/\nchmod +w \"$out\"/bin/ld.bfd\npatchelf --set-interpreter '/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27'/lib/ld*.so.? \\\n  --set-rpath \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib:$(patchelf --print-rpath \"$out\"/bin/ld.bfd)\" \\\n  \"$out\"/bin/ld.bfd\n"; isFromBootstrapFiles = <CODE>; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; insecure = <CODE>; name = <CODE>; outputsToInstall = <CODE>; position = <CODE>; unfree = <CODE>; unsupported = <CODE>; }; name = "binutils-patchelfed-ld-2.40"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontUnpack = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p \"$out\"/bin\ncp -a '/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40'/bin/* \"$out\"/bin/\nchmod +w \"$out\"/bin/ld.bfd\npatchelf --set-interpreter '/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27'/lib/ld*.so.? \\\n  --set-rpath \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib:$(patchelf --print-rpath \"$out\"/bin/ld.bfd)\" \\\n  \"$out\"/bin/ld.bfd\n"; isFromBootstrapFiles = <CODE>; mesonFlags = [ ]; meta = «repeated»; name = "binutils-patchelfed-ld-2.40"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { isFromBootstrapFiles = <CODE>; }; patches = [ ]; pname = "binutils-patchelfed-ld"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.40"; }; outPath = "/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "binutils-patchelfed-ld"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.40"; }; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; libc_bin = { BASH_SHELL = "/bin/sh"; NIX_CFLAGS_COMPILE = ""; NIX_HARDENING_ENABLE = [ "pic" "strictoverflow" "format" "relro" "bindnow" ]; NIX_NO_SELF_RPATH = true; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = «repeated»; buildInputs = [ { ARCH = "x86_64"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "make mrproper $makeFlags\nmake headers $makeFlags\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkPhase = "make headers_check $makeFlags\n"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--static" "--shared" ]; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installFlags = [ ]; makeFlags = [ "PREFIX=" "SHARED_MODE=1" ]; mesonFlags = [ ]; name = "zlib-1.3"; nativeBuildInputs = [ ]; outputDoc = "dev"; outputs = [ "out" "dev" "static" ]; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = [ "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "zlib-1.3.tar.gz"; out = «repeated»; outPath = "/nix/store/c1hg8k7vjy5hxfm39pp30xgiw7qk7xwf-zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.3"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; }; outPath = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; } { LDFLAGS = ""; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-bash-malloc" "--disable-readline" ]; debug = <CODE>; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" ]; makeFlags = [ ]; mesonFlags = [ ]; name = "bash-5.2-p21"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "bison-3.8.2"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-syscmd-shell=/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "gnum4-1.4.19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnum4"; postPatch = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "m4-1.4.19.tar.bz2"; outputHash = "sha256-swapHA/ZO8QoDPwumMt6s5gf91oYe+oyk4EfRSyJqMg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/m4/m4-1.4.19.tar.bz2"; urls = [ "https://ftpmirror.gnu.org/m4/m4-1.4.19.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "m4-1.4.19.tar.bz2"; out = «repeated»; outPath = "/nix/store/mcayf992diwks293vs12iwx1ywgm4ijg-m4-1.4.19.tar.bz2"; outputHash = "sha256-swapHA/ZO8QoDPwumMt6s5gf91oYe+oyk4EfRSyJqMg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/m4/m4-1.4.19.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.4.19"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnum4-1.4.19"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/xm7ywa2vd53jf41cj9acrkafxdwrvr9i-gnum4-1.4.19"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "gnum4"; postPatch = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.4.19"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-de" "-Dcc=cc" "-Uinstallusrbinperl" "-Dinstallstyle=lib/perl5" "-Duseshrplib" "-Dlocincpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include" "-Dloclibpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib" "-A clear:d_crypt_r" "-Dprefix=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9" "-Dman1dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man1" "-Dman3dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man3" ]; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; devdoc = <CODE>; disallowedReferences = [ "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-" ]; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = «repeated»; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; enableParallelBuilding = false; mesonFlags = [ ]; name = "perl-5.38.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "devdoc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/no-sys-dirs-5.38.0.patch ]; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = [ "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "perl-5.38.2.tar.gz"; out = «repeated»; outPath = "/nix/store/mp5jcbm1hjqw4ckxvrm7k0pfhhjf3dbg-perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.38.2"; }; drvPath = <CODE>; enableParallelBuilding = false; inputDerivation = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "perl-5.38.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; perlOnBuild = <CODE>; pkgs = <CODE>; withPackages = <CODE>; }; patches = «repeated»; perlOnBuild = <CODE>; pkgs = <CODE>; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "5.38.2"; withPackages = <CODE>; } ]; outputs = [ "out" ]; patches = [ ]; pname = "bison"; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bison-3.8.2.tar.gz"; outputHash = "sha256-BsnhO99+sk1M62tZIFpPZ8LH5yExGWREMP6C+9FKCrs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bison/bison-3.8.2.tar.gz"; urls = [ "https://ftpmirror.gnu.org/bison/bison-3.8.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bison-3.8.2.tar.gz"; out = «repeated»; outPath = "/nix/store/9vm1ihdg1ysmrjdbb80g834iizzxb4yk-bison-3.8.2.tar.gz"; outputHash = "sha256-BsnhO99+sk1M62tZIFpPZ8LH5yExGWREMP6C+9FKCrs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bison/bison-3.8.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "3.8.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; glrSupport = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bison-3.8.2"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/13wk7kypm4i90jfm9hv5ajx6k8fdh9il-bison-3.8.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { glrSupport = true; }; patches = [ ]; pname = "bison"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "3.8.2"; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "dev" "man" "doc" "info" "debug" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-001"; out = «repeated»; outPath = "/nix/store/a73wzcks7h2y814qxa1z3kv1hg205mpm-bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-002"; out = «repeated»; outPath = "/nix/store/xc3h9isl5566i6a4pvdsgin26rchijrq-bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-003"; out = «repeated»; outPath = "/nix/store/sxc8xmi7caxaiywzh15za9crpk3bw98z-bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-004"; out = «repeated»; outPath = "/nix/store/2ynclzrdl0hy9miy6k8gcwgzw4mhsmd0-bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-005"; out = «repeated»; outPath = "/nix/store/z76vsdh69cvwkwhwg69k7d1znwjmx6hf-bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-006"; out = «repeated»; outPath = "/nix/store/1fw5fcsjz9wcbf13a5xs4i2cjfircp3x-bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-007"; out = «repeated»; outPath = "/nix/store/rs1qdpy1nb3x07g4vqvb4s774qhq9f0w-bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-008"; out = «repeated»; outPath = "/nix/store/jn9f2mr2jdm9yn5hi0pws44nbfrah8d3-bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-009"; out = «repeated»; outPath = "/nix/store/j8vipdfzslz4aa7aj0amwd4msxa9hhpl-bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-010"; out = «repeated»; outPath = "/nix/store/24ygbbc9k6vjc4vhz2j6a9dkdgmqgc6n-bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-011"; out = «repeated»; outPath = "/nix/store/sim601rd1y3hsap9qkn25cwprsa9aipp-bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-012"; out = «repeated»; outPath = "/nix/store/x1sqwqn02c5mnpi8hbqlxpbm3rahq5dm-bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-013"; out = «repeated»; outPath = "/nix/store/wcpqrbsljh2x04qccs6jv9z8c9y1c3cd-bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-014"; out = «repeated»; outPath = "/nix/store/cddj9qpc4l62qjy6vvf7gp50mfqaf506-bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-015"; out = «repeated»; outPath = "/nix/store/pjp935kxwai47zyx1wpwadls00m9nmib-bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-016"; out = «repeated»; outPath = "/nix/store/0cr4hvmwbfablyhn58ba0lrfb44igq5y-bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-017"; out = «repeated»; outPath = "/nix/store/in24890k6ybij0b63jisfmrwmmc6x7pv-bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-018"; out = «repeated»; outPath = "/nix/store/nffxsaniz7irz07z79cxwkhz97vgqwrx-bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-019"; out = «repeated»; outPath = "/nix/store/d5qpl3kqrmv99fbw1cd09qj9jr7kb2rr-bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-020"; out = «repeated»; outPath = "/nix/store/pcdlxsb3mxfjnclg8rn8xy2ywbb5ra36-bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-021"; out = «repeated»; outPath = "/nix/store/gnx16vs69p7fggsslnbg6v818497vvxl-bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/pgrp-pipe-5.patch { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = [ "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "fix-static.patch"; out = «repeated»; outPath = "/nix/store/1dydp86d00qzjbncpi80sdsndf33lc5j-fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/parallel.patch ]; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash-5.2.tar.gz"; out = «repeated»; outPath = "/nix/store/v28dv6l0qk3j382kp40bksa1v6h7dx9p-bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = <CODE>; outPath = "/nix/store/85c1srnbmr2973cyh40zf9q76q8z8xpv-bash-5.2-p21-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { shellPath = "/bin/bash"; tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.2"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--disable-csharp" "--with-xz" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { LDFLAGS = ""; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = false; enableParallelInstalling = true; gettextNeedsLdflags = false; hardeningDisable = [ "format" ]; mesonFlags = [ ]; name = "gettext-0.21.1"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "xz-5.4.5"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = [ "https://tukaani.org/xz/xz-5.4.5.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "xz-5.4.5.tar.bz2"; out = «repeated»; outPath = "/nix/store/2cxa62ycswpswvysa0nzanmh0qm79ikn-xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.4.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/kzzj8554415zqfdzyi74ygv18dqjz1g6-xz-5.4.5-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; updateScript = <CODE>; userHook = null; version = "5.4.5"; }; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/95v2r284b8sm9qpc6cwc16maxxiaclm4-xz-5.4.5-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "5.4.5"; } «repeated» ]; outputs = [ "out" "man" "doc" "info" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/gettext/absolute-paths.diff /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/gettext/0001-msginit-Do-not-use-POT-Creation-Date.patch ]; pname = "gettext"; postPatch = "substituteAllInPlace gettext-runtime/src/gettext.sh.in\nsubstituteInPlace gettext-tools/projects/KDE/trigger --replace \"/bin/pwd\" pwd\nsubstituteInPlace gettext-tools/projects/GNOME/trigger --replace \"/bin/pwd\" pwd\nsubstituteInPlace gettext-tools/src/project-id --replace \"/bin/pwd\" pwd\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/gettext/gettext-setup-hook.sh ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gettext-0.21.1.tar.gz"; outputHash = "sha256-6MNlDh2M7odcTzVWQjgsHfgwWL1aEe6FVcDPJ21kbUU="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gettext/gettext-0.21.1.tar.gz"; urls = [ "https://ftpmirror.gnu.org/gettext/gettext-0.21.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gettext-0.21.1.tar.gz"; out = «repeated»; outPath = "/nix/store/y2h7bqjpc4q9g887w8pbwncjrmr4g9sx-gettext-0.21.1.tar.gz"; outputHash = "sha256-6MNlDh2M7odcTzVWQjgsHfgwWL1aEe6FVcDPJ21kbUU="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gettext/gettext-0.21.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.21.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = false; enableParallelInstalling = true; gettextNeedsLdflags = false; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gettext-0.21.1"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/km2pm9xz3mv7974s545nnx6l63mja3km-gettext-0.21.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "gettext"; postPatch = "substituteAllInPlace gettext-runtime/src/gettext.sh.in\nsubstituteInPlace gettext-tools/projects/KDE/trigger --replace \"/bin/pwd\" pwd\nsubstituteInPlace gettext-tools/projects/GNOME/trigger --replace \"/bin/pwd\" pwd\nsubstituteInPlace gettext-tools/src/project-id --replace \"/bin/pwd\" pwd\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.21.1"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-64-bit-bfd" "--with-system-zlib" "--enable-deterministic-archives" "--disable-werror" "--enable-fix-loongson2f-nop" "--enable-new-dtags" "--program-prefix=" "--disable-gprofng" "--with-lib-path=:" "--enable-gold" "--enable-plugins" "--enable-shared" "--disable-static" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" "--target=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" "target" ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" "pie" ]; mesonFlags = [ ]; name = "binutils-2.40"; nativeBuildInputs = [ «repeated» «repeated» ]; noSysDirs = true; outputs = [ "out" "info" "man" "dev" "lib" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/deterministic.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-Revert-libtool.m4-fix-the-NM-nm-over-here-B-option-w.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-Revert-libtool.m4-fix-nm-BSD-flag-detection.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-libtool.m4-update-macos-version-detection-block.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/always-search-rpath.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/plugins-no-BINDIR.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/CVE-2023-1972.patch ]; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "binutils-2.40.tar.bz2"; outputHash = "sha256-+CmOsVOks30RLpRapcsoUAQLzyaj6mW1pxXIOv4F5Io="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/binutils/binutils-2.40.tar.bz2"; urls = [ "https://ftpmirror.gnu.org/binutils/binutils-2.40.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "binutils-2.40.tar.bz2"; out = «repeated»; outPath = "/nix/store/9vapsdndf66l1bfp7210hrd7vs42lvvc-binutils-2.40.tar.bz2"; outputHash = "sha256-+CmOsVOks30RLpRapcsoUAQLzyaj6mW1pxXIOv4F5Io="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/binutils/binutils-2.40.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; userHook = null; version = "2.40"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = <CODE>; man = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "Tools for manipulating binaries (linker, assembler, etc.)"; homepage = "https://www.gnu.org/software/binutils/"; insecure = <CODE>; license = { deprecated = false; free = true; fullName = "GNU General Public License v3.0 or later"; redistributable = <CODE>; shortName = "gpl3Plus"; spdxId = "GPL-3.0-or-later"; url = <CODE>; }; longDescription = "The GNU Binutils are a collection of binary tools.  The main\nones are `ld' (the GNU linker) and `as' (the GNU assembler).\nThey also include the BFD (Binary File Descriptor) library,\n`gprof', `nm', `strip', etc.\n"; maintainers = [ <CODE> <CODE> ]; name = <CODE>; outputsToInstall = <CODE>; platforms = [ "i686-cygwin" "x86_64-cygwin" "x86_64-darwin" "i686-darwin" "aarch64-darwin" "armv7a-darwin" "i686-freebsd13" "x86_64-freebsd13" "x86_64-solaris" "aarch64-linux" "armv5tel-linux" "armv6l-linux" "armv7a-linux" "armv7l-linux" "i686-linux" "loongarch64-linux" "m68k-linux" "microblaze-linux" "microblazeel-linux" "mips-linux" "mips64-linux" "mips64el-linux" "mipsel-linux" "powerpc64-linux" "powerpc64le-linux" "riscv32-linux" "riscv64-linux" "s390-linux" "s390x-linux" "x86_64-linux" <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> <CODE> ]; position = <CODE>; priority = 10; unfree = <CODE>; unsupported = <CODE>; }; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { hasGold = true; hasPluginAPI = true; isGNU = true; targetPrefix = ""; }; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; userHook = null; version = "2.40"; }; outPath = "/nix/store/az33k85q5ibx3fm09wn0rlvhidqh6m40-binutils-2.40-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "2.40"; }; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/j8kg2fcjfbpppdi4s90pz7dgpgqcg8cp-binutils-2.40-info"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "2.40"; }; inputDerivation = <CODE>; isGNU = true; lib = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; userHook = null; version = "2.40"; }; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40 /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/az33k85q5ibx3fm09wn0rlvhidqh6m40-binutils-2.40-man $man\nln -s /nix/store/j8kg2fcjfbpppdi4s90pz7dgpgqcg8cp-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/bintools-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; drvPath = <CODE>; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; dynamicLinker = "/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = «repeated»; outPath = "/nix/store/qsbn2r4f9pwsyiwqbrdbmq0nxrjkd8s1-binutils-wrapper-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; emacsBufferSetup = <CODE>; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; nativeLibc = false; nativePrefix = ""; nativeTools = false; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40 /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/az33k85q5ibx3fm09wn0rlvhidqh6m40-binutils-2.40-man $man\nln -s /nix/store/j8kg2fcjfbpppdi4s90pz7dgpgqcg8cp-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; outPath = "/nix/store/qsbn2r4f9pwsyiwqbrdbmq0nxrjkd8s1-binutils-wrapper-2.40"; outputName = "out"; outputs = «repeated»; override = { __functionArgs = <CODE>; __functor = <LAMBDA>; }; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40 /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/az33k85q5ibx3fm09wn0rlvhidqh6m40-binutils-2.40-man $man\nln -s /nix/store/j8kg2fcjfbpppdi4s90pz7dgpgqcg8cp-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildFlags = [ ]; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-pic" "--disable-cxx" "--enable-fat" "--build=x86_64-unknown-linux-gnu" ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontDisableStatic = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "gmp-6.3.0"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "dev" "info" ]; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = [ "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gmp-6.3.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/n1djrrflvxnwdd735304l23r2qdnjrm6-gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "6.3.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-6.3.0"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-6.3.0"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/cziqm3kd3a1q7zmr240pymsmbffkc146-gmp-6.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { static = <CODE>; }; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; }; outPath = "/nix/store/gg4zr36ggs7sr0z51gsdy8nrpxl0aq22-gmp-6.3.0-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-pic" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "doc" "info" ]; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "mpfr-4.2.1.tar.xz"; outputHash = "sha256-J3gHNTpnJpeJlpRa8T5Sgp46vXqaW3+yeTiU4Y8fy7I="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz"; urls = [ "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "mpfr-4.2.1.tar.xz"; out = «repeated»; outPath = "/nix/store/7s2kcdbk0n0dpsq9gwkj8dqyw21yfyhp-mpfr-4.2.1.tar.xz"; outputHash = "sha256-J3gHNTpnJpeJlpRa8T5Sgp46vXqaW3+yeTiU4Y8fy7I="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "4.2.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/xq4dpv12zk27qk14wjx3cw1fnmm7c2l9-mpfr-4.2.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "4.2.1"; }; outPath = "/nix/store/bmyws640kp0bxidhzh5lzbcxs7iasbx2-mpfr-4.2.1-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "4.2.1"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libmpc-1.3.1"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "libmpc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "mpc-1.3.1.tar.gz"; outputHash = "sha256-q2QkkvXPiCt0qgy3MM1BCoHtzb7IlRg86TDnBsHHWbg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz"; urls = [ "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "mpc-1.3.1.tar.gz"; out = «repeated»; outPath = "/nix/store/mdrv8znlgnysqzq1hnv46vi9jmnsc1bc-mpc-1.3.1.tar.gz"; outputHash = "sha256-q2QkkvXPiCt0qgy3MM1BCoHtzb7IlRg86TDnBsHHWbg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.3.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libmpc-1.3.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/z1w95flj0iynizkg8vmg0x55akd5vqg1-libmpc-1.3.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libmpc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.3.1"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-hashes=strong" "--enable-obsolete-api=glibc" "--disable-failure-tokens" "--disable-werror" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ ]; mesonFlags = [ ]; name = "libxcrypt-4.4.36"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-de" "-Dcc=cc" "-Uinstallusrbinperl" "-Dinstallstyle=lib/perl5" "-Duseshrplib" "-Dlocincpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include" "-Dloclibpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib" "-A clear:d_crypt_r" "-Dprefix=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9" "-Dman1dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man1" "-Dman3dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man3" ]; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; devdoc = <CODE>; disallowedReferences = [ "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-" ]; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = «repeated»; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; enableParallelBuilding = false; mesonFlags = [ ]; name = "perl-5.38.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "devdoc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/no-sys-dirs-5.38.0.patch ]; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = [ "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "perl-5.38.2.tar.gz"; out = «repeated»; outPath = "/nix/store/mp5jcbm1hjqw4ckxvrm7k0pfhhjf3dbg-perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.38.2"; }; drvPath = <CODE>; enableParallelBuilding = false; inputDerivation = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "perl-5.38.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; perlOnBuild = <CODE>; pkgs = <CODE>; withPackages = <CODE>; }; patches = «repeated»; perlOnBuild = <CODE>; pkgs = <CODE>; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "5.38.2"; withPackages = <CODE>; } ]; outputs = [ "out" "man" ]; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = [ "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libxcrypt-4.4.36.tar.xz"; out = «repeated»; outPath = "/nix/store/f76sw6av28v3cv6nxmqw190pkpnfnw9b-libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.4.36"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; enabledCryptSchemeIds = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libxcrypt-4.4.36"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { enabledCryptSchemeIds = <CODE>; tests = <CODE>; }; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "4.4.36"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-gcc-arch=generic" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "isl-0.20"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "isl"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "isl-0.20.tar.xz"; outputHash = "1akpgq0rbqbah5517blg2zlnfvjxfcl9cjrfc75nbcx5p2gnlnd5"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz"; urls = [ "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "isl-0.20.tar.xz"; out = «repeated»; outPath = "/nix/store/x9v0hmr76dm68pijzldzxks01iqzag1z-isl-0.20.tar.xz"; outputHash = "1akpgq0rbqbah5517blg2zlnfvjxfcl9cjrfc75nbcx5p2gnlnd5"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.20"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "isl-0.20"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/032cxr1f85a9zpfqvh62p1i84swnb7bq-isl-0.20"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "isl"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.20"; } «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = [ "--with-gmp-include=/nix/store/gg4zr36ggs7sr0z51gsdy8nrpxl0aq22-gmp-6.3.0-dev/include" "--with-gmp-lib=/nix/store/cziqm3kd3a1q7zmr240pymsmbffkc146-gmp-6.3.0/lib" "--with-mpfr-include=/nix/store/bmyws640kp0bxidhzh5lzbcxs7iasbx2-mpfr-4.2.1-dev/include" "--with-mpfr-lib=/nix/store/xq4dpv12zk27qk14wjx3cw1fnmm7c2l9-mpfr-4.2.1/lib" "--with-mpc=/nix/store/z1w95flj0iynizkg8vmg0x55akd5vqg1-libmpc-1.3.1" "--with-native-system-header-dir=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include" "--with-build-sysroot=/" "--program-prefix=" "--disable-lto" "--disable-libstdcxx-pch" "--without-included-gettext" "--with-system-zlib" "--enable-static" "--enable-languages=c,c++" "--disable-multilib" "--enable-plugin" "--disable-libcc1" "--with-isl=/nix/store/032cxr1f85a9zpfqvh62p1i84swnb7bq-isl-0.20" "--disable-bootstrap" "--with-native-system-header-dir=/include" "--with-build-sysroot=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" "--target=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" "target" ]; crossMingw = false; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/patchelf/setup-hook.sh ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = [ "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "patchelf-0.15.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/447hvnlzzi9myri1iq3bijxgx6v6b592-patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.15.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/s9g7xyrr2ffk6qdv3862x4p3sdgxdyig-patchelf-0.15.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.15.0"; } ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; hardeningDisable = [ "format" "pie" ]; libcCross = null; libc_dev = «repeated»; mesonFlags = [ ]; name = "xgcc-12.3.0"; nativeBuildInputs = [ { NATIVE_TOOLS_CFLAGS = null; NATIVE_TOOLS_LDFLAGS = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» «repeated» null ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkFlags = [ ]; cmakeFlags = [ ]; configureFlags = [ "PERL=/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2/bin/perl" ]; depsBuildBuild = [ «repeated» «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { NATIVE_TOOLS_CFLAGS = null; NATIVE_TOOLS_LDFLAGS = null; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkFlags = [ ]; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installFlags = [ "TEXMF=$(out)/texmf-dist" ]; installTargets = [ "install" "install-tex" ]; mesonFlags = [ ]; name = "texinfo-7.0.3"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "texinfo"; postFixup = ""; postPatch = "patchShebangs tp/maintain\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "texinfo-7.0.3.tar.xz"; outputHash = "sha256-dLQg0J1/Uo6E+XqjMPDdaamKYFPnpOAXZ+7RFQOIB78="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz"; urls = [ "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "texinfo-7.0.3.tar.xz"; out = «repeated»; outPath = "/nix/store/q9ccnr97sv21jlmzxqsra5jyp71s51dl-texinfo-7.0.3.tar.xz"; outputHash = "sha256-dLQg0J1/Uo6E+XqjMPDdaamKYFPnpOAXZ+7RFQOIB78="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "7.0.3"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = «repeated»; installTargets = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "texinfo-7.0.3"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/18i8shn8wrwp13qk3gsq9xd7pg508w83-texinfo-7.0.3"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "texinfo"; postFixup = ""; postPatch = "patchShebangs tp/maintain\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "7.0.3"; } { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "which-2.21"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "which"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "which-2.21.tar.gz"; outputHash = "sha256-9KJFuUEks3fYtJZGv0IfkVXTaqdhS26/g3BdP/x26q0="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/which/which-2.21.tar.gz"; urls = [ "https://ftpmirror.gnu.org/which/which-2.21.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "which-2.21.tar.gz"; out = «repeated»; outPath = "/nix/store/349f140sh7m12vy9mp1wkp58axyp06c9-which-2.21.tar.gz"; outputHash = "sha256-9KJFuUEks3fYtJZGv0IfkVXTaqdhS26/g3BdP/x26q0="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/which/which-2.21.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.21"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "which-2.21"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/b8lxq4729ll5n20jh3hd9mgnyhy80p7y-which-2.21"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "which"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.21"; } «repeated» «repeated» ]; noSysDirs = true; outputs = [ "out" "man" "info" "lib" "libgcc" "checksum" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/gcc-12-no-sys-dirs.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/no-sys-dirs-riscv.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/12/mangle-NIX_STORE-in-__FILE__.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/ppc-musl.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/12/lambda-ICE-PR109241.patch ]; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = [ "preFixupLibGccPhase" "postInstallSaveChecksumPhase" "preFixupXgccPhase" ]; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gcc-12.3.0.tar.xz"; outputHash = "sha256-lJpdT5nnhkIak7Uysi/6tVeN5zITaZdbka7Jet/ajDs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz"; urls = [ "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gcc-12.3.0.tar.xz"; out = «repeated»; outPath = "/nix/store/cxpxzdliawd35hd79n10xcfhcn051jbb-gcc-12.3.0.tar.xz"; outputHash = "sha256-lJpdT5nnhkIak7Uysi/6tVeN5zITaZdbka7Jet/ajDs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz"; urls = «repeated»; }; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = [ "bin" "libexec" ]; stripDebugListTarget = [ "x86_64-unknown-linux-gnu" ]; system = "x86_64-linux"; targetConfig = null; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; hardeningDisable = «repeated»; info = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; man = { CPATH = "/nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "GNU Compiler Collection, version 12.3.0"; homepage = <CODE>; insecure = <CODE>; license = «repeated»; longDescription = <CODE>; maintainers = [ <CODE> <CODE> <CODE> ]; name = <CODE>; outputsToInstall = <CODE>; platforms = «repeated»; position = <CODE>; unfree = <CODE>; unsupported = <CODE>; }; name = "xgcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { forceLibgccToBuildCrtStuff = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; version = "12.3.0"; }; patches = «repeated»; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; mesonFlags = [ ]; meta = «repeated»; name = "xgcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/ldrslljw4rg026nw06gyrdwl78k77vyq-xgcc-12.3.0-libgcc"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "xgcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "xgcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; inputDerivation = <CODE>; isGNU = true; isXgcc = true; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "xgcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "xgcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/6kmzpw6536z3qk2lr65qx132d9y0fxnl-bash-5.2-p21/bin/bash\n/nix/store/lyd5yv2j7i67ppwbm64g0rh6mkzs05g3-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/hfss3040wbxpnk6cc40yq3wqpc472v7a-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preFixupXgccPhase = "find $lib/lib/ -name \\*.so\\* -exec patchelf --shrink-rpath {} \\; || true\n"; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = "derivation"; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage2-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "bootstrap-stage2-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; name = "expand-response-params"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; meta = <CODE>; name = "expand-response-params"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage2-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/0b50817qqbgkfh6226zkwj06a906hs5m-bootstrap-stage2-gcc-wrapper-12.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = «repeated»; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage2-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; } ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { ARCH = "x86_64"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "make mrproper $makeFlags\nmake headers $makeFlags\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkPhase = "make headers_check $makeFlags\n"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; extraIncludeDirs = [ ]; hardeningDisable = [ ]; installPhase = "mkdir -p $out\ncp -r usr/include $out\nfind $out -type f ! -name '*.h' -delete\nmkdir -p $out/include/config\necho \"6.6-default\" > $out/include/config/kernel.release\n"; makeFlags = [ "SHELL=bash" "cc-version:=9999" "cc-fullversion:=999999" "HOSTCC:=$(CC_FOR_BUILD)" "HOSTCXX:=$(CXX_FOR_BUILD)" ]; mesonFlags = [ ]; name = "linux-headers-6.6"; nativeBuildInputs = [ «repeated» null ]; outputs = [ "out" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/os-specific/linux/kernel-headers/no-relocs.patch ]; pname = "linux-headers"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "linux-6.6.tar.xz"; outputHash = "sha256-2SagbGPdisffP4buH/ws4qO4Gi0WhITna1s4mrqOVtA="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.6.tar.xz"; urls = [ "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.6.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "linux-6.6.tar.xz"; out = «repeated»; outPath = "/nix/store/cdhb1yi17m2r0fw8yjsn54j4j7gla6mv-linux-6.6.tar.xz"; outputHash = "sha256-2SagbGPdisffP4buH/ws4qO4Gi0WhITna1s4mrqOVtA="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.6.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "6.6"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; extraIncludeDirs = [ ]; hardeningDisable = [ ]; inputDerivation = <CODE>; installPhase = "mkdir -p $out\ncp -r usr/include $out\nfind $out -type f ! -name '*.h' -delete\nmkdir -p $out/include/config\necho \"6.6-default\" > $out/include/config/kernel.release\n"; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "linux-headers-6.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/k2y2yhvv95pkxp585nclrrmyf9pmj0iw-linux-headers-6.6"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "linux-headers"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.6"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-C" "--enable-add-ons" "--sysconfdir=/etc" "--enable-stack-protector=strong" "--enable-bind-now" "--with-headers=/nix/store/k2y2yhvv95pkxp585nclrrmyf9pmj0iw-linux-headers-6.6/include" "--disable-profile" "--enable-fortify-source" "--enable-static-pie" "--enable-cet" "--enable-kernel=3.10.0" ]; debug = <CODE>; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = { BASH_SHELL = "/bin/sh"; NIX_CFLAGS_COMPILE = ""; NIX_HARDENING_ENABLE = «repeated»; NIX_NO_SELF_RPATH = true; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; drvAttrs = { BASH_SHELL = "/bin/sh"; NIX_CFLAGS_COMPILE = ""; NIX_HARDENING_ENABLE = «repeated»; NIX_NO_SELF_RPATH = true; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "fortify" "pie" "stackprotector" ]; installFlags = [ "sysconfdir=$(out)/etc" ]; is64bit = true; linuxHeaders = { ARCH = "x86_64"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; buildPhase = "make mrproper $makeFlags\nmake headers $makeFlags\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkPhase = "make headers_check $makeFlags\n"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; extraIncludeDirs = [ ]; hardeningDisable = [ ]; inputDerivation = <CODE>; installPhase = "mkdir -p $out\ncp -r usr/include $out\nfind $out -type f ! -name '*.h' -delete\nmkdir -p $out/include/config\necho \"6.6-default\" > $out/include/config/kernel.release\n"; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "linux-headers-6.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/k2y2yhvv95pkxp585nclrrmyf9pmj0iw-linux-headers-6.6"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = «repeated»; pname = "linux-headers"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "6.6"; }; makeFlags = [ "OBJCOPY=objcopy" "user-defined-trusted-dirs=/nix/store/ldrslljw4rg026nw06gyrdwl78k77vyq-xgcc-12.3.0-libgcc/lib" ]; mesonFlags = [ ]; name = "glibc-2.38-27"; nativeBuildInputs = [ «repeated» { CPPFLAGS = "-I/nix/store/8lizwkpaqibyjd91la5qywq83bz5ismn-zlib-1.3-dev/include -I/nix/store/cpgxcjmamlxy7r928hassd1s4izkagiv-bzip2-1.0.8-dev/include -I/nix/store/gis2x3k4fm2dam6dn9qzy9bg1a961xx6-expat-2.5.0-dev/include -I/nix/store/s7g5w6nri0i2rhqwfwfmc1q2115v0mhn-xz-5.4.5-dev/include -I/nix/store/jnr3hfryqbnx03pyy8c9h6kavq1dvsq5-libffi-3.4.4-dev/include -I/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include"; LDFLAGS = "-L/nix/store/yzk8zhrfjv8s01n7s75xxia8qd83m8zb-zlib-1.3/lib -L/nix/store/w8sch8v0k50kvkvqjfsacaa6rk0scr1a-bzip2-1.0.8/lib -L/nix/store/d4ny3k0pxhibmx4817pbsl0kvga4yzfg-expat-2.5.0/lib -L/nix/store/d8jh0zvq53brjlbbyjyj34ahy7dq9ii4-xz-5.4.5/lib -L/nix/store/y29885lsg2xyq55adw0n3l8qaxmzn2s7-libffi-3.4.4/lib -L/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/lib"; LIBS = "-lcrypt"; NIX_LDFLAGS = "-lgcc_s"; PYTHONHASHSEED = 0; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-bash-malloc" "--disable-readline" ]; debug = <CODE>; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" ]; makeFlags = [ ]; mesonFlags = [ ]; name = "bash-5.2-p21"; nativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "dev" "man" "doc" "info" "debug" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-001"; out = «repeated»; outPath = "/nix/store/a73wzcks7h2y814qxa1z3kv1hg205mpm-bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-002"; out = «repeated»; outPath = "/nix/store/xc3h9isl5566i6a4pvdsgin26rchijrq-bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-003"; out = «repeated»; outPath = "/nix/store/sxc8xmi7caxaiywzh15za9crpk3bw98z-bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-004"; out = «repeated»; outPath = "/nix/store/2ynclzrdl0hy9miy6k8gcwgzw4mhsmd0-bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-005"; out = «repeated»; outPath = "/nix/store/z76vsdh69cvwkwhwg69k7d1znwjmx6hf-bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-006"; out = «repeated»; outPath = "/nix/store/1fw5fcsjz9wcbf13a5xs4i2cjfircp3x-bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-007"; out = «repeated»; outPath = "/nix/store/rs1qdpy1nb3x07g4vqvb4s774qhq9f0w-bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-008"; out = «repeated»; outPath = "/nix/store/jn9f2mr2jdm9yn5hi0pws44nbfrah8d3-bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-009"; out = «repeated»; outPath = "/nix/store/j8vipdfzslz4aa7aj0amwd4msxa9hhpl-bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-010"; out = «repeated»; outPath = "/nix/store/24ygbbc9k6vjc4vhz2j6a9dkdgmqgc6n-bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-011"; out = «repeated»; outPath = "/nix/store/sim601rd1y3hsap9qkn25cwprsa9aipp-bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-012"; out = «repeated»; outPath = "/nix/store/x1sqwqn02c5mnpi8hbqlxpbm3rahq5dm-bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-013"; out = «repeated»; outPath = "/nix/store/wcpqrbsljh2x04qccs6jv9z8c9y1c3cd-bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-014"; out = «repeated»; outPath = "/nix/store/cddj9qpc4l62qjy6vvf7gp50mfqaf506-bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-015"; out = «repeated»; outPath = "/nix/store/pjp935kxwai47zyx1wpwadls00m9nmib-bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-016"; out = «repeated»; outPath = "/nix/store/0cr4hvmwbfablyhn58ba0lrfb44igq5y-bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-017"; out = «repeated»; outPath = "/nix/store/in24890k6ybij0b63jisfmrwmmc6x7pv-bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-018"; out = «repeated»; outPath = "/nix/store/nffxsaniz7irz07z79cxwkhz97vgqwrx-bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-019"; out = «repeated»; outPath = "/nix/store/d5qpl3kqrmv99fbw1cd09qj9jr7kb2rr-bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-020"; out = «repeated»; outPath = "/nix/store/pcdlxsb3mxfjnclg8rn8xy2ywbb5ra36-bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-021"; out = «repeated»; outPath = "/nix/store/gnx16vs69p7fggsslnbg6v818497vvxl-bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/pgrp-pipe-5.patch { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = [ "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "fix-static.patch"; out = «repeated»; outPath = "/nix/store/1dydp86d00qzjbncpi80sdsndf33lc5j-fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/parallel.patch ]; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash-5.2.tar.gz"; out = «repeated»; outPath = "/nix/store/v28dv6l0qk3j382kp40bksa1v6h7dx9p-bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = «repeated»; }; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = «repeated»; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage2-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/0b50817qqbgkfh6226zkwj06a906hs5m-bootstrap-stage2-gcc-wrapper-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage2-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc\necho \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage2-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = «repeated»; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage2-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage2-stdenv-linux"; out = «repeated»; outPath = "/nix/store/g7xwymqqcbarvmma1j6byl4vscsihi7w-bootstrap-stage2-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/g7xwymqqcbarvmma1j6byl4vscsihi7w-bootstrap-stage2-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = <CODE>; outPath = "/nix/store/cjiykcgw5179znk6yna4kji3b5akvxsw-bash-5.2-p21-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { shellPath = "/bin/bash"; tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.2"; } { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--static" "--shared" ]; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installFlags = [ ]; makeFlags = [ "PREFIX=" "SHARED_MODE=1" ]; mesonFlags = [ ]; name = "zlib-1.3"; nativeBuildInputs = [ ]; outputDoc = "dev"; outputs = [ "out" "dev" "static" ]; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = [ "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "zlib-1.3.tar.gz"; out = «repeated»; outPath = "/nix/store/c1hg8k7vjy5hxfm39pp30xgiw7qk7xwf-zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.3"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/yzk8zhrfjv8s01n7s75xxia8qd83m8zb-zlib-1.3"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; }; outPath = "/nix/store/8lizwkpaqibyjd91la5qywq83bz5ismn-zlib-1.3-dev"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontDisableStatic = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "bzip2-1.0.8"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoreconf-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = <CODE>; dontPatchShebangs = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoconf-2.71"; nativeBuildInputs = [ «repeated» «repeated» «repeated» ]; outputs = [ "out" "doc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/autoconf/2.71-fix-race.patch ]; pname = "autoconf"; postBuild = "\n    make html\n  "; postInstall = "\n    make install-html\n  "; preCheck = "export TESTSUITEFLAGS=\"-j$NIX_BUILD_CORES\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "autoconf-2.71.tar.xz"; outputHash = "197sl23irn6s9pd54rxj5vcp5y8dv65jb9yfqgr2g56cxg7q6k7i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz"; urls = [ "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "autoconf-2.71.tar.xz"; out = «repeated»; outPath = "/nix/store/g3pzpdicszf700d5xffyk939jzxa4r2k-autoconf-2.71.tar.xz"; outputHash = "197sl23irn6s9pd54rxj5vcp5y8dv65jb9yfqgr2g56cxg7q6k7i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.71"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoconf-2.71"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/rl3sz9v30c687a80yx36v4vixdrymsir-autoconf-2.71"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "autoconf"; postBuild = "\n    make html\n  "; postInstall = "\n    make install-html\n  "; preCheck = "export TESTSUITEFLAGS=\"-j$NIX_BUILD_CORES\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.71"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontPatchShebangs = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "automake-1.16.5"; nativeBuildInputs = [ «repeated» «repeated» ]; outputs = [ "out" ]; patches = [ ]; pname = "automake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/automake/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "automake-1.16.5.tar.xz"; outputHash = "0sdl32qxdy7m06iggmkkvf7j520rmmgbsjzbm7fgnxwxdp6mh7gh"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz"; urls = [ "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "automake-1.16.5.tar.xz"; out = «repeated»; outPath = "/nix/store/gmaq49vzfrkvr714y4fhfxv100ijihin-automake-1.16.5.tar.xz"; outputHash = "0sdl32qxdy7m06iggmkkvf7j520rmmgbsjzbm7fgnxwxdp6mh7gh"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.16.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "automake-1.16.5"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/3qq5yngn1njx81vad7r5hg7iwvh7p198-automake-1.16.5"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "automake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/automake/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.16.5"; } «repeated» { FILECMD = "/nix/store/f74d5csrs19zxbcqqpx9j5w3iljhh07y-file-5.45/bin/file"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontFixLibtool = true; dontPatchShebangs = true; drvAttrs = { FILECMD = "/nix/store/f74d5csrs19zxbcqqpx9j5w3iljhh07y-file-5.45/bin/file"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontFixLibtool = true; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libtool-2.4.7"; nativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ ]; mesonFlags = [ ]; name = "file-5.45"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "man" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/misc/file/32-bit-time_t.patch ]; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "file-5.45.tar.gz"; outputHash = "sha256-/Jf1ECm7DiyfTjv/79r2ePDgOe6HK53lwAKm0Jx4TYI="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://astron.com/pub/file/file-5.45.tar.gz"; urls = [ "https://astron.com/pub/file/file-5.45.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "file-5.45.tar.gz"; out = «repeated»; outPath = "/nix/store/v0m59igyinq3qrbx7fibyal1dx5f6rcq-file-5.45.tar.gz"; outputHash = "sha256-/Jf1ECm7DiyfTjv/79r2ePDgOe6HK53lwAKm0Jx4TYI="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://astron.com/pub/file/file-5.45.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.45"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "file-5.45"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/j7kq2nn4d7y6fl17c318qbr2ac99a97c-file-5.45-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = «repeated»; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.45"; } ]; outputs = [ "out" "lib" ]; patches = [ ]; pname = "libtool"; postPatch = "substituteInPlace libtoolize.in       --replace '#! /usr/bin/env sh' '#!/nix/store/4yiysw2imfz55naxlkvgv6bmhx268baz-bash-5.2-p21/bin/bash'\n# avoid help2man run after 'libtoolize.in' update\ntouch doc/libtoolize.1\n"; propagatedBuildInputs = [ «repeated» «repeated» ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libtool-2.4.7.tar.gz"; outputHash = "sha256-BOlsJATqcMWQxUbrpCAqThJyLGQAFsErmy8c49SB6ag="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz"; urls = [ "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libtool-2.4.7.tar.gz"; out = «repeated»; outPath = "/nix/store/ck70x6hdl1kgqa4a9ps8spw6ph9mfcj8-libtool-2.4.7.tar.gz"; outputHash = "sha256-BOlsJATqcMWQxUbrpCAqThJyLGQAFsErmy8c49SB6ag="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.4.7"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; lib = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libtool-2.4.7"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/7qgzini22a413qdd171j4jjn662b3kzq-libtool-2.4.7"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libtool"; postPatch = "substituteInPlace libtoolize.in       --replace '#! /usr/bin/env sh' '#!/nix/store/4yiysw2imfz55naxlkvgv6bmhx268baz-bash-5.2-p21/bin/bash'\n# avoid help2man run after 'libtoolize.in' update\ntouch doc/libtoolize.1\n"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.4.7"; } ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoreconf-hook"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/nrk397g9zqgx056n632b00nfgf3iw7kn-autoreconf-hook"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } ]; outputs = [ "bin" "dev" "out" "man" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bzip2-1.0.6.2-autoconfiscated.patch"; outputHash = "sha256-QMufl6ffJVVVVZespvkCbFpB6++R1lnq1687jEsUjr0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch"; urls = [ "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bzip2-1.0.6.2-autoconfiscated.patch"; out = «repeated»; outPath = "/nix/store/ws73d521m0im6x7nhb0836i51z2yd9dq-bzip2-1.0.6.2-autoconfiscated.patch"; outputHash = "sha256-QMufl6ffJVVVVZespvkCbFpB6++R1lnq1687jEsUjr0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch"; urls = «repeated»; } ]; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bzip2-1.0.8.tar.gz"; outputHash = "sha256-q1oDF27hBtPw+pDjgdpHjdrkBZGBU8yiSOaCzQxKImk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"; urls = [ "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bzip2-1.0.8.tar.gz"; out = «repeated»; outPath = "/nix/store/slpdqm3wlhwbkzyijjz3xpifa219ac0x-bzip2-1.0.8.tar.gz"; outputHash = "sha256-q1oDF27hBtPw+pDjgdpHjdrkBZGBU8yiSOaCzQxKImk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.0.8"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bzip2-1.0.8"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bzip2-1.0.8"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/w8sch8v0k50kvkvqjfsacaa6rk0scr1a-bzip2-1.0.8"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.0.8"; }; outPath = "/nix/store/cpgxcjmamlxy7r928hassd1s4izkagiv-bzip2-1.0.8-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patchFlags = «repeated»; patches = «repeated»; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.0.8"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "expat-2.5.0"; nativeBuildInputs = [ ]; outputBin = "dev"; outputMan = "dev"; outputs = [ "out" "dev" ]; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "expat-2.5.0.tar.xz"; outputHash = "1gnwihpfz4x18rwd6cbrdggmfqjzwsdfh1gpmc0ph21c4gq2097g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz"; urls = [ "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "expat-2.5.0.tar.xz"; out = «repeated»; outPath = "/nix/store/z0dk90vlwlhm097kka2632wmnjr0izw2-expat-2.5.0.tar.xz"; outputHash = "1gnwihpfz4x18rwd6cbrdggmfqjzwsdfh1gpmc0ph21c4gq2097g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.5.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "expat-2.5.0"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "expat-2.5.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/d4ny3k0pxhibmx4817pbsl0kvga4yzfg-expat-2.5.0"; outputBin = "dev"; outputMan = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "2.5.0"; }; outPath = "/nix/store/gis2x3k4fm2dam6dn9qzy9bg1a961xx6-expat-2.5.0-dev"; outputBin = "dev"; outputMan = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "2.5.0"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "xz-5.4.5"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = [ "https://tukaani.org/xz/xz-5.4.5.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "xz-5.4.5.tar.bz2"; out = «repeated»; outPath = "/nix/store/2cxa62ycswpswvysa0nzanmh0qm79ikn-xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.4.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/d8jh0zvq53brjlbbyjyj34ahy7dq9ii4-xz-5.4.5"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "5.4.5"; }; outPath = "/nix/store/s7g5w6nri0i2rhqwfwfmc1q2115v0mhn-xz-5.4.5-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "5.4.5"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-gcc-arch=generic" "--enable-pax_emutramp" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontStrip = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontStrip = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "man" "info" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/libffi/fix-implicit-fun-decl.patch ]; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libffi-3.4.4.tar.gz"; outputHash = "sha256-1mxWrSWags8qnfxAizK/XaUjcVALhHRff7i2RXEt9nY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"; urls = [ "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libffi-3.4.4.tar.gz"; out = «repeated»; outPath = "/nix/store/pgxpq0lmk4bd0yybaxkb82qlcjx55apn-libffi-3.4.4.tar.gz"; outputHash = "sha256-1mxWrSWags8qnfxAizK/XaUjcVALhHRff7i2RXEt9nY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "3.4.4"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontStrip = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/y29885lsg2xyq55adw0n3l8qaxmzn2s7-libffi-3.4.4"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = «repeated»; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "3.4.4"; }; outPath = "/nix/store/jnr3hfryqbnx03pyy8c9h6kavq1dvsq5-libffi-3.4.4-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "3.4.4"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-hashes=strong" "--enable-obsolete-api=glibc" "--disable-failure-tokens" "--disable-werror" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ ]; mesonFlags = [ ]; name = "libxcrypt-4.4.36"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-de" "-Dcc=cc" "-Uinstallusrbinperl" "-Dinstallstyle=lib/perl5" "-Duseshrplib" "-Dlocincpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include" "-Dloclibpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib" "-A clear:d_crypt_r" "-Dprefix=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9" "-Dman1dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man1" "-Dman3dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man3" ]; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; devdoc = <CODE>; disallowedReferences = [ "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-" ]; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = «repeated»; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; enableParallelBuilding = false; mesonFlags = [ ]; name = "perl-5.38.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "devdoc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/no-sys-dirs-5.38.0.patch ]; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = [ "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "perl-5.38.2.tar.gz"; out = «repeated»; outPath = "/nix/store/mp5jcbm1hjqw4ckxvrm7k0pfhhjf3dbg-perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.38.2"; }; drvPath = <CODE>; enableParallelBuilding = false; inputDerivation = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "perl-5.38.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; perlOnBuild = <CODE>; pkgs = <CODE>; withPackages = <CODE>; }; patches = «repeated»; perlOnBuild = <CODE>; pkgs = <CODE>; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "5.38.2"; withPackages = <CODE>; } ]; outputs = [ "out" "man" ]; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = [ "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libxcrypt-4.4.36.tar.xz"; out = «repeated»; outPath = "/nix/store/f76sw6av28v3cv6nxmqw190pkpnfnw9b-libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.4.36"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; enabledCryptSchemeIds = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libxcrypt-4.4.36"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { enabledCryptSchemeIds = <CODE>; tests = <CODE>; }; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "4.4.36"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-ensurepip" "--with-system-expat" "--with-system-ffi" "--enable-shared" "CFLAGS=-I/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include" "LIBS=-L/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/lib" "ac_cv_func_lchmod=no" ]; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = [ ]; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { CPPFLAGS = "-I/nix/store/8lizwkpaqibyjd91la5qywq83bz5ismn-zlib-1.3-dev/include -I/nix/store/cpgxcjmamlxy7r928hassd1s4izkagiv-bzip2-1.0.8-dev/include -I/nix/store/gis2x3k4fm2dam6dn9qzy9bg1a961xx6-expat-2.5.0-dev/include -I/nix/store/s7g5w6nri0i2rhqwfwfmc1q2115v0mhn-xz-5.4.5-dev/include -I/nix/store/jnr3hfryqbnx03pyy8c9h6kavq1dvsq5-libffi-3.4.4-dev/include -I/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include"; LDFLAGS = "-L/nix/store/yzk8zhrfjv8s01n7s75xxia8qd83m8zb-zlib-1.3/lib -L/nix/store/w8sch8v0k50kvkvqjfsacaa6rk0scr1a-bzip2-1.0.8/lib -L/nix/store/d4ny3k0pxhibmx4817pbsl0kvga4yzfg-expat-2.5.0/lib -L/nix/store/d8jh0zvq53brjlbbyjyj34ahy7dq9ii4-xz-5.4.5/lib -L/nix/store/y29885lsg2xyq55adw0n3l8qaxmzn2s7-libffi-3.4.4/lib -L/nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/lib"; LIBS = "-lcrypt"; NIX_LDFLAGS = "-lgcc_s"; PYTHONHASHSEED = 0; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "python3-minimal-3.11.6"; nativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; addFlags = [ ]; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; baseBinName = "pkg-config"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; doc = <CODE>; dontBuild = true; dontConfigure = true; dontUnpack = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addFlags = [ ]; args = «repeated»; baseBinName = "pkg-config"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\n\necho $pkg-config > $out/nix-support/orig-pkg-config\n\nwrap pkg-config /nix/store/lypyhrdqir7lhwhsvrr1cp85ywh3dhas-pkg-config-wrapper.sh \"/nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2/bin/pkg-config\"\nln -s /nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2/share $out/share\n"; mesonFlags = [ ]; name = "pkg-config-wrapper-0.29.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "doc" ]; patches = [ ]; pname = "pkg-config-wrapper"; postFixup = "printWords /nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2 > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/0j0ann4dqpk7cpk7nlj3hx5skha80hmq-pkg-config-0.29.2-man $man\nln -s /nix/store/r7l3g3nbkgd376c7cz1sp8grkgg2g0x5-pkg-config-0.29.2-doc $doc\nsubstituteAll /nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/pkg-config-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; userHook = null; version = "0.29.2"; wrapperName = "PKG_CONFIG_WRAPPER"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\n\necho $pkg-config > $out/nix-support/orig-pkg-config\n\nwrap pkg-config /nix/store/lypyhrdqir7lhwhsvrr1cp85ywh3dhas-pkg-config-wrapper.sh \"/nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2/bin/pkg-config\"\nln -s /nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2/share $out/share\n"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "pkg-config-wrapper-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/fh6xj17d4hxzr9jhk74ayai7hif30j5i-pkg-config-wrapper-0.29.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { pkg-config = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/include\nln -sv /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include/iconv.h $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/include\nln -sv /nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include/iconv.h $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "bootstrap-stage0-glibc-iconv-bootstrapFiles"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage0-glibc-iconv-bootstrapFiles"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/y9ixa0nmbif2afw0n420l0psxry1n4l6-bootstrap-stage0-glibc-iconv-bootstrapFiles"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-internal-glib" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "doc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/pkg-config/requires-private.patch ]; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "pkg-config-0.29.2.tar.gz"; outputHash = "14fmwzki1rlz8bs2p810lk6jqdxsk966d8drgsjmi54cd00rrikg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"; urls = [ "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "pkg-config-0.29.2.tar.gz"; out = «repeated»; outPath = "/nix/store/83haczzqmdmjjaf73y4fnk1zkcfai9zf-pkg-config-0.29.2.tar.gz"; outputHash = "14fmwzki1rlz8bs2p810lk6jqdxsk966d8drgsjmi54cd00rrikg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.29.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "A tool that allows packages to find out information about other packages"; homepage = "http://pkg-config.freedesktop.org/wiki/"; insecure = <CODE>; license = { deprecated = false; free = true; fullName = "GNU General Public License v2.0 or later"; redistributable = <CODE>; shortName = "gpl2Plus"; spdxId = "GPL-2.0-or-later"; url = <CODE>; }; mainProgram = "pkg-config"; name = <CODE>; outputsToInstall = <CODE>; platforms = [ "i686-cygwin" "x86_64-cygwin" "x86_64-darwin" "i686-darwin" "aarch64-darwin" "armv7a-darwin" "i686-freebsd13" "x86_64-freebsd13" "aarch64-genode" "i686-genode" "x86_64-genode" "x86_64-solaris" "javascript-ghcjs" "aarch64-linux" "armv5tel-linux" "armv6l-linux" "armv7a-linux" "armv7l-linux" "i686-linux" "loongarch64-linux" "m68k-linux" "microblaze-linux" "microblazeel-linux" "mips-linux" "mips64-linux" "mips64el-linux" "mipsel-linux" "powerpc64-linux" "powerpc64le-linux" "riscv32-linux" "riscv64-linux" "s390-linux" "s390x-linux" "x86_64-linux" "mmix-mmixware" "aarch64-netbsd" "armv6l-netbsd" "armv7a-netbsd" "armv7l-netbsd" "i686-netbsd" "m68k-netbsd" "mipsel-netbsd" "powerpc-netbsd" "riscv32-netbsd" "riscv64-netbsd" "x86_64-netbsd" "aarch64_be-none" "aarch64-none" "arm-none" "armv6l-none" "avr-none" "i686-none" "microblaze-none" "microblazeel-none" "mips-none" "mips64-none" "msp430-none" "or1k-none" "m68k-none" "powerpc-none" "powerpcle-none" "riscv32-none" "riscv64-none" "rx-none" "s390-none" "s390x-none" "vc4-none" "x86_64-none" "i686-openbsd" "x86_64-openbsd" "x86_64-redox" "wasm64-wasi" "wasm32-wasi" "x86_64-windows" "i686-windows" ]; position = <CODE>; unfree = <CODE>; unsupported = <CODE>; }; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; outPath = "/nix/store/0j0ann4dqpk7cpk7nlj3hx5skha80hmq-pkg-config-0.29.2-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7l3g3nbkgd376c7cz1sp8grkgg2g0x5-pkg-config-0.29.2-doc"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "0.29.2"; }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pkg-config = «repeated»; pname = "pkg-config-wrapper"; postFixup = "printWords /nix/store/pmafg9znni1q3klv3v96g20c3zpyyysg-pkg-config-0.29.2 > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/0j0ann4dqpk7cpk7nlj3hx5skha80hmq-pkg-config-0.29.2-man $man\nln -s /nix/store/r7l3g3nbkgd376c7cz1sp8grkgg2g0x5-pkg-config-0.29.2-doc $doc\nsubstituteAll /nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "0.29.2"; wrapperName = "PKG_CONFIG_WRAPPER"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoconf-archive-2023.02.20"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "autoconf-archive"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "autoconf-archive-2023.02.20.tar.xz"; outputHash = "sha256-cdQEhHmuKPH1eUYZw9ct+cAd9JscYo74X943WW3DGjM="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz"; urls = [ "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "autoconf-archive-2023.02.20.tar.xz"; out = «repeated»; outPath = "/nix/store/pq4bmqcrz01fmb601qkmfk49454dv5m9-autoconf-archive-2023.02.20.tar.xz"; outputHash = "sha256-cdQEhHmuKPH1eUYZw9ct+cAd9JscYo74X943WW3DGjM="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2023.02.20"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoconf-archive-2023.02.20"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/y7i7c6ibgxp6lkmw5bximn0ga5rhz07j-autoconf-archive-2023.02.20"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "autoconf-archive"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2023.02.20"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $out/bin\nsubstituteAll /nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh $out/bin/nuke-refs\nchmod a+x $out/bin/nuke-refs\n"; mesonFlags = [ ]; name = "nuke-references"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; perl = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildEnv = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; devdoc = <CODE>; disallowedReferences = «repeated»; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = false; inputDerivation = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "perl-5.38.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2"; outputName = "out"; outputs = «repeated»; override = { __functionArgs = <CODE>; __functor = <LAMBDA>; }; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; perlOnBuild = <CODE>; pkgs = <CODE>; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "5.38.2"; withPackages = <CODE>; }; postFixup = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; signingUtils = ""; stdenv = «repeated»; storeDir = "/nix/store"; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin\nsubstituteAll /nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh $out/bin/nuke-refs\nchmod a+x $out/bin/nuke-refs\n"; mesonFlags = [ ]; meta = <CODE>; name = "nuke-references"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; perl = «repeated»; postFixup = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; signingUtils = ""; stdenv = «repeated»; storeDir = "/nix/store"; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "debug" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.11/no-ldconfig.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/virtualenv-permissions.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.11/darwin-libutil.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.8/0001-On-all-posix-systems-not-just-Darwin-set-LDSHARED-if.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.7/fix-finding-headers-when-cross-compiling.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/loongarch-support.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/platform-triplet-detection.patch ]; pname = "python3-minimal"; postFixup = "cat << \"EOF\" >> \"$out/nix-support/setup-hook\"\nsysconfigdataHook() {\n  if [ \"$1\" = '/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9' ]; then\n    export _PYTHON_HOST_PLATFORM='linux-x86_64'\n    export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'\n  fi\n}\n\naddEnvHooks \"$hostOffset\" sysconfigdataHook\n\nEOF\n"; postInstall = "# needed for some packages, especially packages that backport functionality\n# to 2.x from 3.x\nfor item in $out/lib/python3.11/test/*; do\n  if [[ \"$item\" != */test_support.py*\n     && \"$item\" != */test/support\n     && \"$item\" != */test/libregrtest\n     && \"$item\" != */test/regrtest.py* ]]; then\n    rm -rf \"$item\"\n  else\n    echo $item\n  fi\ndone\ntouch $out/lib/python3.11/test/__init__.py\n\n# Determinism: Windows installers were not deterministic.\n# We're also not interested in building Windows installers.\nfind \"$out\" -name 'wininst*.exe' | xargs -r rm -f\n\n# Use Python3 as default python\nln -s \"$out/bin/idle3\" \"$out/bin/idle\"\nln -s \"$out/bin/pydoc3\" \"$out/bin/pydoc\"\nln -s \"$out/bin/python3\" \"$out/bin/python\"\nln -s \"$out/bin/python3-config\" \"$out/bin/python-config\"\nln -s \"$out/lib/pkgconfig/python3.pc\" \"$out/lib/pkgconfig/python.pc\"\nln -sL \"$out/share/man/man1/python3.1.gz\" \"$out/share/man/man1/python.1.gz\"\n\n# Get rid of retained dependencies on -dev packages, and remove\n# some $TMPDIR references to improve binary reproducibility.\n# Note that the .pyc file of _sysconfigdata.py should be regenerated!\nfor i in $out/lib/python3.11/_sysconfigdata*.py $out/lib/python3.11/config-311*/Makefile; do\n   sed -i $i -e \"s|$TMPDIR|/no-such-path|g\"\ndone\n\n# Further get rid of references. https://github.com/NixOS/nixpkgs/issues/51668\nfind $out/lib/python*/config-* -type f -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36 '{}' +\nfind $out/lib -name '_sysconfigdata*.py*' -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36 '{}' +\n\n# Make the sysconfigdata module accessible on PYTHONPATH\n# This allows build Python to import host Python's sysconfigdata\nmkdir -p \"$out/lib/python3.11/site-packages\"\nln -s \"$out/lib/python3.11/\"_sysconfigdata*.py \"$out/lib/python3.11/site-packages/\"\nrm -R $out/bin/python*-config $out/lib/python*/config-*\n# Strip IDLE (and turtledemo, which uses it)\nrm -R $out/bin/idle* $out/lib/python*/{idlelib,turtledemo}\nrm -R $out/lib/python*/tkinter\n# Strip tests\nrm -R $out/lib/python*/test $out/lib/python*/**/test{,s}\n# Determinism: deterministic bytecode\n# First we delete all old bytecode.\nfind $out -type d -name __pycache__ -print0 | xargs -0 -I {} rm -rf \"{}\"\n# *strip* shebang from libpython gdb script - it should be dual-syntax and\n# interpretable by whatever python the gdb in question is using, which may\n# not even match the major version of this python. doing this after the\n# bytecode compilations for the same reason - we don't want bytecode generated.\nmkdir -p $out/share/gdb\nsed '/^#!/d' Tools/gdb/libpython.py > $out/share/gdb/libpython.py\n\n# Disable system-wide pip installation. See https://peps.python.org/pep-0668/.\ncat <<'EXTERNALLY_MANAGED' > $out/lib/python3.11/EXTERNALLY-MANAGED\n[externally-managed]\nError=This command has been disabled as it tries to modify the immutable\n `/nix/store` filesystem.\n\n To use Python with Nix and nixpkgs, have a look at the online documentation:\n <https://nixos.org/manual/nixpkgs/stable/#python>.\nEXTERNALLY_MANAGED\n"; postPatch = "substituteInPlace Lib/subprocess.py \\\n  --replace \"'/bin/sh'\" \"'/nix/store/4yiysw2imfz55naxlkvgv6bmhx268baz-bash-5.2-p21/bin/sh'\"\n"; preConfigure = "for i in /usr /sw /opt /pkg; do\t# improve purity\n  substituteInPlace ./setup.py --replace $i /no-such-path\ndone\nexport CFLAGS_NODIST=\"-fno-semantic-interposition\"\n"; preFixup = ""; prePatch = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; setupHook = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "cp /nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh hook.sh\nsubstituteAllInPlace hook.sh\nmv hook.sh $out\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "cp /nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh hook.sh\nsubstituteAllInPlace hook.sh\nmv hook.sh $out\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "python-setup-hook.sh"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; sitePackages = "lib/python3.11/site-packages"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "python-setup-hook.sh"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/br0a4sb7kf9ir8hyqljgj0ykd8lvqy8j-python-setup-hook.sh"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; sitePackages = "lib/python3.11/site-packages"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; }; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "Python-3.11.6.tar.xz"; outputHash = "sha256-D6t4+n8TP084IQxiYNkNfA1ccZhEZBnOBX7HrC5vXzg="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz"; urls = [ "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "Python-3.11.6.tar.xz"; out = «repeated»; outPath = "/nix/store/a4lf6qfpyy544fjc7jqzr21i2g2kph9k-Python-3.11.6.tar.xz"; outputHash = "sha256-D6t4+n8TP084IQxiYNkNfA1ccZhEZBnOBX7HrC5vXzg="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "3.11.6"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; executable = <CODE>; hasDistutilsCxxPatch = false; implementation = "cpython"; inputDerivation = <CODE>; interpreter = <CODE>; isPy2 = <CODE>; isPy27 = <CODE>; isPy3 = true; isPy310 = <CODE>; isPy311 = <CODE>; isPy312 = <CODE>; isPy37 = false; isPy38 = <CODE>; isPy39 = <CODE>; isPy3k = true; isPyPy = <CODE>; libPrefix = "python3.11"; mesonFlags = [ ]; meta = <CODE>; name = "python3-minimal-3.11.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/g1mprhg93xnm2063jqlnkbx53caqy4w5-python3-minimal-3.11.6"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; doc = <CODE>; executable = <CODE>; hasDistutilsCxxPatch = false; implementation = "cpython"; interpreter = <CODE>; isPy2 = <CODE>; isPy27 = <CODE>; isPy3 = true; isPy310 = <CODE>; isPy311 = <CODE>; isPy312 = <CODE>; isPy37 = false; isPy38 = <CODE>; isPy39 = <CODE>; isPy3k = true; isPyPy = <CODE>; libPrefix = "python3.11"; pkgs = <CODE>; pythonAtLeast = <LAMBDA>; pythonAttr = "python3Minimal"; pythonForBuild = <CODE>; pythonOlder = <LAMBDA>; pythonOnBuildForHost = <CODE>; pythonVersion = "3.11"; sitePackages = "lib/python3.11/site-packages"; sourceVersion = { major = "3"; minor = "11"; patch = "6"; suffix = ""; }; tests = <CODE>; withPackages = <CODE>; }; patches = «repeated»; pkgs = <CODE>; pname = "python3-minimal"; postFixup = "cat << \"EOF\" >> \"$out/nix-support/setup-hook\"\nsysconfigdataHook() {\n  if [ \"$1\" = '/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9' ]; then\n    export _PYTHON_HOST_PLATFORM='linux-x86_64'\n    export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'\n  fi\n}\n\naddEnvHooks \"$hostOffset\" sysconfigdataHook\n\nEOF\n"; postInstall = "# needed for some packages, especially packages that backport functionality\n# to 2.x from 3.x\nfor item in $out/lib/python3.11/test/*; do\n  if [[ \"$item\" != */test_support.py*\n     && \"$item\" != */test/support\n     && \"$item\" != */test/libregrtest\n     && \"$item\" != */test/regrtest.py* ]]; then\n    rm -rf \"$item\"\n  else\n    echo $item\n  fi\ndone\ntouch $out/lib/python3.11/test/__init__.py\n\n# Determinism: Windows installers were not deterministic.\n# We're also not interested in building Windows installers.\nfind \"$out\" -name 'wininst*.exe' | xargs -r rm -f\n\n# Use Python3 as default python\nln -s \"$out/bin/idle3\" \"$out/bin/idle\"\nln -s \"$out/bin/pydoc3\" \"$out/bin/pydoc\"\nln -s \"$out/bin/python3\" \"$out/bin/python\"\nln -s \"$out/bin/python3-config\" \"$out/bin/python-config\"\nln -s \"$out/lib/pkgconfig/python3.pc\" \"$out/lib/pkgconfig/python.pc\"\nln -sL \"$out/share/man/man1/python3.1.gz\" \"$out/share/man/man1/python.1.gz\"\n\n# Get rid of retained dependencies on -dev packages, and remove\n# some $TMPDIR references to improve binary reproducibility.\n# Note that the .pyc file of _sysconfigdata.py should be regenerated!\nfor i in $out/lib/python3.11/_sysconfigdata*.py $out/lib/python3.11/config-311*/Makefile; do\n   sed -i $i -e \"s|$TMPDIR|/no-such-path|g\"\ndone\n\n# Further get rid of references. https://github.com/NixOS/nixpkgs/issues/51668\nfind $out/lib/python*/config-* -type f -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36 '{}' +\nfind $out/lib -name '_sysconfigdata*.py*' -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36 '{}' +\n\n# Make the sysconfigdata module accessible on PYTHONPATH\n# This allows build Python to import host Python's sysconfigdata\nmkdir -p \"$out/lib/python3.11/site-packages\"\nln -s \"$out/lib/python3.11/\"_sysconfigdata*.py \"$out/lib/python3.11/site-packages/\"\nrm -R $out/bin/python*-config $out/lib/python*/config-*\n# Strip IDLE (and turtledemo, which uses it)\nrm -R $out/bin/idle* $out/lib/python*/{idlelib,turtledemo}\nrm -R $out/lib/python*/tkinter\n# Strip tests\nrm -R $out/lib/python*/test $out/lib/python*/**/test{,s}\n# Determinism: deterministic bytecode\n# First we delete all old bytecode.\nfind $out -type d -name __pycache__ -print0 | xargs -0 -I {} rm -rf \"{}\"\n# *strip* shebang from libpython gdb script - it should be dual-syntax and\n# interpretable by whatever python the gdb in question is using, which may\n# not even match the major version of this python. doing this after the\n# bytecode compilations for the same reason - we don't want bytecode generated.\nmkdir -p $out/share/gdb\nsed '/^#!/d' Tools/gdb/libpython.py > $out/share/gdb/libpython.py\n\n# Disable system-wide pip installation. See https://peps.python.org/pep-0668/.\ncat <<'EXTERNALLY_MANAGED' > $out/lib/python3.11/EXTERNALLY-MANAGED\n[externally-managed]\nError=This command has been disabled as it tries to modify the immutable\n `/nix/store` filesystem.\n\n To use Python with Nix and nixpkgs, have a look at the online documentation:\n <https://nixos.org/manual/nixpkgs/stable/#python>.\nEXTERNALLY_MANAGED\n"; postPatch = "substituteInPlace Lib/subprocess.py \\\n  --replace \"'/bin/sh'\" \"'/nix/store/4yiysw2imfz55naxlkvgv6bmhx268baz-bash-5.2-p21/bin/sh'\"\n"; preConfigure = "for i in /usr /sw /opt /pkg; do\t# improve purity\n  substituteInPlace ./setup.py --replace $i /no-such-path\ndone\nexport CFLAGS_NODIST=\"-fno-semantic-interposition\"\n"; preFixup = ""; prePatch = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; pythonAtLeast = <LAMBDA>; pythonAttr = "python3Minimal"; pythonForBuild = <CODE>; pythonOlder = <LAMBDA>; pythonOnBuildForHost = <CODE>; pythonVersion = "3.11"; separateDebugInfo = true; setupHook = «repeated»; sitePackages = "lib/python3.11/site-packages"; sourceVersion = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "3.11.6"; withPackages = <CODE>; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "bin" "dev" "static" "getent" "debug" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/2.38-master.patch.gz /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/nix-locale-archive.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/dont-use-system-ld-so-cache.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/dont-use-system-ld-so-preload.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/fix_path_attribute_in_getconf.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/fix-x64-abi.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/nix-nss-open-files.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/0001-Revert-Remove-all-usage-of-BASH-or-BASH-in-installed.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/reenable_DT_HASH.patch ]; pname = "glibc"; postConfigure = "# Hack: get rid of the `-static' flag set by the bootstrap stdenv.\n# This has to be done *after* `configure' because it builds some\n# test binaries.\nexport NIX_CFLAGS_LINK=\nexport NIX_LDFLAGS_BEFORE=\n\nexport NIX_DONT_SET_RPATH=1\nunset CFLAGS\n\n# Apparently --bindir is not respected.\nmakeFlagsArray+=(\"bindir=$bin/bin\" \"sbindir=$bin/sbin\" \"rootsbindir=$bin/sbin\")\n"; postInstall = "moveToOutput bin/getent $getent\necho SUPPORTED-LOCALES=C.UTF-8/UTF-8 > ../glibc-2*/localedata/SUPPORTED\nmake -j\${NIX_BUILD_CORES:-1} localedata/install-locales\n\ntest -f $out/etc/ld.so.cache && rm $out/etc/ld.so.cache\n\nif test -n \"$linuxHeaders\"; then\n    # Include the Linux kernel headers in Glibc, except the `scsi'\n    # subdirectory, which Glibc provides itself.\n    (cd $dev/include && \\\n     ln -sv $(ls -d $linuxHeaders/include/* | grep -v scsi\\$) .)\nfi\n\n# Fix for NIXOS-54 (ldd not working on x86_64).  Make a symlink\n# \"lib64\" to \"lib\".\nif test -n \"$is64bit\"; then\n    ln -s lib $out/lib64\nfi\n\n# Get rid of more unnecessary stuff.\nrm -rf $out/var $bin/bin/sln\n\n# Backwards-compatibility to fix e.g.\n# \"configure: error: Pthreads are required to build libgomp\" during `gcc`-build\n# because it's not actually needed anymore to link against `pthreads` since\n# it's now part of `libc.so.6` itself, but the gcc build breaks if\n# this doesn't work.\nln -sf $out/lib/libpthread.so.0 $out/lib/libpthread.so\nln -sf $out/lib/librt.so.1 $out/lib/librt.so\nln -sf $out/lib/libdl.so.2 $out/lib/libdl.so\ntest -f $out/lib/libutil.so.1 && ln -sf $out/lib/libutil.so.1 $out/lib/libutil.so\ntouch $out/lib/libpthread.a\n\n# Put libraries for static linking in a separate output.  Note\n# that libc_nonshared.a and libpthread_nonshared.a are required\n# for dynamically-linked applications.\nmkdir -p $static/lib\nmv $out/lib/*.a $static/lib\nmv $static/lib/lib*_nonshared.a $out/lib\n# If libutil.so.1 is missing, libutil.a is required.\ntest -f $out/lib/libutil.so.1 || mv $static/lib/libutil.a $out/lib\n# Some of *.a files are linker scripts where moving broke the paths.\nsed \"/^GROUP/s|$out/lib/lib|$static/lib/lib|g\" \\\n  -i \"$static\"/lib/*.a\n\n# Work around a Nix bug: hard links across outputs cause a build failure.\ncp $bin/bin/getconf $bin/bin/getconf_\nmv $bin/bin/getconf_ $bin/bin/getconf\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = ""; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib OBJDUMP=/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/objdump\"\n\n\n"; profilingLibraries = false; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "glibc-2.38.tar.xz"; outputHash = "sha256-+4KZiZiyspllRnvBtp0VLpwwfSzzAcnq+0VVt3DvP9I="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz"; urls = [ "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "glibc-2.38.tar.xz"; out = «repeated»; outPath = "/nix/store/05d0yccrkp8pl5c6my29cxzzqb7a9az8-glibc-2.38.tar.xz"; outputHash = "sha256-+4KZiZiyspllRnvBtp0VLpwwfSzzAcnq+0VVt3DvP9I="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.38-27"; withLibcrypt = false; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; getent = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; installFlags = «repeated»; is64bit = true; libgcc = «repeated»; linuxHeaders = «repeated»; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; minorRelease = "2.38"; name = "glibc-2.38-27"; nativeBuildInputs = «repeated»; out = { BASH_SHELL = "/bin/sh"; NIX_CFLAGS_COMPILE = ""; NIX_HARDENING_ENABLE = «repeated»; NIX_NO_SELF_RPATH = true; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; getent = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; installFlags = «repeated»; is64bit = true; libgcc = «repeated»; linuxHeaders = «repeated»; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; minorRelease = "2.38"; name = "glibc-2.38-27"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { libgcc = «repeated»; minorRelease = "2.38"; version = "2.38"; }; patches = «repeated»; pname = "glibc"; postConfigure = "# Hack: get rid of the `-static' flag set by the bootstrap stdenv.\n# This has to be done *after* `configure' because it builds some\n# test binaries.\nexport NIX_CFLAGS_LINK=\nexport NIX_LDFLAGS_BEFORE=\n\nexport NIX_DONT_SET_RPATH=1\nunset CFLAGS\n\n# Apparently --bindir is not respected.\nmakeFlagsArray+=(\"bindir=$bin/bin\" \"sbindir=$bin/sbin\" \"rootsbindir=$bin/sbin\")\n"; postInstall = "moveToOutput bin/getent $getent\necho SUPPORTED-LOCALES=C.UTF-8/UTF-8 > ../glibc-2*/localedata/SUPPORTED\nmake -j\${NIX_BUILD_CORES:-1} localedata/install-locales\n\ntest -f $out/etc/ld.so.cache && rm $out/etc/ld.so.cache\n\nif test -n \"$linuxHeaders\"; then\n    # Include the Linux kernel headers in Glibc, except the `scsi'\n    # subdirectory, which Glibc provides itself.\n    (cd $dev/include && \\\n     ln -sv $(ls -d $linuxHeaders/include/* | grep -v scsi\\$) .)\nfi\n\n# Fix for NIXOS-54 (ldd not working on x86_64).  Make a symlink\n# \"lib64\" to \"lib\".\nif test -n \"$is64bit\"; then\n    ln -s lib $out/lib64\nfi\n\n# Get rid of more unnecessary stuff.\nrm -rf $out/var $bin/bin/sln\n\n# Backwards-compatibility to fix e.g.\n# \"configure: error: Pthreads are required to build libgomp\" during `gcc`-build\n# because it's not actually needed anymore to link against `pthreads` since\n# it's now part of `libc.so.6` itself, but the gcc build breaks if\n# this doesn't work.\nln -sf $out/lib/libpthread.so.0 $out/lib/libpthread.so\nln -sf $out/lib/librt.so.1 $out/lib/librt.so\nln -sf $out/lib/libdl.so.2 $out/lib/libdl.so\ntest -f $out/lib/libutil.so.1 && ln -sf $out/lib/libutil.so.1 $out/lib/libutil.so\ntouch $out/lib/libpthread.a\n\n# Put libraries for static linking in a separate output.  Note\n# that libc_nonshared.a and libpthread_nonshared.a are required\n# for dynamically-linked applications.\nmkdir -p $static/lib\nmv $out/lib/*.a $static/lib\nmv $static/lib/lib*_nonshared.a $out/lib\n# If libutil.so.1 is missing, libutil.a is required.\ntest -f $out/lib/libutil.so.1 || mv $static/lib/libutil.a $out/lib\n# Some of *.a files are linker scripts where moving broke the paths.\nsed \"/^GROUP/s|$out/lib/lib|$static/lib/lib|g\" \\\n  -i \"$static\"/lib/*.a\n\n# Work around a Nix bug: hard links across outputs cause a build failure.\ncp $bin/bin/getconf $bin/bin/getconf_\nmv $bin/bin/getconf_ $bin/bin/getconf\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = ""; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib OBJDUMP=/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/objdump\"\n\n\n"; profilingLibraries = false; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.38"; withLibcrypt = false; }; outPath = "/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "glibc"; postConfigure = "# Hack: get rid of the `-static' flag set by the bootstrap stdenv.\n# This has to be done *after* `configure' because it builds some\n# test binaries.\nexport NIX_CFLAGS_LINK=\nexport NIX_LDFLAGS_BEFORE=\n\nexport NIX_DONT_SET_RPATH=1\nunset CFLAGS\n\n# Apparently --bindir is not respected.\nmakeFlagsArray+=(\"bindir=$bin/bin\" \"sbindir=$bin/sbin\" \"rootsbindir=$bin/sbin\")\n"; postInstall = "moveToOutput bin/getent $getent\necho SUPPORTED-LOCALES=C.UTF-8/UTF-8 > ../glibc-2*/localedata/SUPPORTED\nmake -j\${NIX_BUILD_CORES:-1} localedata/install-locales\n\ntest -f $out/etc/ld.so.cache && rm $out/etc/ld.so.cache\n\nif test -n \"$linuxHeaders\"; then\n    # Include the Linux kernel headers in Glibc, except the `scsi'\n    # subdirectory, which Glibc provides itself.\n    (cd $dev/include && \\\n     ln -sv $(ls -d $linuxHeaders/include/* | grep -v scsi\\$) .)\nfi\n\n# Fix for NIXOS-54 (ldd not working on x86_64).  Make a symlink\n# \"lib64\" to \"lib\".\nif test -n \"$is64bit\"; then\n    ln -s lib $out/lib64\nfi\n\n# Get rid of more unnecessary stuff.\nrm -rf $out/var $bin/bin/sln\n\n# Backwards-compatibility to fix e.g.\n# \"configure: error: Pthreads are required to build libgomp\" during `gcc`-build\n# because it's not actually needed anymore to link against `pthreads` since\n# it's now part of `libc.so.6` itself, but the gcc build breaks if\n# this doesn't work.\nln -sf $out/lib/libpthread.so.0 $out/lib/libpthread.so\nln -sf $out/lib/librt.so.1 $out/lib/librt.so\nln -sf $out/lib/libdl.so.2 $out/lib/libdl.so\ntest -f $out/lib/libutil.so.1 && ln -sf $out/lib/libutil.so.1 $out/lib/libutil.so\ntouch $out/lib/libpthread.a\n\n# Put libraries for static linking in a separate output.  Note\n# that libc_nonshared.a and libpthread_nonshared.a are required\n# for dynamically-linked applications.\nmkdir -p $static/lib\nmv $out/lib/*.a $static/lib\nmv $static/lib/lib*_nonshared.a $out/lib\n# If libutil.so.1 is missing, libutil.a is required.\ntest -f $out/lib/libutil.so.1 || mv $static/lib/libutil.a $out/lib\n# Some of *.a files are linker scripts where moving broke the paths.\nsed \"/^GROUP/s|$out/lib/lib|$static/lib/lib|g\" \\\n  -i \"$static\"/lib/*.a\n\n# Work around a Nix bug: hard links across outputs cause a build failure.\ncp $bin/bin/getconf $bin/bin/getconf_\nmv $bin/bin/getconf_ $bin/bin/getconf\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = ""; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib OBJDUMP=/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/objdump\"\n\n\n"; profilingLibraries = false; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.38"; withLibcrypt = false; }; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; getent = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; installFlags = «repeated»; is64bit = true; libgcc = «repeated»; linuxHeaders = «repeated»; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; minorRelease = "2.38"; name = "glibc-2.38-27"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "glibc"; postConfigure = "# Hack: get rid of the `-static' flag set by the bootstrap stdenv.\n# This has to be done *after* `configure' because it builds some\n# test binaries.\nexport NIX_CFLAGS_LINK=\nexport NIX_LDFLAGS_BEFORE=\n\nexport NIX_DONT_SET_RPATH=1\nunset CFLAGS\n\n# Apparently --bindir is not respected.\nmakeFlagsArray+=(\"bindir=$bin/bin\" \"sbindir=$bin/sbin\" \"rootsbindir=$bin/sbin\")\n"; postInstall = "moveToOutput bin/getent $getent\necho SUPPORTED-LOCALES=C.UTF-8/UTF-8 > ../glibc-2*/localedata/SUPPORTED\nmake -j\${NIX_BUILD_CORES:-1} localedata/install-locales\n\ntest -f $out/etc/ld.so.cache && rm $out/etc/ld.so.cache\n\nif test -n \"$linuxHeaders\"; then\n    # Include the Linux kernel headers in Glibc, except the `scsi'\n    # subdirectory, which Glibc provides itself.\n    (cd $dev/include && \\\n     ln -sv $(ls -d $linuxHeaders/include/* | grep -v scsi\\$) .)\nfi\n\n# Fix for NIXOS-54 (ldd not working on x86_64).  Make a symlink\n# \"lib64\" to \"lib\".\nif test -n \"$is64bit\"; then\n    ln -s lib $out/lib64\nfi\n\n# Get rid of more unnecessary stuff.\nrm -rf $out/var $bin/bin/sln\n\n# Backwards-compatibility to fix e.g.\n# \"configure: error: Pthreads are required to build libgomp\" during `gcc`-build\n# because it's not actually needed anymore to link against `pthreads` since\n# it's now part of `libc.so.6` itself, but the gcc build breaks if\n# this doesn't work.\nln -sf $out/lib/libpthread.so.0 $out/lib/libpthread.so\nln -sf $out/lib/librt.so.1 $out/lib/librt.so\nln -sf $out/lib/libdl.so.2 $out/lib/libdl.so\ntest -f $out/lib/libutil.so.1 && ln -sf $out/lib/libutil.so.1 $out/lib/libutil.so\ntouch $out/lib/libpthread.a\n\n# Put libraries for static linking in a separate output.  Note\n# that libc_nonshared.a and libpthread_nonshared.a are required\n# for dynamically-linked applications.\nmkdir -p $static/lib\nmv $out/lib/*.a $static/lib\nmv $static/lib/lib*_nonshared.a $out/lib\n# If libutil.so.1 is missing, libutil.a is required.\ntest -f $out/lib/libutil.so.1 || mv $static/lib/libutil.a $out/lib\n# Some of *.a files are linker scripts where moving broke the paths.\nsed \"/^GROUP/s|$out/lib/lib|$static/lib/lib|g\" \\\n  -i \"$static\"/lib/*.a\n\n# Work around a Nix bug: hard links across outputs cause a build failure.\ncp $bin/bin/getconf $bin/bin/getconf_\nmv $bin/bin/getconf_ $bin/bin/getconf\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = ""; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib OBJDUMP=/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/objdump\"\n\n\n"; profilingLibraries = false; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.38"; withLibcrypt = false; }; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "binutils-patchelfed-ld-wrapper-2.40"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "binutils-patchelfed-ld-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/bintools-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; drvPath = <CODE>; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = { BASH_SHELL = "/bin/sh"; NIX_CFLAGS_COMPILE = ""; NIX_HARDENING_ENABLE = «repeated»; NIX_NO_SELF_RPATH = true; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; getent = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; installFlags = «repeated»; is64bit = true; libgcc = «repeated»; linuxHeaders = «repeated»; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; minorRelease = "2.38"; name = "glibc-2.38-27"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "glibc"; postConfigure = "# Hack: get rid of the `-static' flag set by the bootstrap stdenv.\n# This has to be done *after* `configure' because it builds some\n# test binaries.\nexport NIX_CFLAGS_LINK=\nexport NIX_LDFLAGS_BEFORE=\n\nexport NIX_DONT_SET_RPATH=1\nunset CFLAGS\n\n# Apparently --bindir is not respected.\nmakeFlagsArray+=(\"bindir=$bin/bin\" \"sbindir=$bin/sbin\" \"rootsbindir=$bin/sbin\")\n"; postInstall = "moveToOutput bin/getent $getent\necho SUPPORTED-LOCALES=C.UTF-8/UTF-8 > ../glibc-2*/localedata/SUPPORTED\nmake -j\${NIX_BUILD_CORES:-1} localedata/install-locales\n\ntest -f $out/etc/ld.so.cache && rm $out/etc/ld.so.cache\n\nif test -n \"$linuxHeaders\"; then\n    # Include the Linux kernel headers in Glibc, except the `scsi'\n    # subdirectory, which Glibc provides itself.\n    (cd $dev/include && \\\n     ln -sv $(ls -d $linuxHeaders/include/* | grep -v scsi\\$) .)\nfi\n\n# Fix for NIXOS-54 (ldd not working on x86_64).  Make a symlink\n# \"lib64\" to \"lib\".\nif test -n \"$is64bit\"; then\n    ln -s lib $out/lib64\nfi\n\n# Get rid of more unnecessary stuff.\nrm -rf $out/var $bin/bin/sln\n\n# Backwards-compatibility to fix e.g.\n# \"configure: error: Pthreads are required to build libgomp\" during `gcc`-build\n# because it's not actually needed anymore to link against `pthreads` since\n# it's now part of `libc.so.6` itself, but the gcc build breaks if\n# this doesn't work.\nln -sf $out/lib/libpthread.so.0 $out/lib/libpthread.so\nln -sf $out/lib/librt.so.1 $out/lib/librt.so\nln -sf $out/lib/libdl.so.2 $out/lib/libdl.so\ntest -f $out/lib/libutil.so.1 && ln -sf $out/lib/libutil.so.1 $out/lib/libutil.so\ntouch $out/lib/libpthread.a\n\n# Put libraries for static linking in a separate output.  Note\n# that libc_nonshared.a and libpthread_nonshared.a are required\n# for dynamically-linked applications.\nmkdir -p $static/lib\nmv $out/lib/*.a $static/lib\nmv $static/lib/lib*_nonshared.a $out/lib\n# If libutil.so.1 is missing, libutil.a is required.\ntest -f $out/lib/libutil.so.1 || mv $static/lib/libutil.a $out/lib\n# Some of *.a files are linker scripts where moving broke the paths.\nsed \"/^GROUP/s|$out/lib/lib|$static/lib/lib|g\" \\\n  -i \"$static\"/lib/*.a\n\n# Work around a Nix bug: hard links across outputs cause a build failure.\ncp $bin/bin/getconf $bin/bin/getconf_\nmv $bin/bin/getconf_ $bin/bin/getconf\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = ""; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib OBJDUMP=/nix/store/vg9da3i3yfvaqih35mjg80gzwsgbf5ay-binutils-2.40/bin/objdump\"\n\n\n"; profilingLibraries = false; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.38"; withLibcrypt = false; }; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "binutils-patchelfed-ld-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/h12f9v4ywi4gw4jq88sx3gwldjg6vr79-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "binutils-patchelfed-ld-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = «repeated»; outPath = "/nix/store/qqf44c4r5qyayv53parabfmar1i9mlgs-binutils-patchelfed-ld-wrapper-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; emacsBufferSetup = <CODE>; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; nativeLibc = false; nativePrefix = ""; nativeTools = false; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "binutils-patchelfed-ld-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; outPath = "/nix/store/qqf44c4r5qyayv53parabfmar1i9mlgs-binutils-patchelfed-ld-wrapper-2.40"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "binutils-patchelfed-ld-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildFlags = [ ]; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-pic" "--disable-cxx" "--enable-fat" "--build=x86_64-unknown-linux-gnu" ]; depsBuildBuild = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/byin45475dx919w7vrv1vv12c40nnnvv-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage3-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "bootstrap-stage3-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; name = "expand-response-params"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; meta = <CODE>; name = "expand-response-params"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/byin45475dx919w7vrv1vv12c40nnnvv-expand-response-params"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; expandResponseParams = "/nix/store/byin45475dx919w7vrv1vv12c40nnnvv-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage3-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/13xfs6r0dlqbl3kcmx6y67k7nfvl6qjx-bootstrap-stage3-gcc-wrapper-12.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = «repeated»; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage3-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; } ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontDisableStatic = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "gmp-6.3.0"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "dev" "info" ]; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = [ "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gmp-6.3.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/n1djrrflvxnwdd735304l23r2qdnjrm6-gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = «repeated»; }; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = «repeated»; expandResponseParams = "/nix/store/byin45475dx919w7vrv1vv12c40nnnvv-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage3-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/13xfs6r0dlqbl3kcmx6y67k7nfvl6qjx-bootstrap-stage3-gcc-wrapper-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage3-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/8nk1y92d27cz3ggr3czy910b1wiyy4y0-xgcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/4va8jbbk7600abvilbrynyj7bx6ygi81-xgcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/7f55zxppha4qxkk4fnij2rvmxc2gphp3-xgcc-12.3.0-man $man\nln -s /nix/store/x403dqc5kfi2y6c0irjrkqlrbfcp05ad-xgcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\necho \"--sysroot=/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" >> $out/nix-support/cc-cflags\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/patchelf/setup-hook.sh ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = [ "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "patchelf-0.15.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/447hvnlzzi9myri1iq3bijxgx6v6b592-patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.15.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/a3371w0vyxvd7kbigv55jw9rkpw1nzyd-patchelf-0.15.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.15.0"; }; outPath = "/nix/store/a3371w0vyxvd7kbigv55jw9rkpw1nzyd-patchelf-0.15.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "0.15.0"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/64zlfyrh9pybwk9pysa8nxx8ff5p22hc-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/bv41kv995lw0y92sizmdq84z61nl1r0q-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage3-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage3-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage3-stdenv-linux"; out = «repeated»; outPath = "/nix/store/jhcy0ny6jamm9548hwncrnpcl8xh6942-bootstrap-stage3-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/jhcy0ny6jamm9548hwncrnpcl8xh6942-bootstrap-stage3-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "6.3.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-6.3.0"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-6.3.0"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/b96khbdyr93fgkwm37a5pzpl4hr7iwwl-gmp-6.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { static = <CODE>; }; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; }; outPath = "/nix/store/479bvdxw80v0j5b8k0b04m3srqiwgr69-gmp-6.3.0-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-pic" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "doc" "info" ]; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "mpfr-4.2.1.tar.xz"; outputHash = "sha256-J3gHNTpnJpeJlpRa8T5Sgp46vXqaW3+yeTiU4Y8fy7I="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz"; urls = [ "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "mpfr-4.2.1.tar.xz"; out = «repeated»; outPath = "/nix/store/7s2kcdbk0n0dpsq9gwkj8dqyw21yfyhp-mpfr-4.2.1.tar.xz"; outputHash = "sha256-J3gHNTpnJpeJlpRa8T5Sgp46vXqaW3+yeTiU4Y8fy7I="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://www.mpfr.org/mpfr-4.2.1/mpfr-4.2.1.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "4.2.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/qllqyi42dxdf5ksf0awpjj1m5rqxzfa6-mpfr-4.2.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "4.2.1"; }; outPath = "/nix/store/b9frvh7cdkqydrs7zkifyr11mqd7fsx2-mpfr-4.2.1-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "4.2.1"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libmpc-1.3.1"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "libmpc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "mpc-1.3.1.tar.gz"; outputHash = "sha256-q2QkkvXPiCt0qgy3MM1BCoHtzb7IlRg86TDnBsHHWbg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz"; urls = [ "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "mpc-1.3.1.tar.gz"; out = «repeated»; outPath = "/nix/store/mdrv8znlgnysqzq1hnv46vi9jmnsc1bc-mpc-1.3.1.tar.gz"; outputHash = "sha256-q2QkkvXPiCt0qgy3MM1BCoHtzb7IlRg86TDnBsHHWbg="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.3.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libmpc-1.3.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/w1fp9zh0hjapzw432dxc63v6ark9jbcy-libmpc-1.3.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libmpc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.3.1"; } «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-gcc-arch=generic" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "isl-0.20"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "isl"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "isl-0.20.tar.xz"; outputHash = "1akpgq0rbqbah5517blg2zlnfvjxfcl9cjrfc75nbcx5p2gnlnd5"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz"; urls = [ "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "isl-0.20.tar.xz"; out = «repeated»; outPath = "/nix/store/x9v0hmr76dm68pijzldzxks01iqzag1z-isl-0.20.tar.xz"; outputHash = "1akpgq0rbqbah5517blg2zlnfvjxfcl9cjrfc75nbcx5p2gnlnd5"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://downloads.sourceforge.net/libisl/isl-0.20.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.20"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "isl-0.20"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/cjirqa3nqbc8ncbk1420jqk3shbba38r-isl-0.20"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "isl"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.20"; } { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--static" "--shared" ]; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installFlags = [ ]; makeFlags = [ "PREFIX=" "SHARED_MODE=1" ]; mesonFlags = [ ]; name = "zlib-1.3"; nativeBuildInputs = [ ]; outputDoc = "dev"; outputs = [ "out" "dev" "static" ]; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = [ "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "zlib-1.3.tar.gz"; out = «repeated»; outPath = "/nix/store/c1hg8k7vjy5hxfm39pp30xgiw7qk7xwf-zlib-1.3.tar.gz"; outputHash = "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.3"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = { NIX_CFLAGS_COMPILE = "-static-libgcc"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontAddStaticConfigureFlags = true; dontConfigure = false; dontDisableStatic = true; dontStrip = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = [ ]; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "zlib-1.3"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; }; outPath = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev"; outputDoc = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "zlib"; postInstall = "moveToOutput lib/libz.a \"$static\"\n"; postPatch = ""; preConfigure = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.3"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = [ "--with-gmp-include=/nix/store/479bvdxw80v0j5b8k0b04m3srqiwgr69-gmp-6.3.0-dev/include" "--with-gmp-lib=/nix/store/b96khbdyr93fgkwm37a5pzpl4hr7iwwl-gmp-6.3.0/lib" "--with-mpfr-include=/nix/store/b9frvh7cdkqydrs7zkifyr11mqd7fsx2-mpfr-4.2.1-dev/include" "--with-mpfr-lib=/nix/store/qllqyi42dxdf5ksf0awpjj1m5rqxzfa6-mpfr-4.2.1/lib" "--with-mpc=/nix/store/w1fp9zh0hjapzw432dxc63v6ark9jbcy-libmpc-1.3.1" "--with-native-system-header-dir=/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include" "--with-build-sysroot=/" "--program-prefix=" "--enable-lto" "--disable-libstdcxx-pch" "--without-included-gettext" "--with-system-zlib" "--enable-static" "--enable-languages=c,c++" "--disable-multilib" "--enable-plugin" "--disable-libcc1" "--with-isl=/nix/store/cjirqa3nqbc8ncbk1420jqk3shbba38r-isl-0.20" "--disable-bootstrap" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" "--target=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" "target" ]; crossMingw = false; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ «repeated» «repeated» ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; hardeningDisable = [ "format" "pie" ]; libcCross = null; libc_dev = «repeated»; mesonFlags = [ ]; name = "gcc-12.3.0"; nativeBuildInputs = [ { NATIVE_TOOLS_CFLAGS = null; NATIVE_TOOLS_LDFLAGS = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "xz-5.4.5"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = [ "https://tukaani.org/xz/xz-5.4.5.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "xz-5.4.5.tar.bz2"; out = «repeated»; outPath = "/nix/store/2cxa62ycswpswvysa0nzanmh0qm79ikn-xz-5.4.5.tar.bz2"; outputHash = "sha256-jM9f/4aMAG8pUi44b7TGobZkY/vKZaTPw8S9WW6JXnk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://tukaani.org/xz/xz-5.4.5.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.4.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/w493wfjczjnkcmjfwxggpavhm1dav9rc-xz-5.4.5-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; updateScript = <CODE>; userHook = null; version = "5.4.5"; } { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-bash-malloc" "--disable-readline" ]; debug = <CODE>; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" ]; makeFlags = [ ]; mesonFlags = [ ]; name = "bash-5.2-p21"; nativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "dev" "man" "doc" "info" "debug" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-001"; out = «repeated»; outPath = "/nix/store/a73wzcks7h2y814qxa1z3kv1hg205mpm-bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-002"; out = «repeated»; outPath = "/nix/store/xc3h9isl5566i6a4pvdsgin26rchijrq-bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-003"; out = «repeated»; outPath = "/nix/store/sxc8xmi7caxaiywzh15za9crpk3bw98z-bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-004"; out = «repeated»; outPath = "/nix/store/2ynclzrdl0hy9miy6k8gcwgzw4mhsmd0-bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-005"; out = «repeated»; outPath = "/nix/store/z76vsdh69cvwkwhwg69k7d1znwjmx6hf-bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-006"; out = «repeated»; outPath = "/nix/store/1fw5fcsjz9wcbf13a5xs4i2cjfircp3x-bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-007"; out = «repeated»; outPath = "/nix/store/rs1qdpy1nb3x07g4vqvb4s774qhq9f0w-bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-008"; out = «repeated»; outPath = "/nix/store/jn9f2mr2jdm9yn5hi0pws44nbfrah8d3-bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-009"; out = «repeated»; outPath = "/nix/store/j8vipdfzslz4aa7aj0amwd4msxa9hhpl-bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-010"; out = «repeated»; outPath = "/nix/store/24ygbbc9k6vjc4vhz2j6a9dkdgmqgc6n-bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-011"; out = «repeated»; outPath = "/nix/store/sim601rd1y3hsap9qkn25cwprsa9aipp-bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-012"; out = «repeated»; outPath = "/nix/store/x1sqwqn02c5mnpi8hbqlxpbm3rahq5dm-bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-013"; out = «repeated»; outPath = "/nix/store/wcpqrbsljh2x04qccs6jv9z8c9y1c3cd-bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-014"; out = «repeated»; outPath = "/nix/store/cddj9qpc4l62qjy6vvf7gp50mfqaf506-bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-015"; out = «repeated»; outPath = "/nix/store/pjp935kxwai47zyx1wpwadls00m9nmib-bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-016"; out = «repeated»; outPath = "/nix/store/0cr4hvmwbfablyhn58ba0lrfb44igq5y-bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-017"; out = «repeated»; outPath = "/nix/store/in24890k6ybij0b63jisfmrwmmc6x7pv-bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-018"; out = «repeated»; outPath = "/nix/store/nffxsaniz7irz07z79cxwkhz97vgqwrx-bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-019"; out = «repeated»; outPath = "/nix/store/d5qpl3kqrmv99fbw1cd09qj9jr7kb2rr-bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-020"; out = «repeated»; outPath = "/nix/store/pcdlxsb3mxfjnclg8rn8xy2ywbb5ra36-bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-021"; out = «repeated»; outPath = "/nix/store/gnx16vs69p7fggsslnbg6v818497vvxl-bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/pgrp-pipe-5.patch { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = [ "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "fix-static.patch"; out = «repeated»; outPath = "/nix/store/1dydp86d00qzjbncpi80sdsndf33lc5j-fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/parallel.patch ]; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash-5.2.tar.gz"; out = «repeated»; outPath = "/nix/store/v28dv6l0qk3j382kp40bksa1v6h7dx9p-bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = <CODE>; outPath = "/nix/store/4y2zyl40h6qxsji1qainz37clrgbcc5s-bash-5.2-p21-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { shellPath = "/bin/bash"; tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.2"; } null ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkFlags = [ ]; cmakeFlags = [ ]; configureFlags = [ "PERL=/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2/bin/perl" ]; depsBuildBuild = [ «repeated» «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { NATIVE_TOOLS_CFLAGS = null; NATIVE_TOOLS_LDFLAGS = null; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkFlags = [ ]; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installFlags = [ "TEXMF=$(out)/texmf-dist" ]; installTargets = [ "install" "install-tex" ]; mesonFlags = [ ]; name = "texinfo-7.0.3"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "texinfo"; postFixup = ""; postPatch = "patchShebangs tp/maintain\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "texinfo-7.0.3.tar.xz"; outputHash = "sha256-dLQg0J1/Uo6E+XqjMPDdaamKYFPnpOAXZ+7RFQOIB78="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz"; urls = [ "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "texinfo-7.0.3.tar.xz"; out = «repeated»; outPath = "/nix/store/q9ccnr97sv21jlmzxqsra5jyp71s51dl-texinfo-7.0.3.tar.xz"; outputHash = "sha256-dLQg0J1/Uo6E+XqjMPDdaamKYFPnpOAXZ+7RFQOIB78="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/texinfo/texinfo-7.0.3.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "7.0.3"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installFlags = «repeated»; installTargets = «repeated»; mesonFlags = [ ]; meta = <CODE>; name = "texinfo-7.0.3"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/3iwp9haif17qz0j2j2f7i10djdvvxl40-texinfo-7.0.3"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "texinfo"; postFixup = ""; postPatch = "patchShebangs tp/maintain\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "7.0.3"; } «repeated» «repeated» «repeated» ]; noSysDirs = true; outputs = [ "out" "man" "info" "lib" "libgcc" "checksum" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/gcc-12-no-sys-dirs.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/no-sys-dirs-riscv.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/12/mangle-NIX_STORE-in-__FILE__.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/ppc-musl.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/compilers/gcc/patches/12/lambda-ICE-PR109241.patch ]; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = [ "preFixupLibGccPhase" "postInstallSaveChecksumPhase" ]; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gcc-12.3.0.tar.xz"; outputHash = "sha256-lJpdT5nnhkIak7Uysi/6tVeN5zITaZdbka7Jet/ajDs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz"; urls = [ "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gcc-12.3.0.tar.xz"; out = «repeated»; outPath = "/nix/store/cxpxzdliawd35hd79n10xcfhcn051jbb-gcc-12.3.0.tar.xz"; outputHash = "sha256-lJpdT5nnhkIak7Uysi/6tVeN5zITaZdbka7Jet/ajDs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://mirror.koddos.net/gcc/releases/gcc-12.3.0/gcc-12.3.0.tar.xz"; urls = «repeated»; }; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = [ "bin" "libexec" ]; stripDebugListTarget = [ "x86_64-unknown-linux-gnu" ]; system = "x86_64-linux"; targetConfig = null; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; gmp = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-6.3.0"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/b96khbdyr93fgkwm37a5pzpl4hr7iwwl-gmp-6.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gmp"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "6.3.0"; }; hardeningDisable = «repeated»; info = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; gmp = «repeated»; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isl = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "isl-0.20"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/cjirqa3nqbc8ncbk1420jqk3shbba38r-isl-0.20"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "isl"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "0.20"; }; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; gmp = «repeated»; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isl = «repeated»; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; gmp = «repeated»; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isl = «repeated»; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; libmpc = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libmpc-1.3.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/w1fp9zh0hjapzw432dxc63v6ark9jbcy-libmpc-1.3.1"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "libmpc"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "1.3.1"; }; man = { CPATH = "/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include"; EXTRA_FLAGS_FOR_TARGET = ""; EXTRA_LDFLAGS_FOR_TARGET = ""; LIBRARY_PATH = "/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib"; NIX_HARDENING_ENABLE = «repeated»; NIX_LDFLAGS = ""; NIX_NO_SELF_RPATH = "1"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildFlags = [ ]; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checksum = <CODE>; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; crossMingw = false; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = «repeated»; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = true; drvAttrs = «repeated»; drvPath = <CODE>; enableMultilib = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = false; enableShared = true; forceLibgccToBuildCrtStuff = <CODE>; gmp = «repeated»; hardeningDisable = «repeated»; info = «repeated»; inputDerivation = <CODE>; isGNU = true; isl = «repeated»; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; libmpc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "GNU Compiler Collection, version 12.3.0"; homepage = <CODE>; insecure = <CODE>; license = «repeated»; longDescription = <CODE>; maintainers = «repeated»; name = <CODE>; outputsToInstall = <CODE>; platforms = «repeated»; position = <CODE>; unfree = <CODE>; unsupported = <CODE>; }; mpfr = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "mpfr-4.2.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/qllqyi42dxdf5ksf0awpjj1m5rqxzfa6-mpfr-4.2.1"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "mpfr"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; updateScript = <CODE>; userHook = null; version = "4.2.1"; }; name = "gcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { forceLibgccToBuildCrtStuff = <CODE>; gmp = «repeated»; isGNU = true; isl = «repeated»; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; libmpc = «repeated»; mpfr = «repeated»; version = "12.3.0"; }; patches = «repeated»; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; mesonFlags = [ ]; meta = «repeated»; mpfr = «repeated»; name = "gcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/l3lhzwrfgzncjj1z4wyq6kkrp6czx5qp-gcc-12.3.0-libgcc"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; libmpc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; mpfr = «repeated»; name = "gcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = "derivation"; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; libmpc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; mpfr = «repeated»; name = "gcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = <CODE>; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; inputDerivation = <CODE>; isGNU = true; isl = «repeated»; langAda = false; langC = true; langCC = true; langD = false; langFortran = false; langGo = false; langJava = false; langObjC = false; langObjCpp = false; lib = «repeated»; libcCross = null; libc_dev = «repeated»; libgcc = «repeated»; libmpc = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; mpfr = «repeated»; name = "gcc-12.3.0"; nativeBuildInputs = «repeated»; noSysDirs = true; out = <CODE>; outPath = "/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "gcc"; postConfigure = "# Avoid store paths when embedding ./configure flags into gcc.\n# Mangled arguments are still useful when reporting bugs upstream.\nsed -e \"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\{32\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\" -i Makefile\n"; postInstall = "# Move runtime libraries to lib output.\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.so*\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.la\"  \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dylib\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll.a\" \"\${!outputLib}\"\nmoveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.dll\" \"\${!outputLib}\"\nmoveToOutput \"share/gcc-*/python\" \"\${!outputLib}\"\n\nif [ -z \"$enableShared\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib/lib*.a\" \"\${!outputLib}\"\nfi\n\nfor i in \"\${!outputLib}/\${targetConfig}\"/lib/*.{la,py}; do\n    substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\ndone\n\nif [ -n \"$enableMultilib\" ]; then\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.so*\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.la\"  \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dylib\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll.a\" \"\${!outputLib}\"\n    moveToOutput \"\${targetConfig+$targetConfig/}lib64/lib*.dll\" \"\${!outputLib}\"\n\n    for i in \"\${!outputLib}/\${targetConfig}\"/lib64/*.{la,py}; do\n        substituteInPlace \"$i\" --replace \"$out\" \"\${!outputLib}\"\n    done\nfi\n\n# Remove `fixincl' to prevent a retained dependency on the\n# previous gcc.\nrm -rf $out/libexec/gcc/*/*/install-tools\nrm -rf $out/lib/gcc/*/*/install-tools\n\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\nrm -rf $out/bin/gccbug\n\nif type \"install_name_tool\"; then\n    for i in \"\${!outputLib}\"/lib/*.*.dylib \"\${!outputLib}\"/lib/*.so.[0-9]; do\n        install_name_tool -id \"$i\" \"$i\" || true\n        for old_path in $(otool -L \"$i\" | grep \"$out\" | awk '{print $1}'); do\n          new_path=`echo \"$old_path\" | sed \"s,$out,\${!outputLib},\"`\n          install_name_tool -change \"$old_path\" \"$new_path\" \"$i\" || true\n        done\n    done\nfi\n\n# Get rid of some \"fixed\" header files\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h}\n\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\nfor i in $out/bin/*-gcc*; do\n    if cmp -s $out/bin/gcc $i; then\n        ln -sfn gcc $i\n    fi\ndone\n\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\n    if cmp -s $out/bin/g++ $i; then\n        ln -sfn g++ $i\n    fi\ndone\n\n# Two identical man pages are shipped (moving and compressing is done later)\nfor i in \"$out\"/share/man/man1/*g++.1; do\n    if test -e \"$i\"; then\n        man_prefix=`echo \"$i\" | sed \"s,.*/\\(.*\\)g++.1,\\1,\"`\n        ln -sf \"$man_prefix\"gcc.1 \"$i\"\n    fi\ndone\n"; postInstallSaveChecksumPhase = "mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\ncat > gcc/build/genchecksum <<\\EOF\n#!/nix/store/xnykg7v1xihvwc8bi00drmlj0n61b69g-bash-5.2-p21/bin/bash\n/nix/store/mylgaym756hykvsd9c51wg790p47nzql-nuke-references/bin/nuke-refs $@\nfor INPUT in \"$@\"; do install -Dt $INPUT $checksum/inputs/; done\nexec build/.genchecksum-wrapped $@\nEOF\nchmod +x gcc/build/genchecksum\nrm gcc/*-checksum.*\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\n"; postPatch = "configureScripts=$(find . -name configure)\nfor configureScript in $configureScripts; do\n  patchShebangs $configureScript\ndone\necho \"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\"\n          for header in \"gcc/config/\"*-gnu.h \"gcc/config/\"*\"/\"*.h\n          do\n            grep -q _DYNAMIC_LINKER \"$header\" || continue\n            echo \"  fixing $header...\"\n            sed -i \"$header\" \\\n                -e 's|define[[:blank:]]*\\([UCG]\\+\\)LIBC_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define \\1LIBC_DYNAMIC_LINKER\\2 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\3\"|g' \\\n                -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\([0-9]*\\)[[:blank:]]\"\\([^\\\"]\\+\\)\"$|define MUSL_DYNAMIC_LINKER\\1 \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\\2\"|g'\n            done\n"; preConfigure = "ln -sf /nix/store/x5xahkczz9ksgpnhbpc8dff766jif0qh-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\nif test -n \"$newlibSrc\"; then\n    tar xvf \"$newlibSrc\" -C ..\n    ln -s ../newlib-*/newlib newlib\n    # Patch to get armvt5el working:\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\nfi\n\n# Bug - they packaged zlib\nif test -d \"zlib\"; then\n    # This breaks the build without-headers, which should build only\n    # the target libgcc as target libraries.\n    # See 'configure:5370'\n    rm -Rf zlib\nfi\n\nif test -n \"$crossMingw\" -a -n \"$withoutTargetLibc\"; then\n    mkdir -p ../mingw\n    # --with-build-sysroot expects that:\n    cp -R $libcCross/include ../mingw\n    configureFlags=\"$configureFlags --with-build-sysroot=`pwd`/..\"\nfi\n\n# Perform the build in a different directory.\nmkdir ../build\ncd ../build\nconfigureScript=../$sourceRoot/configure\n"; preFixup = "# Populate most delicated lib/ part of stripDebugList{,Target}\nupdateDebugListPaths() {\n  local oldOpts\n  oldOpts=\"$(shopt -p nullglob)\" || true\n  shopt -s nullglob\n\n  pushd $out\n  local -ar outHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\n  )\n  local -ar outTargetFiles=(\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\n  )\n  popd\n\n  pushd $lib\n  local -ar libHostFiles=(\n    lib{,32,64}/*.{a,o,so*}\n  )\n  local -ar libTargetFiles=(\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\n  )\n  popd\n\n  eval \"$oldOpts\"\n\n  stripDebugList=\"$stripDebugList \${outHostFiles[*]} \${libHostFiles[*]}\"\n  stripDebugListTarget=\"$stripDebugListTarget \${outTargetFiles[*]} \${libTargetFiles[*]}\"\n}\nupdateDebugListPaths\n"; preFixupLibGccPhase = "# move libgcc from lib to its own output (libgcc)\nmkdir -p $libgcc/lib\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\npatchelf --set-rpath \"\" $libgcc/lib/libgcc_s.so.1\n"; preFixupPhases = «repeated»; preInstall = "mkdir -p \"$out/\${targetConfig}/lib\"\nmkdir -p \"\${!outputLib}/\${targetConfig}/lib\"\nln -s lib \"$out/\${targetConfig}/lib64\"\nln -s lib \"\${!outputLib}/\${targetConfig}/lib64\"\n"; preUnpack = "oldOpts=\"$(shopt -po nounset)\" || true\nset -euo pipefail\n\nexport NIX_FIXINC_DUMMY=\"$NIX_BUILD_TOP/dummy\"\nmkdir \"$NIX_FIXINC_DUMMY\"\n\nif test \"$staticCompiler\" = \"1\"; then\n    EXTRA_LDFLAGS=\"-static\"\nelse\n    EXTRA_LDFLAGS=\"-Wl,-rpath,\${!outputLib}/lib\"\nfi\n\n# GCC interprets empty paths as \".\", which we don't want.\nif test -z \"\${CPATH-}\"; then unset CPATH; fi\nif test -z \"\${LIBRARY_PATH-}\"; then unset LIBRARY_PATH; fi\necho \"\\$CPATH is \\`\${CPATH-}'\"\necho \"\\$LIBRARY_PATH is \\`\${LIBRARY_PATH-}'\"\n\nif test \"$noSysDirs\" = \"1\"; then\n\n    declare -g \\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\n\n    # Extract flags from Bintools Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curBintools=\"NIX_BINTOOLS\${post}\"\n\n        declare -a extraLDFlags=()\n        if [[ -e \"\${!curBintools}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra flags when linking to pass to the gcc\n            # compilers being generated to make sure that they use our libc.\n            extraLDFlags=($(< \"\${!curBintools}/nix-support/libc-ldflags\") $(< \"\${!curBintools}/nix-support/libc-ldflags-before\" || true))\n            if [ -e \${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\n                extraLDFlags=-dynamic-linker=$(< \${!curBintools}/nix-support/dynamic-linker)\n            fi\n\n            # The path to the Libc binaries such as `crti.o'.\n            libc_libdir=\"$(< \"\${!curBintools}/nix-support/orig-libc\")/lib\"\n        else\n            # Hack: support impure environments.\n            extraLDFlags=(\"-L/usr/lib64\" \"-L/usr/lib\")\n            libc_libdir=\"/usr/lib\"\n        fi\n        extraLDFlags=(\"-L$libc_libdir\" \"-rpath\" \"$libc_libdir\"\n                      \"\${extraLDFlags[@]}\")\n        for i in \"\${extraLDFlags[@]}\"; do\n            declare -g EXTRA_LDFLAGS\${post}+=\" -Wl,$i\"\n        done\n    done\n\n    # Extract flags from CC Wrappers\n    for post in '_FOR_BUILD' \"\"; do\n        curCC=\"NIX_CC\${post}\"\n        curFIXINC=\"NIX_FIXINC_DUMMY\${post}\"\n\n        declare -a extraFlags=()\n        if [[ -e \"\${!curCC}/nix-support/orig-libc\" ]]; then\n            # Figure out what extra compiling flags to pass to the gcc compilers\n            # being generated to make sure that they use our libc.\n            extraFlags=($(< \"\${!curCC}/nix-support/libc-crt1-cflags\") $(< \"\${!curCC}/nix-support/libc-cflags\"))\n\n            # The path to the Libc headers\n            libc_devdir=\"$(< \"\${!curCC}/nix-support/orig-libc-dev\")\"\n\n            # Use *real* header files, otherwise a limits.h is generated that\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\n            # which breaks the build).\n            declare -g NIX_FIXINC_DUMMY\${post}=\"$libc_devdir/include\"\n        else\n            # Hack: support impure environments.\n            extraFlags=(\"-isystem\" \"/usr/include\")\n            declare -g NIX_FIXINC_DUMMY\${post}=/usr/include\n        fi\n\n        extraFlags=(\"-I\${!curFIXINC}\" \"\${extraFlags[@]}\")\n\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\n        # sure to explictly add them so that files compiled with the bootstrap\n        # compiler are optimized and (optionally) contain debugging information\n        # (info \"(gccinstall) Building\").\n        if test -n \"\${dontStrip-}\"; then\n            extraFlags=(\"-O2\" \"-g\" \"\${extraFlags[@]}\")\n        else\n            # Don't pass `-g' at all; this saves space while building.\n            extraFlags=(\"-O2\" \"\${extraFlags[@]}\")\n        fi\n\n        declare -g EXTRA_FLAGS\${post}=\"\${extraFlags[*]}\"\n    done\n\n    if test -z \"\${targetConfig-}\"; then\n        # host = target, so the flags are the same\n        EXTRA_FLAGS_FOR_TARGET=\"$EXTRA_FLAGS\"\n        EXTRA_LDFLAGS_FOR_TARGET=\"$EXTRA_LDFLAGS\"\n    fi\n\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\n    # the startfiles.\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\n    # for the startfiles.\n    makeFlagsArray+=(\n        \"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\"\n        \"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\"\n\n        \"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\"\n        #\"LDFLAGS=$EXTRA_LDFLAGS\"\n        \"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\"\n\n        \"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n        \"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\"\n\n        # It seems there is a bug in GCC 5\n        #\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n        #\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n\n        \"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        \"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n    )\n\n    if test -z \"\${targetConfig-}\"; then\n        makeFlagsArray+=(\n            \"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\"\n            \"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\"\n        )\n    fi\n\n    if test \"$withoutTargetLibc\" == 1; then\n        # We don't want the gcc build to assume there will be a libc providing\n        # limits.h in this stage\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=false'\n        )\n    else\n        makeFlagsArray+=(\n            'LIMITS_H_TEST=true'\n        )\n    fi\nfi\n\neval \"$oldOpts\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; src = «repeated»; staticCompiler = false; stdenv = «repeated»; strictDeps = false; stripDebugList = «repeated»; stripDebugListTarget = «repeated»; system = "x86_64-linux"; targetConfig = null; type = "derivation"; userHook = null; version = "12.3.0"; withoutTargetLibc = false; }; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "bootstrap-stage4-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "bootstrap-stage4-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; name = "expand-response-params"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; meta = <CODE>; name = "expand-response-params"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage4-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = «repeated»; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bootstrap-stage4-gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/q915x5djyg7gyds7ifq30pjnlpr6zn6s-bootstrap-stage4-gcc-wrapper-12.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = «repeated»; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "bootstrap-stage4-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; outPath = "/nix/store/q915x5djyg7gyds7ifq30pjnlpr6zn6s-bootstrap-stage4-gcc-wrapper-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "bootstrap-stage4-gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/w493wfjczjnkcmjfwxggpavhm1dav9rc-xz-5.4.5-bin"; outputName = "bin"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; updateScript = <CODE>; userHook = null; version = "5.4.5"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/iiq82fkx8jhfq7bdiyxym41izfgms6lq-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage3-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = «repeated»; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage3-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage3-stdenv-linux"; out = «repeated»; outPath = "/nix/store/9339knlrj4y55hrhcsh80zl6nlcaswhp-bootstrap-stage3-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/9339knlrj4y55hrhcsh80zl6nlcaswhp-bootstrap-stage3-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/0bd8w01b3675hgzyr79vz2na5m0m46bb-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = [ «repeated» ]; name = "bootstrap-stage4-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» «repeated» «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage4-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage4-stdenv-linux"; out = «repeated»; outPath = "/nix/store/zbn1pjl27rxd5i1s7aifmg6yn8s0vjms-bootstrap-stage4-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/zbn1pjl27rxd5i1s7aifmg6yn8s0vjms-bootstrap-stage4-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.4.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/zd47il8k6kz3b9jzlafax0il9w0mrmm3-xz-5.4.5"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "5.4.5"; }; outPath = "/nix/store/v4kc00z3p33vicg586ig697lqlqq04r6-xz-5.4.5-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "5.4.5"; }; doCheck = true; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "xz-5.4.5"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/pp7yamsghaprdxq94vr2iqx1hd5xn2qf-xz-5.4.5-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "xz"; postInstall = "rm -rf $out/share/doc"; preCheck = "# Tests have a /bin/sh dependency...\npatchShebangs tests\n"; preConfigure = "CONFIG_SHELL=/bin/sh"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; updateScript = <CODE>; userHook = null; version = "5.4.5"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/6pw24bsaimwas27i98hwzqwsw2krw9k5-make-wrapper.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/6pw24bsaimwas27i98hwzqwsw2krw9k5-make-wrapper.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/6pw24bsaimwas27i98hwzqwsw2krw9k5-make-wrapper.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/6pw24bsaimwas27i98hwzqwsw2krw9k5-make-wrapper.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "make-shell-wrapper-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/819fzxfwzp7zhhi4wy5nkapimkb1bsx5-die.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/819fzxfwzp7zhhi4wy5nkapimkb1bsx5-die.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "die-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = { __extraImpureHostDeps = <CODE>; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; buildPlatform = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = null; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» «repeated» «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh ]; disallowedRequisites = [ ]; drvAttrs = { args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; initialPath = «repeated»; name = "bootstrap-stage4-stdenv-linux"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = «repeated»; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = false; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = <CODE>; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <CODE>; name = "bootstrap-stage4-stdenv-linux"; out = { all = <CODE>; args = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = [ ]; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "bootstrap-stage4-stdenv-linux"; out = «repeated»; outPath = "/nix/store/wf8nwh9j57cjkjd5frvc539riy8sxry7-bootstrap-stage4-stdenv-linux"; outputName = "out"; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/wf8nwh9j57cjkjd5frvc539riy8sxry7-bootstrap-stage4-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "# Don't patch #!/interpreter because it leads to retained\n# dependencies on the bootstrapTools in the final stdenv.\ndontPatchShebangs=1\nexport NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; shellDryRun = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "die-hook"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/9qgwf7hnlclbvblg9wyk9bybwgnrshhd-die-hook"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } ]; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "make-shell-wrapper-hook"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/fx26lgnzbf97i5rdzcv2gkys4j6kb78m-make-shell-wrapper-hook"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { tests = <CODE>; }; patches = [ ]; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; } ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "gzip"; preFixup = "sed -i '1{;/#!\\/bin\\/sh/aPATH=\"'$out'/bin:$PATH\"\n}' $out/bin/*\nwrapProgram $out/bin/gzip \\\n  --add-flags \"\\\${GZIP_NO_TIMESTAMPS:+-n}\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gzip-1.13.tar.xz"; outputHash = "sha256-dFTraTXbF8ZlVXbC4bD6vv04tNCTbg+H9IzQYs6RoFc="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gzip/gzip-1.13.tar.xz"; urls = [ "https://ftpmirror.gnu.org/gzip/gzip-1.13.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gzip-1.13.tar.xz"; out = «repeated»; outPath = "/nix/store/b44vg9nm5f64fihql70jzjj7yd64q0sa-gzip-1.13.tar.xz"; outputHash = "sha256-dFTraTXbF8ZlVXbC4bD6vv04tNCTbg+H9IzQYs6RoFc="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gzip/gzip-1.13.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "1.13"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; makeFlags = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gzip-1.13"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/21drzcpzpi485f9m6ihspg4kayly5425-gzip-1.13"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "gzip"; preFixup = "sed -i '1{;/#!\\/bin\\/sh/aPATH=\"'$out'/bin:$PATH\"\n}' $out/bin/*\nwrapProgram $out/bin/gzip \\\n  --add-flags \"\\\${GZIP_NO_TIMESTAMPS:+-n}\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.13"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontDisableStatic = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontDisableStatic = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "bzip2-1.0.8"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoreconf-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = <CODE>; dontPatchShebangs = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoconf-2.71"; nativeBuildInputs = [ «repeated» «repeated» «repeated» ]; outputs = [ "out" "doc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/autoconf/2.71-fix-race.patch ]; pname = "autoconf"; postBuild = "\n    make html\n  "; postInstall = "\n    make install-html\n  "; preCheck = "export TESTSUITEFLAGS=\"-j$NIX_BUILD_CORES\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "autoconf-2.71.tar.xz"; outputHash = "197sl23irn6s9pd54rxj5vcp5y8dv65jb9yfqgr2g56cxg7q6k7i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz"; urls = [ "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "autoconf-2.71.tar.xz"; out = «repeated»; outPath = "/nix/store/g3pzpdicszf700d5xffyk939jzxa4r2k-autoconf-2.71.tar.xz"; outputHash = "197sl23irn6s9pd54rxj5vcp5y8dv65jb9yfqgr2g56cxg7q6k7i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf/autoconf-2.71.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.71"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoconf-2.71"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/zi7gch57k1wk58jcp5jvzbmly05c08fk-autoconf-2.71"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "autoconf"; postBuild = "\n    make html\n  "; postInstall = "\n    make install-html\n  "; preCheck = "export TESTSUITEFLAGS=\"-j$NIX_BUILD_CORES\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.71"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontPatchShebangs = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "automake-1.16.5"; nativeBuildInputs = [ «repeated» «repeated» ]; outputs = [ "out" ]; patches = [ ]; pname = "automake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/automake/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "automake-1.16.5.tar.xz"; outputHash = "0sdl32qxdy7m06iggmkkvf7j520rmmgbsjzbm7fgnxwxdp6mh7gh"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz"; urls = [ "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "automake-1.16.5.tar.xz"; out = «repeated»; outPath = "/nix/store/gmaq49vzfrkvr714y4fhfxv100ijihin-automake-1.16.5.tar.xz"; outputHash = "0sdl32qxdy7m06iggmkkvf7j520rmmgbsjzbm7fgnxwxdp6mh7gh"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/automake/automake-1.16.5.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.16.5"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "automake-1.16.5"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/rbxqgji7p66yavwlrlkbcjhjjd46h62h-automake-1.16.5"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "automake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/automake/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.16.5"; } «repeated» { FILECMD = "/nix/store/hnz8p5w9xc0ivsiyrgky6f6h7sjb28a5-file-5.45/bin/file"; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontFixLibtool = true; dontPatchShebangs = true; drvAttrs = { FILECMD = "/nix/store/hnz8p5w9xc0ivsiyrgky6f6h7sjb28a5-file-5.45/bin/file"; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontFixLibtool = true; dontPatchShebangs = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libtool-2.4.7"; nativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ ]; mesonFlags = [ ]; name = "file-5.45"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "man" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/misc/file/32-bit-time_t.patch ]; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "file-5.45.tar.gz"; outputHash = "sha256-/Jf1ECm7DiyfTjv/79r2ePDgOe6HK53lwAKm0Jx4TYI="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://astron.com/pub/file/file-5.45.tar.gz"; urls = [ "https://astron.com/pub/file/file-5.45.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "file-5.45.tar.gz"; out = «repeated»; outPath = "/nix/store/v0m59igyinq3qrbx7fibyal1dx5f6rcq-file-5.45.tar.gz"; outputHash = "sha256-/Jf1ECm7DiyfTjv/79r2ePDgOe6HK53lwAKm0Jx4TYI="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://astron.com/pub/file/file-5.45.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.45"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "file-5.45"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "file-5.45"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/hnz8p5w9xc0ivsiyrgky6f6h7sjb28a5-file-5.45"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = «repeated»; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.45"; }; outPath = "/nix/store/dvk4bk8j4r5sxmlf8fdmi55cgqppxscw-file-5.45-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.45"; } ]; outputs = [ "out" "lib" ]; patches = [ ]; pname = "libtool"; postPatch = "substituteInPlace libtoolize.in       --replace '#! /usr/bin/env sh' '#!/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash'\n# avoid help2man run after 'libtoolize.in' update\ntouch doc/libtoolize.1\n"; propagatedBuildInputs = [ «repeated» «repeated» ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libtool-2.4.7.tar.gz"; outputHash = "sha256-BOlsJATqcMWQxUbrpCAqThJyLGQAFsErmy8c49SB6ag="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz"; urls = [ "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libtool-2.4.7.tar.gz"; out = «repeated»; outPath = "/nix/store/ck70x6hdl1kgqa4a9ps8spw6ph9mfcj8-libtool-2.4.7.tar.gz"; outputHash = "sha256-BOlsJATqcMWQxUbrpCAqThJyLGQAFsErmy8c49SB6ag="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.4.7"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; lib = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libtool-2.4.7"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/jsr8fkrbbc7gmld77lqgcjk4mjgkxz5a-libtool-2.4.7"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libtool"; postPatch = "substituteInPlace libtoolize.in       --replace '#! /usr/bin/env sh' '#!/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash'\n# avoid help2man run after 'libtoolize.in' update\ntouch doc/libtoolize.1\n"; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.4.7"; } ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoreconf-hook"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/l0idzfhpskwg8hq7gdm0i6l6zk3mxlm5-autoreconf-hook"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } ]; outputs = [ "bin" "dev" "out" "man" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bzip2-1.0.6.2-autoconfiscated.patch"; outputHash = "sha256-QMufl6ffJVVVVZespvkCbFpB6++R1lnq1687jEsUjr0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch"; urls = [ "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bzip2-1.0.6.2-autoconfiscated.patch"; out = «repeated»; outPath = "/nix/store/ws73d521m0im6x7nhb0836i51z2yd9dq-bzip2-1.0.6.2-autoconfiscated.patch"; outputHash = "sha256-QMufl6ffJVVVVZespvkCbFpB6++R1lnq1687jEsUjr0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftp.suse.com/pub/people/sbrabec/bzip2/for_downstream/bzip2-1.0.6.2-autoconfiscated.patch"; urls = «repeated»; } ]; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bzip2-1.0.8.tar.gz"; outputHash = "sha256-q1oDF27hBtPw+pDjgdpHjdrkBZGBU8yiSOaCzQxKImk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"; urls = [ "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bzip2-1.0.8.tar.gz"; out = «repeated»; outPath = "/nix/store/slpdqm3wlhwbkzyijjz3xpifa219ac0x-bzip2-1.0.8.tar.gz"; outputHash = "sha256-q1oDF27hBtPw+pDjgdpHjdrkBZGBU8yiSOaCzQxKImk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.0.8"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bzip2-1.0.8"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bzip2-1.0.8"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/971390xv13vzrhcrqp7ds3rr0hh92jn4-bzip2-1.0.8"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.0.8"; }; outPath = "/nix/store/8p1rj4maax15sgvli1vwzjypnraqzwlw-bzip2-1.0.8-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patchFlags = «repeated»; patches = «repeated»; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.0.8"; }; doCheck = false; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bzip2-1.0.8"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/9gdg43h7zrn651lb1ihv2b2qf59im94b-bzip2-1.0.8-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patchFlags = «repeated»; patches = «repeated»; pname = "bzip2"; postInstall = "ln -s $out/lib/libbz2.so.1.0.* $out/lib/libbz2.so.1.0\n"; postPatch = "patch <<-EOF\n  --- configure.ac\n  +++ configure.ac\n  @@ -3,3 +3,3 @@\n  -AC_INIT([bzip2], [1.0.6], [Julian Seward <jseward@bzip.org>])\n  +AC_INIT([bzip2], [1.0.8], [Julian Seward <jseward@bzip.org>])\n   BZIP2_LT_CURRENT=1\n  -BZIP2_LT_REVISION=6\n  +BZIP2_LT_REVISION=8\nEOF\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "1.0.8"; } «repeated» «repeated» «repeated» { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-bash-malloc" "--disable-readline" ]; debug = <CODE>; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" ]; makeFlags = [ ]; mesonFlags = [ ]; name = "bash-5.2-p21"; nativeBuildInputs = [ «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "dev" "man" "doc" "info" "debug" ]; patchFlags = [ "-p0" ]; patches = [ { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-001"; out = «repeated»; outPath = "/nix/store/a73wzcks7h2y814qxa1z3kv1hg205mpm-bash52-001"; outputHash = "02iibpd3jq8p1bhdzgik8ps6gi1145vr463a82gj1hivjbp2ybzl"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-001"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-002"; out = «repeated»; outPath = "/nix/store/xc3h9isl5566i6a4pvdsgin26rchijrq-bash52-002"; outputHash = "1f6p1z85qh1lavdp3xikgp0bfv0vqhvgpgwmdzlywl35hwdmxk25"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-002"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-003"; out = «repeated»; outPath = "/nix/store/sxc8xmi7caxaiywzh15za9crpk3bw98z-bash52-003"; outputHash = "1zxsi869jd90hksx3nyypgyqwrxhw2ws3r6hmk76yc1lsgdhq2ba"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-003"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-004"; out = «repeated»; outPath = "/nix/store/2ynclzrdl0hy9miy6k8gcwgzw4mhsmd0-bash52-004"; outputHash = "04i5liw5cg6dqkdxfgazqc2jrw40bmclx3dx45bwy259pcj7g0iq"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-004"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-005"; out = «repeated»; outPath = "/nix/store/z76vsdh69cvwkwhwg69k7d1znwjmx6hf-bash52-005"; outputHash = "0mykflv9qnbx3jz71l4f7isadiw9knm4qimqkwsv9cv88dafpq7c"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-005"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-006"; out = «repeated»; outPath = "/nix/store/1fw5fcsjz9wcbf13a5xs4i2cjfircp3x-bash52-006"; outputHash = "13265akl8w6zyrg0l7f0x6arjgqjhllcwl6lk46rl53x4mm5dq6i"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-006"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-007"; out = «repeated»; outPath = "/nix/store/rs1qdpy1nb3x07g4vqvb4s774qhq9f0w-bash52-007"; outputHash = "146lrwkn5wgxzs6vx34wl47g69zsxdy032k40qzi626b47ya6015"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-007"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-008"; out = «repeated»; outPath = "/nix/store/jn9f2mr2jdm9yn5hi0pws44nbfrah8d3-bash52-008"; outputHash = "1s5i8hcayrv25lc8fxcr431v634yx5sii53b8fmip789s0pxjjvb"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-008"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-009"; out = «repeated»; outPath = "/nix/store/j8vipdfzslz4aa7aj0amwd4msxa9hhpl-bash52-009"; outputHash = "1kfk25151ka9wkmk1myf12irgcmvhsd8b0nfifvhrszah9w82npr"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-009"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-010"; out = «repeated»; outPath = "/nix/store/24ygbbc9k6vjc4vhz2j6a9dkdgmqgc6n-bash52-010"; outputHash = "1kf1jrwm30js0v3d1r2rk4x09s1pyjp70wnd1qqhf9bmkw15ww67"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-010"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-011"; out = «repeated»; outPath = "/nix/store/sim601rd1y3hsap9qkn25cwprsa9aipp-bash52-011"; outputHash = "1x5nkvbj6hci7gx42q7qa72hg2a9wwxh85dk79gn521ypwjmy6w3"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-011"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-012"; out = «repeated»; outPath = "/nix/store/x1sqwqn02c5mnpi8hbqlxpbm3rahq5dm-bash52-012"; outputHash = "0b6lcwzm7v5bzjiwaz2c8n5aj77w8ckhp2vwk4v3zsdq3z70gc9g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-012"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-013"; out = «repeated»; outPath = "/nix/store/wcpqrbsljh2x04qccs6jv9z8c9y1c3cd-bash52-013"; outputHash = "1rkwpibd6j2ghppfhqsva2jm4kdni6b7jpdsxdps52643gc4yjq9"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-013"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-014"; out = «repeated»; outPath = "/nix/store/cddj9qpc4l62qjy6vvf7gp50mfqaf506-bash52-014"; outputHash = "09766vqqw4ffnmysm725v35qkhp1g9j4qgqag941xvq655pj9y9y"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-014"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-015"; out = «repeated»; outPath = "/nix/store/pjp935kxwai47zyx1wpwadls00m9nmib-bash52-015"; outputHash = "12im449abnq5gaqjmdxr5i38kmp02fa8l8wffad3jryvd58r0wzg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-015"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-016"; out = «repeated»; outPath = "/nix/store/0cr4hvmwbfablyhn58ba0lrfb44igq5y-bash52-016"; outputHash = "05arb0hzmng03cr357lf6p8af0x2a1pznsd3psll03nibfy56n0m"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-016"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-017"; out = «repeated»; outPath = "/nix/store/in24890k6ybij0b63jisfmrwmmc6x7pv-bash52-017"; outputHash = "129cvx4gfz8n23iw1lhbknbw86fyw6vh60jqj1wj3d5pr75wwj0w"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-017"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-018"; out = «repeated»; outPath = "/nix/store/nffxsaniz7irz07z79cxwkhz97vgqwrx-bash52-018"; outputHash = "105am94qxjc27gga4a8asvsi01090xwjfim3s16lafwjvm4xsha6"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-018"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-019"; out = «repeated»; outPath = "/nix/store/d5qpl3kqrmv99fbw1cd09qj9jr7kb2rr-bash52-019"; outputHash = "10njgv5mrc5rhsp5lvxcbm0pnzn59a8spi2nhdasifyl1a32cp1j"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-019"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-020"; out = «repeated»; outPath = "/nix/store/pcdlxsb3mxfjnclg8rn8xy2ywbb5ra36-bash52-020"; outputHash = "07f0wlmqjdfarp44w3gj9gdqbqm5x20rvlhpn34ngklmxcm2bz5n"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-020"; urls = «repeated»; } { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash52-021"; out = «repeated»; outPath = "/nix/store/gnx16vs69p7fggsslnbg6v818497vvxl-bash52-021"; outputHash = "1kahfqqalcwi4m73pg3ssz6lh0kcqsqax09myac7a15d2y0vhd43"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2-patches/bash52-021"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/pgrp-pipe-5.patch { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = [ "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "fix-static.patch"; out = «repeated»; outPath = "/nix/store/1dydp86d00qzjbncpi80sdsndf33lc5j-fix-static.patch"; outputHash = "XHFMQ6eXTReNoywdETyrfQEv1rKF8+XFbQZP4YoVKFk="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cgit.freebsd.org/ports/plain/shells/bash/files/patch-configure?id=3e147a1f594751a68fea00a28090d0792bee0b51"; urls = «repeated»; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/shells/bash/parallel.patch ]; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = [ "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "bash-5.2.tar.gz"; out = «repeated»; outPath = "/nix/store/v28dv6l0qk3j382kp40bksa1v6h7dx9p-bash-5.2.tar.gz"; outputHash = "sha256-oTnBZt9/9EccXgczBRZC7lVWwcyKSnjxRVg8XIGrMvs="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/bash/bash-5.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/vs6bgdvwh3mama4r24rj2if3f5wjib5n-bash-5.2-p21-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { shellPath = "/bin/bash"; tests = <CODE>; }; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.2"; }; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "5.2"; } «repeated» { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-64-bit-bfd" "--with-system-zlib" "--enable-deterministic-archives" "--disable-werror" "--enable-fix-loongson2f-nop" "--enable-new-dtags" "--program-prefix=" "--disable-gprofng" "--with-lib-path=:" "--enable-gold" "--enable-plugins" "--enable-shared" "--disable-static" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" "--target=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" "target" ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ "format" "pie" ]; mesonFlags = [ ]; name = "binutils-2.40"; nativeBuildInputs = [ «repeated» «repeated» ]; noSysDirs = true; outputs = [ "out" "info" "man" "dev" "lib" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/deterministic.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-Revert-libtool.m4-fix-the-NM-nm-over-here-B-option-w.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-Revert-libtool.m4-fix-nm-BSD-flag-detection.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/0001-libtool.m4-update-macos-version-detection-block.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/always-search-rpath.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/plugins-no-BINDIR.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/binutils/CVE-2023-1972.patch ]; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; userHook = null; version = "2.40"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = «repeated»; man = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "Tools for manipulating binaries (linker, assembler, etc.)"; homepage = "https://www.gnu.org/software/binutils/"; insecure = <CODE>; license = «repeated»; longDescription = "The GNU Binutils are a collection of binary tools.  The main\nones are `ld' (the GNU linker) and `as' (the GNU assembler).\nThey also include the BFD (Binary File Descriptor) library,\n`gprof', `nm', `strip', etc.\n"; maintainers = [ <CODE> <CODE> ]; name = <CODE>; outputsToInstall = <CODE>; platforms = «repeated»; position = <CODE>; priority = 10; unfree = <CODE>; unsupported = <CODE>; }; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/b65xn2ilnyzd8vfflsxk446m1s9fj016-binutils-2.40-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { hasGold = true; hasPluginAPI = true; isGNU = true; targetPrefix = ""; }; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "2.40"; }; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/1apj1hyjwrw6j8mk5z692yrqslni2i1f-binutils-2.40-lib"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "2.40"; }; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/hl6d33kdka9ma9xis87kapxbk98f066z-binutils-2.40-info"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "2.40"; }; inputDerivation = <CODE>; isGNU = true; lib = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; userHook = null; version = "2.40"; } «repeated» { FORCE_UNSAFE_CONFIGURE = ""; NIX_CFLAGS_COMPILE = ""; NIX_LDFLAGS = ""; PERL = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { NIX_HARDENING_ENABLE = [ "fortify" "stackprotector" "pic" "strictoverflow" "format" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = <CODE>; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; mesonFlags = [ ]; name = "attr-2.5.1"; nativeBuildInputs = [ «repeated» ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ ]; pname = "attr"; postPatch = "for script in install-sh include/install-sh; do\n  patchShebangs $script\ndone\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "attr-2.5.1.tar.gz"; outputHash = "1y6sibbkrcjygv8naadnsg6xmsqwfh6cwrqk01l0v2i5kfacdqds"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://mirror.easyname.at/nongnu/attr/attr-2.5.1.tar.gz"; urls = [ "https://mirror.easyname.at/nongnu/attr/attr-2.5.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "attr-2.5.1.tar.gz"; out = «repeated»; outPath = "/nix/store/mz6mc8s7mrvvzjpl9322agmsq00cyrw5-attr-2.5.1.tar.gz"; outputHash = "1y6sibbkrcjygv8naadnsg6xmsqwfh6cwrqk01l0v2i5kfacdqds"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://mirror.easyname.at/nongnu/attr/attr-2.5.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "2.5.1"; }; drvPath = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "attr-2.5.1"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "attr-2.5.1"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/v3kjfcaysin90dqyna1rwgnxsf3pg7fz-attr-2.5.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "attr"; postPatch = "for script in install-sh include/install-sh; do\n  patchShebangs $script\ndone\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.5.1"; }; outPath = "/nix/store/n9bd850xygd6y11f02d03fmq4yy8nr7c-attr-2.5.1-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "attr"; postPatch = "for script in install-sh include/install-sh; do\n  patchShebangs $script\ndone\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.5.1"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; hardeningDisable = [ "fortify3" ]; mesonFlags = [ ]; name = "acl-2.3.1"; nativeBuildInputs = [ «repeated» ]; outputs = [ "bin" "dev" "out" "man" "doc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/acl/LFS64.patch ]; pname = "acl"; postPatch = "echo \"Removing C++-style comments from include/acl.h\"\nsed -e '/^\\/\\//d' -i include/acl.h\n\npatchShebangs .\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "acl-2.3.1.tar.gz"; outputHash = "sha256-dgxhxokBs3/dXu/ur0wMeia9/disdHoe3/HODiQ8Ea8="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://mirror.easyname.at/nongnu/acl/acl-2.3.1.tar.gz"; urls = [ "https://mirror.easyname.at/nongnu/acl/acl-2.3.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "acl-2.3.1.tar.gz"; out = «repeated»; outPath = "/nix/store/y3yiminrckvhf35fh9q42vjwi0npznji-acl-2.3.1.tar.gz"; outputHash = "sha256-dgxhxokBs3/dXu/ur0wMeia9/disdHoe3/HODiQ8Ea8="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://mirror.easyname.at/nongnu/acl/acl-2.3.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "2.3.1"; }; drvPath = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "acl-2.3.1"; nativeBuildInputs = «repeated»; out = { NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; hardeningDisable = «repeated»; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "acl-2.3.1"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/7zqx95qyg38fic8mzk0nxz06ag3jkh12-acl-2.3.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "acl"; postPatch = "echo \"Removing C++-style comments from include/acl.h\"\nsed -e '/^\\/\\//d' -i include/acl.h\n\npatchShebangs .\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.3.1"; }; outPath = "/nix/store/gghgm9vqjlnqy7lv1s8z114slkvcqaiz-acl-2.3.1-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "acl"; postPatch = "echo \"Removing C++-style comments from include/acl.h\"\nsed -e '/^\\/\\//d' -i include/acl.h\n\npatchShebangs .\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.3.1"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-pic" "--enable-cxx" "--enable-fat" "--build=x86_64-unknown-linux-gnu" ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; dontDisableStatic = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "gmp-with-cxx-6.3.0"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "dev" "info" ]; patches = [ ]; pname = "gmp-with-cxx"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = [ "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gmp-6.3.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/n1djrrflvxnwdd735304l23r2qdnjrm6-gmp-6.3.0.tar.bz2"; outputHash = "sha256-rCghGnz7YJuuLiyNYFjWbI/pZDT3QM9v4uR7AA0cIMs="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "6.3.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-with-cxx-6.3.0"; nativeBuildInputs = «repeated»; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; dontDisableStatic = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gmp-with-cxx-6.3.0"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/42xvz6zy0n46ihc4qbz3swmphrnnl7j5-gmp-with-cxx-6.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { static = <CODE>; }; patches = [ ]; pname = "gmp-with-cxx"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; }; outPath = "/nix/store/9wg1s1xi4bfjmf1rp7isjjfbgv14gglm-gmp-with-cxx-6.3.0-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gmp-with-cxx"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; static = <CODE>; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "6.3.0"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-packager=https://nixos.org" "--enable-single-binary=symlinks" "gl_cv_have_proc_uptime=yes" ]; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { FORCE_UNSAFE_CONFIGURE = ""; NIX_CFLAGS_COMPILE = ""; NIX_LDFLAGS = ""; PERL = null; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "coreutils-9.4"; nativeBuildInputs = [ «repeated» «repeated» «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "info" "debug" ]; patches = [ ]; pname = "coreutils"; postInstall = "rm -r \"$out/share\"\n"; postPatch = "# The test tends to fail on btrfs, f2fs and maybe other unusual filesystems.\nsed '2i echo Skipping dd sparse test && exit 77' -i ./tests/dd/sparse.sh\nsed '2i echo Skipping du threshold test && exit 77' -i ./tests/du/threshold.sh\nsed '2i echo Skipping cp reflink-auto test && exit 77' -i ./tests/cp/reflink-auto.sh\nsed '2i echo Skipping cp sparse test && exit 77' -i ./tests/cp/sparse.sh\nsed '2i echo Skipping rm deep-2 test && exit 77' -i ./tests/rm/deep-2.sh\nsed '2i echo Skipping du long-from-unreadable test && exit 77' -i ./tests/du/long-from-unreadable.sh\n\n# Some target platforms, especially when building inside a container have\n# issues with the inotify test.\nsed '2i echo Skipping tail inotify dir recreate test && exit 77' -i ./tests/tail/inotify-dir-recreate.sh\n\n# sandbox does not allow setgid\nsed '2i echo Skipping chmod setgid test && exit 77' -i ./tests/chmod/setgid.sh\nsubstituteInPlace ./tests/install/install-C.sh \\\n  --replace 'mode3=2755' 'mode3=1755'\n\n# Fails on systems with a rootfs. Looks like a bug in the test, see\n# https://lists.gnu.org/archive/html/bug-coreutils/2019-12/msg00000.html\nsed '2i print \"Skipping df skip-rootfs test\"; exit 77' -i ./tests/df/skip-rootfs.sh\n\n# these tests fail in the unprivileged nix sandbox (without nix-daemon) as we break posix assumptions\nfor f in ./tests/chgrp/{basic.sh,recurse.sh,default-no-deref.sh,no-x.sh,posix-H.sh}; do\n  sed '2i echo Skipping chgrp && exit 77' -i \"$f\"\ndone\nfor f in gnulib-tests/{test-chown.c,test-fchownat.c,test-lchown.c}; do\n  echo \"int main() { return 77; }\" > \"$f\"\ndone\n\n# intermittent failures on builders, unknown reason\nsed '2i echo Skipping du basic test && exit 77' -i ./tests/du/basic.sh\n"; preInstall = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "coreutils-9.4.tar.xz"; outputHash = "sha256-6mE6TPRGEjJukXIBu7zfvTAd4h/8O1m25cB+BAsnXlI="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/coreutils/coreutils-9.4.tar.xz"; urls = [ "https://ftpmirror.gnu.org/coreutils/coreutils-9.4.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "coreutils-9.4.tar.xz"; out = «repeated»; outPath = "/nix/store/rmjsgxd4w10wrnnwrrrry2sz5cfpwafq-coreutils-9.4.tar.xz"; outputHash = "sha256-6mE6TPRGEjJukXIBu7zfvTAd4h/8O1m25cB+BAsnXlI="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/coreutils/coreutils-9.4.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "9.4"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "coreutils-9.4"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "coreutils"; postInstall = "rm -r \"$out/share\"\n"; postPatch = "# The test tends to fail on btrfs, f2fs and maybe other unusual filesystems.\nsed '2i echo Skipping dd sparse test && exit 77' -i ./tests/dd/sparse.sh\nsed '2i echo Skipping du threshold test && exit 77' -i ./tests/du/threshold.sh\nsed '2i echo Skipping cp reflink-auto test && exit 77' -i ./tests/cp/reflink-auto.sh\nsed '2i echo Skipping cp sparse test && exit 77' -i ./tests/cp/sparse.sh\nsed '2i echo Skipping rm deep-2 test && exit 77' -i ./tests/rm/deep-2.sh\nsed '2i echo Skipping du long-from-unreadable test && exit 77' -i ./tests/du/long-from-unreadable.sh\n\n# Some target platforms, especially when building inside a container have\n# issues with the inotify test.\nsed '2i echo Skipping tail inotify dir recreate test && exit 77' -i ./tests/tail/inotify-dir-recreate.sh\n\n# sandbox does not allow setgid\nsed '2i echo Skipping chmod setgid test && exit 77' -i ./tests/chmod/setgid.sh\nsubstituteInPlace ./tests/install/install-C.sh \\\n  --replace 'mode3=2755' 'mode3=1755'\n\n# Fails on systems with a rootfs. Looks like a bug in the test, see\n# https://lists.gnu.org/archive/html/bug-coreutils/2019-12/msg00000.html\nsed '2i print \"Skipping df skip-rootfs test\"; exit 77' -i ./tests/df/skip-rootfs.sh\n\n# these tests fail in the unprivileged nix sandbox (without nix-daemon) as we break posix assumptions\nfor f in ./tests/chgrp/{basic.sh,recurse.sh,default-no-deref.sh,no-x.sh,posix-H.sh}; do\n  sed '2i echo Skipping chgrp && exit 77' -i \"$f\"\ndone\nfor f in gnulib-tests/{test-chown.c,test-fchownat.c,test-lchown.c}; do\n  echo \"int main() { return 77; }\" > \"$f\"\ndone\n\n# intermittent failures on builders, unknown reason\nsed '2i echo Skipping du basic test && exit 77' -i ./tests/du/basic.sh\n"; preInstall = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "9.4"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "PR_PROGRAM=/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4/bin/pr" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; mesonFlags = [ ]; name = "diffutils-3.10"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "info" ]; patches = [ ]; pname = "diffutils"; postPatch = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "diffutils-3.10.tar.xz"; outputHash = "sha256-kOXpPMck5OvhLt6A3xY0Bjx6hVaSaFkZv+YLVWyb0J4="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/diffutils/diffutils-3.10.tar.xz"; urls = [ "https://ftpmirror.gnu.org/diffutils/diffutils-3.10.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "diffutils-3.10.tar.xz"; out = «repeated»; outPath = "/nix/store/la8rdnwivnjapn0bmr14pk28qv82d4zb-diffutils-3.10.tar.xz"; outputHash = "sha256-kOXpPMck5OvhLt6A3xY0Bjx6hVaSaFkZv+YLVWyb0J4="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/diffutils/diffutils-3.10.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "3.10"; }; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "diffutils-3.10"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/f3g84l92p0njh0gyk1z7cp2k4qnh91ha-diffutils-3.10"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "diffutils"; postPatch = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "3.10"; } «repeated» { CFLAGS = [ ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "SORT=/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4/bin/sort" "--localstatedir=/var/cache" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { CFLAGS = [ ]; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ ]; mesonFlags = [ ]; name = "findutils-4.9.0"; nativeBuildInputs = [ ]; outputs = [ "out" "info" "locate" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/misc/findutils/no-install-statedir.patch ]; pname = "findutils"; postFixup = "moveToOutput share/man/man5 $locate\nmoveToOutput share/man/man1/locate.1.gz $locate\nmoveToOutput share/man/man1/updatedb.1.gz $locate\n"; postInstall = "moveToOutput bin/locate $locate\nmoveToOutput bin/updatedb $locate\n"; postPatch = "substituteInPlace xargs/xargs.c --replace 'char default_cmd[] = \"echo\";' 'char default_cmd[] = \"/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4/bin/echo\";'\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "findutils-4.9.0.tar.xz"; outputHash = "sha256-or+4wJ1DZ3DtxZ9Q+kg+eFsWGjt7nVR1c8sIBl/UYv4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/findutils/findutils-4.9.0.tar.xz"; urls = [ "https://ftpmirror.gnu.org/findutils/findutils-4.9.0.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "findutils-4.9.0.tar.xz"; out = «repeated»; outPath = "/nix/store/y954pl28vm03qfhvqrgyspwwv28b5lyi-findutils-4.9.0.tar.xz"; outputHash = "sha256-or+4wJ1DZ3DtxZ9Q+kg+eFsWGjt7nVR1c8sIBl/UYv4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/findutils/findutils-4.9.0.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.9.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ ]; info = <CODE>; inputDerivation = <CODE>; locate = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "findutils-4.9.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/sq0w0jchkjqbxl47h52kfwa33qp1adfh-findutils-4.9.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "findutils"; postFixup = "moveToOutput share/man/man5 $locate\nmoveToOutput share/man/man1/locate.1.gz $locate\nmoveToOutput share/man/man1/updatedb.1.gz $locate\n"; postInstall = "moveToOutput bin/locate $locate\nmoveToOutput bin/updatedb $locate\n"; postPatch = "substituteInPlace xargs/xargs.c --replace 'char default_cmd[] = \"echo\";' 'char default_cmd[] = \"/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4/bin/echo\";'\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "4.9.0"; } «repeated» { NIX_HARDENING_ENABLE = [ "fortify" "fortify3" "stackprotector" "pic" "strictoverflow" "format" "relro" "bindnow" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-libsigsegv" "--without-readline" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; hardeningDisable = [ "pie" ]; makeFlags = [ "AR=ar" ]; mesonFlags = [ ]; name = "gawk-5.2.2"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "info" "man" ]; patches = [ ]; pname = "gawk"; postInstall = "rm \"$out\"/bin/gawk-*\nln -s gawk.1 \"\${!outputMan}\"/share/man/man1/awk.1\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "gawk-5.2.2.tar.xz"; outputHash = "sha256-PB/OFEa0y+4c0nO9fsZLyH2J9hU3RxzT4F4zqWWiUOk="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/gawk/gawk-5.2.2.tar.xz"; urls = [ "https://ftpmirror.gnu.org/gawk/gawk-5.2.2.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "gawk-5.2.2.tar.xz"; out = «repeated»; outPath = "/nix/store/2ds3kha8b07phggryjzqad36q6gzgb23-gawk-5.2.2.tar.xz"; outputHash = "sha256-PB/OFEa0y+4c0nO9fsZLyH2J9hU3RxzT4F4zqWWiUOk="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/gawk/gawk-5.2.2.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "5.2.2"; }; drvPath = <CODE>; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; libsigsegv = null; makeFlags = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gawk-5.2.2"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/1713hchhyzawkxfhk9srxklv03bqj55y-gawk-5.2.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { libsigsegv = null; }; patches = [ ]; pname = "gawk"; postInstall = "rm \"$out\"/bin/gawk-*\nln -s gawk.1 \"\${!outputMan}\"/share/man/man1/awk.1\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "5.2.2"; } «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; mesonFlags = [ ]; name = "gnumake-4.4.1"; nativeBuildInputs = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "man" "info" "debug" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/build-managers/gnumake/0001-No-impure-bin-sh.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/build-managers/gnumake/0002-remove-impure-dirs.patch ]; pname = "gnumake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "make-4.4.1.tar.gz"; outputHash = "sha256-3Rb7HWe/q3mnL16DkHNcSePo5wtJRaFasfgd23hlj7M="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/make/make-4.4.1.tar.gz"; urls = [ "https://ftpmirror.gnu.org/make/make-4.4.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "make-4.4.1.tar.gz"; out = «repeated»; outPath = "/nix/store/0avnvyc7pkcr4pjqws7hwpy87m6wlnjc-make-4.4.1.tar.gz"; outputHash = "sha256-3Rb7HWe/q3mnL16DkHNcSePo5wtJRaFasfgd23hlj7M="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/make/make-4.4.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.4.1"; }; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnumake-4.4.1"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/452v8bl3sjaq4kil1d9vqxc5vns4cvpp-gnumake-4.4.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = «repeated»; pname = "gnumake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "4.4.1"; } «repeated» { PERL = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { PERL = null; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; mesonFlags = [ ]; name = "gnused-4.9"; nativeBuildInputs = [ «repeated» ]; outputs = [ "out" "info" ]; patches = [ ]; pname = "gnused"; preConfigure = "patchShebangs ./build-aux/help2man"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "sed-4.9.tar.xz"; outputHash = "sha256-biJrcy4c1zlGStaGK9Ghq6QteYKSLaelNRljHSSXUYE="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/sed/sed-4.9.tar.xz"; urls = [ "https://ftpmirror.gnu.org/sed/sed-4.9.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "sed-4.9.tar.xz"; out = «repeated»; outPath = "/nix/store/a2i83vprqrd9nkr116yy1ksrwz5y1vq9-sed-4.9.tar.xz"; outputHash = "sha256-biJrcy4c1zlGStaGK9Ghq6QteYKSLaelNRljHSSXUYE="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/sed/sed-4.9.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.9"; }; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnused-4.9"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/7fqp73ncnbwr5bxxszqicf6r33d9yhkw-gnused-4.9"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "gnused"; preConfigure = "patchShebangs ./build-aux/help2man"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "4.9"; } «repeated» { FORCE_UNSAFE_CONFIGURE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { FORCE_UNSAFE_CONFIGURE = ""; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; mesonFlags = [ ]; name = "gnutar-1.35"; nativeBuildInputs = [ ]; outputs = [ "out" "info" ]; patches = [ ]; pname = "gnutar"; postPatch = ""; preConfigure = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "tar-1.35.tar.xz"; outputHash = "sha256-TWL/NzQux67XSFNTI5MMfPlKz3HDWRiCsmp+pQ8+3BY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/tar/tar-1.35.tar.xz"; urls = [ "https://ftpmirror.gnu.org/tar/tar-1.35.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "tar-1.35.tar.xz"; out = «repeated»; outPath = "/nix/store/vijsp4ywmsvr6jk5ypbb8hszayn7bwdd-tar-1.35.tar.xz"; outputHash = "sha256-TWL/NzQux67XSFNTI5MMfPlKz3HDWRiCsmp+pQ8+3BY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/tar/tar-1.35.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "1.35"; }; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnutar-1.35"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/1y7cqy8y76gsx037mhs3cvb33srj4c7g-gnutar-1.35"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "gnutar"; postPatch = ""; preConfigure = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.35"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-pcre2-16" "--enable-pcre2-32" "--enable-jit=auto" "--enable-jit-sealloc" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; devdoc = <CODE>; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; mesonFlags = [ ]; name = "pcre2-10.42"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "doc" "man" "devdoc" ]; patches = [ ]; pname = "pcre2"; postFixup = "moveToOutput bin/pcre2-config \"$dev\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "pcre2-10.42.tar.bz2"; outputHash = "sha256-jTbNjLbqKkwrs1j/ZBGwx4hjOipF2rvxrrS3AdG16EA="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.bz2"; urls = [ "https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "pcre2-10.42.tar.bz2"; out = «repeated»; outPath = "/nix/store/n8ay9yxwgl07z3csb5hfp6m80qk3hzyl-pcre2-10.42.tar.bz2"; outputHash = "sha256-jTbNjLbqKkwrs1j/ZBGwx4hjOipF2rvxrrS3AdG16EA="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "10.42"; }; drvPath = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "pcre2-10.42"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; devdoc = <CODE>; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "pcre2-10.42"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/s17581vckgq5k3aiq3s3lavd7bixglw9-pcre2-10.42"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "pcre2"; postFixup = "moveToOutput bin/pcre2-config \"$dev\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "10.42"; }; outPath = "/nix/store/qqi65zz77m2hsy2w9y2bamc7w9k5cqw4-pcre2-10.42-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "pcre2"; postFixup = "moveToOutput bin/pcre2-config \"$dev\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "10.42"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/include\nln -sv /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include/iconv.h $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/include\nln -sv /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include/iconv.h $out/include\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "glibc-iconv-2.38"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "glibc-iconv-2.38"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/6l57yahih6a8mnl643g6hr5kyb5imank-glibc-iconv-2.38"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "gnugrep-3.11"; nativeBuildInputs = [ «repeated» { BASH_SHELL = "/bin/sh"; LOCALEDEF_FLAGS = [ "--little-endian" ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/locales-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-C" "--enable-add-ons" "--sysconfdir=/etc" "--enable-stack-protector=strong" "--enable-bind-now" "--without-headers" "--disable-profile" "--enable-fortify-source" "--enable-static-pie" "--enable-cet" ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { BASH_SHELL = "/bin/sh"; LOCALEDEF_FLAGS = «repeated»; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = false; extraNativeBuildInputs = [ «repeated» ]; installFlags = [ "sysconfdir=$(out)/etc" ]; installPhase = "mkdir -p \"$out/lib/locale\" \"$out/share/i18n\"\ncp -v \"$TMPDIR/$NIX_STORE/\"*\"/lib/locale/locale-archive\" \"$out/lib/locale\"\ncp -v ../glibc-2*/localedata/SUPPORTED \"$out/share/i18n/SUPPORTED\"\n"; is64bit = true; linuxHeaders = ""; makeFlags = [ "OBJCOPY=objcopy" "localedata/install-locales" "localedir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/lib/locale" ]; mesonFlags = [ ]; name = "glibc-locales-2.38-27"; nativeBuildInputs = [ «repeated» { CPPFLAGS = "-I/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include -I/nix/store/8p1rj4maax15sgvli1vwzjypnraqzwlw-bzip2-1.0.8-dev/include -I/nix/store/m68w0gd2avrmhj06yjrqqc8xqpn8yrfp-expat-2.5.0-dev/include -I/nix/store/v4kc00z3p33vicg586ig697lqlqq04r6-xz-5.4.5-dev/include -I/nix/store/c6230f2mc8s3kjvs9p01y9a0p8w0rr3c-libffi-3.4.4-dev/include -I/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/include"; LDFLAGS = "-L/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib -L/nix/store/971390xv13vzrhcrqp7ds3rr0hh92jn4-bzip2-1.0.8/lib -L/nix/store/lq1s9sv8wy6xnraphvk8dcrzn9566jyd-expat-2.5.0/lib -L/nix/store/zd47il8k6kz3b9jzlafax0il9w0mrmm3-xz-5.4.5/lib -L/nix/store/wvax0pswp2vqcki4hhigsv6q404r7z6p-libffi-3.4.4/lib -L/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/lib"; LIBS = "-lcrypt"; NIX_LDFLAGS = "-lgcc_s"; PYTHONHASHSEED = 0; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "expat-2.5.0"; nativeBuildInputs = [ ]; outputBin = "dev"; outputMan = "dev"; outputs = [ "out" "dev" ]; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "expat-2.5.0.tar.xz"; outputHash = "1gnwihpfz4x18rwd6cbrdggmfqjzwsdfh1gpmc0ph21c4gq2097g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz"; urls = [ "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "expat-2.5.0.tar.xz"; out = «repeated»; outPath = "/nix/store/z0dk90vlwlhm097kka2632wmnjr0izw2-expat-2.5.0.tar.xz"; outputHash = "1gnwihpfz4x18rwd6cbrdggmfqjzwsdfh1gpmc0ph21c4gq2097g"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.5.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "expat-2.5.0"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "expat-2.5.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/lq1s9sv8wy6xnraphvk8dcrzn9566jyd-expat-2.5.0"; outputBin = "dev"; outputMan = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { tests = <CODE>; }; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "2.5.0"; }; outPath = "/nix/store/m68w0gd2avrmhj06yjrqqc8xqpn8yrfp-expat-2.5.0-dev"; outputBin = "dev"; outputMan = "dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = [ ]; pname = "expat"; postFixup = "substituteInPlace $dev/lib/cmake/expat-2.5.0/expat-noconfig.cmake \\\n  --replace \"$\"'{_IMPORT_PREFIX}' $out\n"; preCheck = "patchShebangs ./run.sh ./test-driver-wrapper.sh\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "2.5.0"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-gcc-arch=generic" "--enable-pax_emutramp" "--build=x86_64-unknown-linux-gnu" "--host=x86_64-unknown-linux-gnu" ]; configurePlatforms = [ "build" "host" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontStrip = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontStrip = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "man" "info" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/libffi/fix-implicit-fun-decl.patch ]; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libffi-3.4.4.tar.gz"; outputHash = "sha256-1mxWrSWags8qnfxAizK/XaUjcVALhHRff7i2RXEt9nY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"; urls = [ "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libffi-3.4.4.tar.gz"; out = «repeated»; outPath = "/nix/store/pgxpq0lmk4bd0yybaxkb82qlcjx55apn-libffi-3.4.4.tar.gz"; outputHash = "sha256-1mxWrSWags8qnfxAizK/XaUjcVALhHRff7i2RXEt9nY="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "3.4.4"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; dontStrip = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libffi-3.4.4"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/wvax0pswp2vqcki4hhigsv6q404r7z6p-libffi-3.4.4"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { updateScript = <CODE>; }; patches = «repeated»; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "3.4.4"; }; outPath = "/nix/store/c6230f2mc8s3kjvs9p01y9a0p8w0rr3c-libffi-3.4.4-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "libffi"; preCheck = "# The tests use -O0 which is not compatible with -D_FORTIFY_SOURCE.\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify3/}\nNIX_HARDENING_ENABLE=\${NIX_HARDENING_ENABLE/fortify/}\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; updateScript = <CODE>; userHook = null; version = "3.4.4"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--enable-hashes=strong" "--enable-obsolete-api=glibc" "--disable-failure-tokens" "--disable-werror" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; makeFlags = [ ]; mesonFlags = [ ]; name = "libxcrypt-4.4.36"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildEnv = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "-de" "-Dcc=cc" "-Uinstallusrbinperl" "-Dinstallstyle=lib/perl5" "-Duseshrplib" "-Dlocincpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/include" "-Dloclibpth=/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles/lib" "-A clear:d_crypt_r" "-Dprefix=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9" "-Dman1dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man1" "-Dman3dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/share/man/man3" ]; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; devdoc = <CODE>; disallowedReferences = [ "/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-" ]; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = [ ]; configureScript = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash ./Configure"; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = «repeated»; doCheck = false; doInstallCheck = false; dontAddPrefix = true; dontAddStaticConfigureFlags = true; enableParallelBuilding = false; mesonFlags = [ ]; name = "perl-5.38.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "devdoc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/no-sys-dirs-5.38.0.patch ]; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = [ "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "perl-5.38.2.tar.gz"; out = «repeated»; outPath = "/nix/store/mp5jcbm1hjqw4ckxvrm7k0pfhhjf3dbg-perl-5.38.2.tar.gz"; outputHash = "sha256-oKMVNEUet7g8fWWUpJdUOlTUiLyQygD140diV39AZV4="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://cpan.metacpan.org/src/5.0/perl-5.38.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "5.38.2"; }; drvPath = <CODE>; enableParallelBuilding = false; inputDerivation = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "perl-5.38.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/r7qkjq0k6ciwsfy1h74srycg7al63xq6-perl-5.38.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; interpreter = <CODE>; libPrefix = "lib/perl5/site_perl"; perlOnBuild = <CODE>; pkgs = <CODE>; withPackages = <CODE>; }; patches = «repeated»; perlOnBuild = <CODE>; pkgs = <CODE>; pname = "perl"; postInstall = "# Remove dependency between \"out\" and \"man\" outputs.\nrm \"$out\"/lib/perl5/*/*/.packlist\n\n# Remove dependencies on glibc and gcc\nsed \"/ *libpth =>/c    libpth => ' ',\" \\\n  -i \"$out\"/lib/perl5/*/*/Config.pm\n# TODO: removing those paths would be cleaner than overwriting with nonsense.\nsubstituteInPlace \"$out\"/lib/perl5/*/*/Config_heavy.pl \\\n  --replace \"/nix/store/w91rvcns1pp8pjg84sjlwsr2w1r8hlp3-bootstrap-stage0-glibc-bootstrapFiles\" /no-such-path \\\n  --replace \"/nix/store/04my72vw6hh6zdg2j11gyvbkf7lxg9n0-bootstrap-stage1-gcc-wrapper-\" /no-such-path \\\n  --replace \"/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools\" /no-such-path \\\n  --replace \"$man\" /no-such-path\n"; postPatch = "substituteInPlace dist/PathTools/Cwd.pm \\\n  --replace \"/bin/pwd\" \"$(type -P pwd)\"\nunset src\n"; preConfigure = "cat > config.over <<EOF\nosvers=\"gnulinux\"\nmyuname=\"nixpkgs\"\nmyhostname=\"nixpkgs\"\ncf_by=\"nixpkgs\"\ncf_time=\"$(date -d \"@$SOURCE_DATE_EPOCH\")\"\nEOF\n\n# Compress::Raw::Zlib should use our zlib package instead of the one\n# included with the distribution\ncat > ./cpan/Compress-Raw-Zlib/config.in <<EOF\nBUILD_ZLIB   = False\nINCLUDE      = /nix/store/2df216wz8d4aq59rm82g6ax1rbyipndf-zlib-1.3-dev/include\nLIB          = /nix/store/7jh99xayxzcgzf0grvmxrncb79yr07jg-zlib-1.3/lib\nOLD_ZLIB     = False\nGZIP_OS_CODE = AUTO_DETECT\nUSE_ZLIB_NG  = False\nEOF\n# We need to do this because the bootstrap doesn't have a static libpthread\nsed -i 's,\\(libswanted.*\\)pthread,\\1,g' Configure\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setOutputFlags = false; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/perl/setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "5.38.2"; withPackages = <CODE>; } ]; outputs = [ "out" "man" ]; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = [ "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libxcrypt-4.4.36.tar.xz"; out = «repeated»; outPath = "/nix/store/f76sw6av28v3cv6nxmqw190pkpnfnw9b-libxcrypt-4.4.36.tar.xz"; outputHash = "sha256-5eH0yu4KAd4q7ibjE4gH1tPKK45nKHlm0f79ZeH9iUM="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "4.4.36"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; enabledCryptSchemeIds = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libxcrypt-4.4.36"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { enabledCryptSchemeIds = <CODE>; tests = <CODE>; }; patches = [ ]; pname = "libxcrypt"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "4.4.36"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--without-ensurepip" "--with-system-expat" "--with-system-ffi" "--enable-shared" "CFLAGS=-I/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/include" "LIBS=-L/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/lib" "ac_cv_func_lchmod=no" ]; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = [ ]; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { CPPFLAGS = "-I/nix/store/fak09pxs42fqcgngf2yznw83f88kmw7s-zlib-1.3-dev/include -I/nix/store/8p1rj4maax15sgvli1vwzjypnraqzwlw-bzip2-1.0.8-dev/include -I/nix/store/m68w0gd2avrmhj06yjrqqc8xqpn8yrfp-expat-2.5.0-dev/include -I/nix/store/v4kc00z3p33vicg586ig697lqlqq04r6-xz-5.4.5-dev/include -I/nix/store/c6230f2mc8s3kjvs9p01y9a0p8w0rr3c-libffi-3.4.4-dev/include -I/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/include"; LDFLAGS = "-L/nix/store/lprrvg44cyn9ajpq77lh7rlnp4kzdqzs-zlib-1.3/lib -L/nix/store/971390xv13vzrhcrqp7ds3rr0hh92jn4-bzip2-1.0.8/lib -L/nix/store/lq1s9sv8wy6xnraphvk8dcrzn9566jyd-expat-2.5.0/lib -L/nix/store/zd47il8k6kz3b9jzlafax0il9w0mrmm3-xz-5.4.5/lib -L/nix/store/wvax0pswp2vqcki4hhigsv6q404r7z6p-libffi-3.4.4/lib -L/nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36/lib"; LIBS = "-lcrypt"; NIX_LDFLAGS = "-lgcc_s"; PYTHONHASHSEED = 0; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; disallowedReferences = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "python3-minimal-3.11.6"; nativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; addFlags = [ ]; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; baseBinName = "pkg-config"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; doc = <CODE>; dontBuild = true; dontConfigure = true; dontUnpack = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addFlags = [ ]; args = «repeated»; baseBinName = "pkg-config"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\n\necho $pkg-config > $out/nix-support/orig-pkg-config\n\nwrap pkg-config /nix/store/lypyhrdqir7lhwhsvrr1cp85ywh3dhas-pkg-config-wrapper.sh \"/nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2/bin/pkg-config\"\nln -s /nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2/share $out/share\n"; mesonFlags = [ ]; name = "pkg-config-wrapper-0.29.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "doc" ]; patches = [ ]; pname = "pkg-config-wrapper"; postFixup = "printWords /nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2 > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/ihg6xadfnp1bmrpa4h9v5sm26wq9z3wx-pkg-config-0.29.2-man $man\nln -s /nix/store/w7fjbbz525ndaj48761s4yjkf6y7ax62-pkg-config-0.29.2-doc $doc\nsubstituteAll /nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/pkg-config-wrapper/setup-hook.sh ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; userHook = null; version = "0.29.2"; wrapperName = "PKG_CONFIG_WRAPPER"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\n\necho $pkg-config > $out/nix-support/orig-pkg-config\n\nwrap pkg-config /nix/store/lypyhrdqir7lhwhsvrr1cp85ywh3dhas-pkg-config-wrapper.sh \"/nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2/bin/pkg-config\"\nln -s /nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2/share $out/share\n"; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "pkg-config-wrapper-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/7rgpm380gvq4i8h384jq6cy62x4gn1sq-pkg-config-wrapper-0.29.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { pkg-config = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-internal-glib" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "doc" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/pkg-config/requires-private.patch ]; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "pkg-config-0.29.2.tar.gz"; outputHash = "14fmwzki1rlz8bs2p810lk6jqdxsk966d8drgsjmi54cd00rrikg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"; urls = [ "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "pkg-config-0.29.2.tar.gz"; out = «repeated»; outPath = "/nix/store/83haczzqmdmjjaf73y4fnk1zkcfai9zf-pkg-config-0.29.2.tar.gz"; outputHash = "14fmwzki1rlz8bs2p810lk6jqdxsk966d8drgsjmi54cd00rrikg"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.29.2"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = { available = <CODE>; broken = false; description = "A tool that allows packages to find out information about other packages"; homepage = "http://pkg-config.freedesktop.org/wiki/"; insecure = <CODE>; license = «repeated»; mainProgram = "pkg-config"; name = <CODE>; outputsToInstall = <CODE>; platforms = «repeated»; position = <CODE>; unfree = <CODE>; unsupported = <CODE>; }; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = { NIX_CFLAGS_COMPILE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; doc = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; outPath = "/nix/store/ihg6xadfnp1bmrpa4h9v5sm26wq9z3wx-pkg-config-0.29.2-man"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/w7fjbbz525ndaj48761s4yjkf6y7ax62-pkg-config-0.29.2-doc"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.29.2"; }; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "pkg-config-0.29.2"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = «repeated»; pname = "pkg-config"; postInstall = "rm -f \"$out\"/bin/*-pkg-config"; postPatch = "rm -f check/check-requires-private check/check-gtk check/missing\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "0.29.2"; }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pkg-config = «repeated»; pname = "pkg-config-wrapper"; postFixup = "printWords /nix/store/vhzghggzdg9kp59xf61zjgiapgq3r4iw-pkg-config-0.29.2 > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/ihg6xadfnp1bmrpa4h9v5sm26wq9z3wx-pkg-config-0.29.2-man $man\nln -s /nix/store/w7fjbbz525ndaj48761s4yjkf6y7ax62-pkg-config-0.29.2-doc $doc\nsubstituteAll /nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; userHook = null; version = "0.29.2"; wrapperName = "PKG_CONFIG_WRAPPER"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ «repeated» ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "autoconf-archive-2023.02.20"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "autoconf-archive"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "autoconf-archive-2023.02.20.tar.xz"; outputHash = "sha256-cdQEhHmuKPH1eUYZw9ct+cAd9JscYo74X943WW3DGjM="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz"; urls = [ "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "autoconf-archive-2023.02.20.tar.xz"; out = «repeated»; outPath = "/nix/store/pq4bmqcrz01fmb601qkmfk49454dv5m9-autoconf-archive-2023.02.20.tar.xz"; outputHash = "sha256-cdQEhHmuKPH1eUYZw9ct+cAd9JscYo74X943WW3DGjM="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2023.02.20.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2023.02.20"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "autoconf-archive-2023.02.20"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/fnibbpc2p2wdslx2d3rarac58rw517ly-autoconf-archive-2023.02.20"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "autoconf-archive"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2023.02.20"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUnpack = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $out/bin\nsubstituteAll /nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh $out/bin/nuke-refs\nchmod a+x $out/bin/nuke-refs\n"; mesonFlags = [ ]; name = "nuke-references"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; perl = «repeated»; postFixup = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; signingUtils = ""; stdenv = «repeated»; storeDir = "/nix/store"; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin\nsubstituteAll /nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh $out/bin/nuke-refs\nchmod a+x $out/bin/nuke-refs\n"; mesonFlags = [ ]; meta = <CODE>; name = "nuke-references"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/y89i54r8948vp2n8yh6skxssi5fay1p7-nuke-references"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; perl = «repeated»; postFixup = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; shell = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; signingUtils = ""; stdenv = «repeated»; storeDir = "/nix/store"; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; } /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/separate-debug-info.sh ]; outputs = [ "out" "debug" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.11/no-ldconfig.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/virtualenv-permissions.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.11/darwin-libutil.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.8/0001-On-all-posix-systems-not-just-Darwin-set-LDSHARED-if.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/3.7/fix-finding-headers-when-cross-compiling.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/loongarch-support.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/interpreters/python/cpython/platform-triplet-detection.patch ]; pname = "python3-minimal"; postFixup = "cat << \"EOF\" >> \"$out/nix-support/setup-hook\"\nsysconfigdataHook() {\n  if [ \"$1\" = '/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9' ]; then\n    export _PYTHON_HOST_PLATFORM='linux-x86_64'\n    export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'\n  fi\n}\n\naddEnvHooks \"$hostOffset\" sysconfigdataHook\n\nEOF\n"; postInstall = "# needed for some packages, especially packages that backport functionality\n# to 2.x from 3.x\nfor item in $out/lib/python3.11/test/*; do\n  if [[ \"$item\" != */test_support.py*\n     && \"$item\" != */test/support\n     && \"$item\" != */test/libregrtest\n     && \"$item\" != */test/regrtest.py* ]]; then\n    rm -rf \"$item\"\n  else\n    echo $item\n  fi\ndone\ntouch $out/lib/python3.11/test/__init__.py\n\n# Determinism: Windows installers were not deterministic.\n# We're also not interested in building Windows installers.\nfind \"$out\" -name 'wininst*.exe' | xargs -r rm -f\n\n# Use Python3 as default python\nln -s \"$out/bin/idle3\" \"$out/bin/idle\"\nln -s \"$out/bin/pydoc3\" \"$out/bin/pydoc\"\nln -s \"$out/bin/python3\" \"$out/bin/python\"\nln -s \"$out/bin/python3-config\" \"$out/bin/python-config\"\nln -s \"$out/lib/pkgconfig/python3.pc\" \"$out/lib/pkgconfig/python.pc\"\nln -sL \"$out/share/man/man1/python3.1.gz\" \"$out/share/man/man1/python.1.gz\"\n\n# Get rid of retained dependencies on -dev packages, and remove\n# some $TMPDIR references to improve binary reproducibility.\n# Note that the .pyc file of _sysconfigdata.py should be regenerated!\nfor i in $out/lib/python3.11/_sysconfigdata*.py $out/lib/python3.11/config-311*/Makefile; do\n   sed -i $i -e \"s|$TMPDIR|/no-such-path|g\"\ndone\n\n# Further get rid of references. https://github.com/NixOS/nixpkgs/issues/51668\nfind $out/lib/python*/config-* -type f -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36 '{}' +\nfind $out/lib -name '_sysconfigdata*.py*' -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36 '{}' +\n\n# Make the sysconfigdata module accessible on PYTHONPATH\n# This allows build Python to import host Python's sysconfigdata\nmkdir -p \"$out/lib/python3.11/site-packages\"\nln -s \"$out/lib/python3.11/\"_sysconfigdata*.py \"$out/lib/python3.11/site-packages/\"\nrm -R $out/bin/python*-config $out/lib/python*/config-*\n# Strip IDLE (and turtledemo, which uses it)\nrm -R $out/bin/idle* $out/lib/python*/{idlelib,turtledemo}\nrm -R $out/lib/python*/tkinter\n# Strip tests\nrm -R $out/lib/python*/test $out/lib/python*/**/test{,s}\n# Determinism: deterministic bytecode\n# First we delete all old bytecode.\nfind $out -type d -name __pycache__ -print0 | xargs -0 -I {} rm -rf \"{}\"\n# *strip* shebang from libpython gdb script - it should be dual-syntax and\n# interpretable by whatever python the gdb in question is using, which may\n# not even match the major version of this python. doing this after the\n# bytecode compilations for the same reason - we don't want bytecode generated.\nmkdir -p $out/share/gdb\nsed '/^#!/d' Tools/gdb/libpython.py > $out/share/gdb/libpython.py\n\n# Disable system-wide pip installation. See https://peps.python.org/pep-0668/.\ncat <<'EXTERNALLY_MANAGED' > $out/lib/python3.11/EXTERNALLY-MANAGED\n[externally-managed]\nError=This command has been disabled as it tries to modify the immutable\n `/nix/store` filesystem.\n\n To use Python with Nix and nixpkgs, have a look at the online documentation:\n <https://nixos.org/manual/nixpkgs/stable/#python>.\nEXTERNALLY_MANAGED\n"; postPatch = "substituteInPlace Lib/subprocess.py \\\n  --replace \"'/bin/sh'\" \"'/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/sh'\"\n"; preConfigure = "for i in /usr /sw /opt /pkg; do\t# improve purity\n  substituteInPlace ./setup.py --replace $i /no-such-path\ndone\nexport CFLAGS_NODIST=\"-fno-semantic-interposition\"\n"; preFixup = ""; prePatch = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; setupHook = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "cp /nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh hook.sh\nsubstituteAllInPlace hook.sh\nmv hook.sh $out\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "cp /nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh hook.sh\nsubstituteAllInPlace hook.sh\nmv hook.sh $out\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "python-setup-hook.sh"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; sitePackages = "lib/python3.11/site-packages"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "python-setup-hook.sh"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/xnzz9qiwwqisgzqjyhlrh5m7xi7gqyw7-python-setup-hook.sh"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; sitePackages = "lib/python3.11/site-packages"; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; }; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "Python-3.11.6.tar.xz"; outputHash = "sha256-D6t4+n8TP084IQxiYNkNfA1ccZhEZBnOBX7HrC5vXzg="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz"; urls = [ "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "Python-3.11.6.tar.xz"; out = «repeated»; outPath = "/nix/store/a4lf6qfpyy544fjc7jqzr21i2g2kph9k-Python-3.11.6.tar.xz"; outputHash = "sha256-D6t4+n8TP084IQxiYNkNfA1ccZhEZBnOBX7HrC5vXzg="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "3.11.6"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; executable = <CODE>; hasDistutilsCxxPatch = false; implementation = "cpython"; inputDerivation = <CODE>; interpreter = <CODE>; isPy2 = <CODE>; isPy27 = <CODE>; isPy3 = true; isPy310 = <CODE>; isPy311 = <CODE>; isPy312 = <CODE>; isPy37 = false; isPy38 = <CODE>; isPy39 = <CODE>; isPy3k = true; isPyPy = <CODE>; libPrefix = "python3.11"; mesonFlags = [ ]; meta = <CODE>; name = "python3-minimal-3.11.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/hqwd38kifflkygpxjmygjzvbv253i1sf-python3-minimal-3.11.6"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { buildEnv = <CODE>; doc = <CODE>; executable = <CODE>; hasDistutilsCxxPatch = false; implementation = "cpython"; interpreter = <CODE>; isPy2 = <CODE>; isPy27 = <CODE>; isPy3 = true; isPy310 = <CODE>; isPy311 = <CODE>; isPy312 = <CODE>; isPy37 = false; isPy38 = <CODE>; isPy39 = <CODE>; isPy3k = true; isPyPy = <CODE>; libPrefix = "python3.11"; pkgs = <CODE>; pythonAtLeast = <LAMBDA>; pythonAttr = "python3Minimal"; pythonForBuild = <CODE>; pythonOlder = <LAMBDA>; pythonOnBuildForHost = <CODE>; pythonVersion = "3.11"; sitePackages = "lib/python3.11/site-packages"; sourceVersion = { major = "3"; minor = "11"; patch = "6"; suffix = ""; }; tests = <CODE>; withPackages = <CODE>; }; patches = «repeated»; pkgs = <CODE>; pname = "python3-minimal"; postFixup = "cat << \"EOF\" >> \"$out/nix-support/setup-hook\"\nsysconfigdataHook() {\n  if [ \"$1\" = '/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9' ]; then\n    export _PYTHON_HOST_PLATFORM='linux-x86_64'\n    export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'\n  fi\n}\n\naddEnvHooks \"$hostOffset\" sysconfigdataHook\n\nEOF\n"; postInstall = "# needed for some packages, especially packages that backport functionality\n# to 2.x from 3.x\nfor item in $out/lib/python3.11/test/*; do\n  if [[ \"$item\" != */test_support.py*\n     && \"$item\" != */test/support\n     && \"$item\" != */test/libregrtest\n     && \"$item\" != */test/regrtest.py* ]]; then\n    rm -rf \"$item\"\n  else\n    echo $item\n  fi\ndone\ntouch $out/lib/python3.11/test/__init__.py\n\n# Determinism: Windows installers were not deterministic.\n# We're also not interested in building Windows installers.\nfind \"$out\" -name 'wininst*.exe' | xargs -r rm -f\n\n# Use Python3 as default python\nln -s \"$out/bin/idle3\" \"$out/bin/idle\"\nln -s \"$out/bin/pydoc3\" \"$out/bin/pydoc\"\nln -s \"$out/bin/python3\" \"$out/bin/python\"\nln -s \"$out/bin/python3-config\" \"$out/bin/python-config\"\nln -s \"$out/lib/pkgconfig/python3.pc\" \"$out/lib/pkgconfig/python.pc\"\nln -sL \"$out/share/man/man1/python3.1.gz\" \"$out/share/man/man1/python.1.gz\"\n\n# Get rid of retained dependencies on -dev packages, and remove\n# some $TMPDIR references to improve binary reproducibility.\n# Note that the .pyc file of _sysconfigdata.py should be regenerated!\nfor i in $out/lib/python3.11/_sysconfigdata*.py $out/lib/python3.11/config-311*/Makefile; do\n   sed -i $i -e \"s|$TMPDIR|/no-such-path|g\"\ndone\n\n# Further get rid of references. https://github.com/NixOS/nixpkgs/issues/51668\nfind $out/lib/python*/config-* -type f -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36 '{}' +\nfind $out/lib -name '_sysconfigdata*.py*' -print -exec nuke-refs -e /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9 -e /nix/store/9zgichc95q6g7b4pmwc7qs1ijwxf625g-libxcrypt-4.4.36 '{}' +\n\n# Make the sysconfigdata module accessible on PYTHONPATH\n# This allows build Python to import host Python's sysconfigdata\nmkdir -p \"$out/lib/python3.11/site-packages\"\nln -s \"$out/lib/python3.11/\"_sysconfigdata*.py \"$out/lib/python3.11/site-packages/\"\nrm -R $out/bin/python*-config $out/lib/python*/config-*\n# Strip IDLE (and turtledemo, which uses it)\nrm -R $out/bin/idle* $out/lib/python*/{idlelib,turtledemo}\nrm -R $out/lib/python*/tkinter\n# Strip tests\nrm -R $out/lib/python*/test $out/lib/python*/**/test{,s}\n# Determinism: deterministic bytecode\n# First we delete all old bytecode.\nfind $out -type d -name __pycache__ -print0 | xargs -0 -I {} rm -rf \"{}\"\n# *strip* shebang from libpython gdb script - it should be dual-syntax and\n# interpretable by whatever python the gdb in question is using, which may\n# not even match the major version of this python. doing this after the\n# bytecode compilations for the same reason - we don't want bytecode generated.\nmkdir -p $out/share/gdb\nsed '/^#!/d' Tools/gdb/libpython.py > $out/share/gdb/libpython.py\n\n# Disable system-wide pip installation. See https://peps.python.org/pep-0668/.\ncat <<'EXTERNALLY_MANAGED' > $out/lib/python3.11/EXTERNALLY-MANAGED\n[externally-managed]\nError=This command has been disabled as it tries to modify the immutable\n `/nix/store` filesystem.\n\n To use Python with Nix and nixpkgs, have a look at the online documentation:\n <https://nixos.org/manual/nixpkgs/stable/#python>.\nEXTERNALLY_MANAGED\n"; postPatch = "substituteInPlace Lib/subprocess.py \\\n  --replace \"'/bin/sh'\" \"'/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/sh'\"\n"; preConfigure = "for i in /usr /sw /opt /pkg; do\t# improve purity\n  substituteInPlace ./setup.py --replace $i /no-such-path\ndone\nexport CFLAGS_NODIST=\"-fno-semantic-interposition\"\n"; preFixup = ""; prePatch = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; pythonAtLeast = <LAMBDA>; pythonAttr = "python3Minimal"; pythonForBuild = <CODE>; pythonOlder = <LAMBDA>; pythonOnBuildForHost = <CODE>; pythonVersion = "3.11"; separateDebugInfo = true; setupHook = «repeated»; sitePackages = "lib/python3.11/site-packages"; sourceVersion = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = <CODE>; userHook = null; version = "3.11.6"; withPackages = <CODE>; } «repeated» ]; outputs = [ "out" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/2.38-master.patch.gz /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/nix-locale-archive.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/dont-use-system-ld-so-cache.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/dont-use-system-ld-so-preload.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/fix_path_attribute_in_getconf.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/fix-x64-abi.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/nix-nss-open-files.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/0001-Revert-Remove-all-usage-of-BASH-or-BASH-in-installed.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/libraries/glibc/reenable_DT_HASH.patch ]; pname = "glibc-locales"; postInstall = "moveToOutput bin/getent $getent\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = "# Awful hack: `localedef' doesn't allow the path to `locale-archive'\n# to be overriden, but you *can* specify a prefix, i.e. it will use\n# <prefix>/<path-to-glibc>/lib/locale/locale-archive.  So we use\n# $TMPDIR as a prefix, meaning that the locale-archive is placed in\n# $TMPDIR/nix/store/...-glibc-.../lib/locale/locale-archive.\nLOCALEDEF_FLAGS+=\" --prefix=$TMPDIR\"\n\nmkdir -p $TMPDIR/\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/locale\"\n\necho 'C.UTF-8/UTF-8 \\' >> ../glibc-2*/localedata/SUPPORTED\n\n# Hack to allow building of the locales (needed since glibc-2.12)\nsed -i -e 's,^$(rtld-prefix) $(common-objpfx)locale/localedef,localedef $(LOCALEDEF_FLAGS),' ../glibc-2*/localedata/Makefile\n"; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib OBJDUMP=/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40/bin/objdump\"\n\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; allowSubstitutes = false; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "target=$out''\nmkdir -p \"$(dirname \"$target\")\"\n\nif [ -e \"$textPath\" ]; then\n  mv \"$textPath\" \"$target\"\nelse\n  echo -n \"$text\" > \"$target\"\nfi\n\nif [ -n \"$executable\" ]; then\n  chmod +x \"$target\"\nfi\n\neval \"$checkPhase\"\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkPhase = ""; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; allowSubstitutes = false; args = «repeated»; buildCommand = "target=$out''\nmkdir -p \"$(dirname \"$target\")\"\n\nif [ -e \"$textPath\" ]; then\n  mv \"$textPath\" \"$target\"\nelse\n  echo -n \"$text\" > \"$target\"\nfi\n\nif [ -n \"$executable\" ]; then\n  chmod +x \"$target\"\nfi\n\neval \"$checkPhase\"\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; checkPhase = ""; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; executable = false; mesonFlags = [ ]; name = "locales-setup-hook.sh"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" "text" ]; patches = [ ]; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; text = "export LOCALE_ARCHIVE=@out@/lib/locale/locale-archive\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; executable = false; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "locales-setup-hook.sh"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/kbxk1320a96rkqwj0ybi68lqnbnvi1w0-locales-setup-hook.sh"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; text = "export LOCALE_ARCHIVE=@out@/lib/locale/locale-archive\n"; type = "derivation"; userHook = null; }; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "glibc-2.38.tar.xz"; outputHash = "sha256-+4KZiZiyspllRnvBtp0VLpwwfSzzAcnq+0VVt3DvP9I="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz"; urls = [ "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "glibc-2.38.tar.xz"; out = «repeated»; outPath = "/nix/store/05d0yccrkp8pl5c6my29cxzzqb7a9az8-glibc-2.38.tar.xz"; outputHash = "sha256-+4KZiZiyspllRnvBtp0VLpwwfSzzAcnq+0VVt3DvP9I="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/glibc/glibc-2.38.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.38-27"; }; drvPath = <CODE>; enableParallelBuilding = false; extraNativeBuildInputs = «repeated»; inputDerivation = <CODE>; installFlags = «repeated»; installPhase = "mkdir -p \"$out/lib/locale\" \"$out/share/i18n\"\ncp -v \"$TMPDIR/$NIX_STORE/\"*\"/lib/locale/locale-archive\" \"$out/lib/locale\"\ncp -v ../glibc-2*/localedata/SUPPORTED \"$out/share/i18n/SUPPORTED\"\n"; is64bit = true; linuxHeaders = ""; makeFlags = «repeated»; mesonFlags = [ ]; meta = <CODE>; minorRelease = "2.38"; name = "glibc-locales-2.38-27"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/igvg7swyii3pjgpmhfvrf19hln1ahhfm-glibc-locales-2.38-27"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { minorRelease = "2.38"; version = "2.38"; }; patches = «repeated»; pname = "glibc-locales"; postInstall = "moveToOutput bin/getent $getent\n"; postPatch = "# Needed for glibc to build with the gnumake 3.82\n# http://comments.gmane.org/gmane.linux.lfs.support/31227\nsed -i 's/ot \\$/ot:\\n\\ttouch $@\\n$/' manual/Makefile\n\n# nscd needs libgcc, and we don't want it dynamically linked\n# because we don't want it to depend on bootstrap-tools libs.\necho \"LDFLAGS-nscd += -static-libgcc\" >> nscd/Makefile\n\n# Ensure that `__nss_files_fopen` can still be wrapped by `libredirect`.\nsed -i -e '/libc_hidden_def (__nss_files_fopen)/d' nss/nss_files_fopen.c\nsed -i -e '/libc_hidden_proto (__nss_files_fopen)/d' include/nss_files.h\n\n# Ensure that libidn2 is found.\npatch -p 1 <<EOF\n--- a/inet/idna.c\n+++ b/inet/idna.c\n@@ -25,1 +25,1 @@\n-#define LIBIDN2_SONAME \"libidn2.so.0\"\n+#define LIBIDN2_SONAME \"/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4/lib/libidn2.so.0\"\nEOF\n"; preBuild = "# Awful hack: `localedef' doesn't allow the path to `locale-archive'\n# to be overriden, but you *can* specify a prefix, i.e. it will use\n# <prefix>/<path-to-glibc>/lib/locale/locale-archive.  So we use\n# $TMPDIR as a prefix, meaning that the locale-archive is placed in\n# $TMPDIR/nix/store/...-glibc-.../lib/locale/locale-archive.\nLOCALEDEF_FLAGS+=\" --prefix=$TMPDIR\"\n\nmkdir -p $TMPDIR/\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/locale\"\n\necho 'C.UTF-8/UTF-8 \\' >> ../glibc-2*/localedata/SUPPORTED\n\n# Hack to allow building of the locales (needed since glibc-2.12)\nsed -i -e 's,^$(rtld-prefix) $(common-objpfx)locale/localedef,localedef $(LOCALEDEF_FLAGS),' ../glibc-2*/localedata/Makefile\n"; preConfigure = "export PWD_P=$(type -tP pwd)\nfor i in configure io/ftwtest-sh; do\n    # Can't use substituteInPlace here because replace hasn't been\n    # built yet in the bootstrap.\n    sed -i \"$i\" -e \"s^/bin/pwd^$PWD_P^g\"\ndone\n\nmkdir ../build\ncd ../build\n\nconfigureScript=\"`pwd`/../$sourceRoot/configure\"\n\nmakeFlags=\"$makeFlags BUILD_LDFLAGS=-Wl,-rpath,/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib OBJDUMP=/nix/store/ng08cklg5bdfdla7glbclzfd9mj0c56n-binutils-patchelfed-ld-2.40/bin/objdump\"\n\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.38"; } ]; outputs = [ "out" "info" ]; patches = [ ]; pname = "gnugrep"; postInstall = "rm $out/bin/egrep $out/bin/fgrep\necho \"#! /bin/sh\" > $out/bin/egrep\necho \"exec $out/bin/grep -E \\\"\\$@\\\"\" >> $out/bin/egrep\necho \"#! /bin/sh\" > $out/bin/fgrep\necho \"exec $out/bin/grep -F \\\"\\$@\\\"\" >> $out/bin/fgrep\nchmod +x $out/bin/egrep $out/bin/fgrep\n"; postPatch = null; preConfigure = "export MKDIR_P=\"mkdir -p\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "grep-3.11.tar.xz"; outputHash = "sha256-HbKu3eidDepCsW2VKPiUyNFdrk4ZC1muzHj1qVEnbqs="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/grep/grep-3.11.tar.xz"; urls = [ "https://ftpmirror.gnu.org/grep/grep-3.11.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "grep-3.11.tar.xz"; out = «repeated»; outPath = "/nix/store/hp60h60jc6n6c0krgmjqi60lqgl7kvij-grep-3.11.tar.xz"; outputHash = "sha256-HbKu3eidDepCsW2VKPiUyNFdrk4ZC1muzHj1qVEnbqs="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/grep/grep-3.11.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "3.11"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnugrep-3.11"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/by6918gg7srjyixqk8kbcdlz82d5pcwx-gnugrep-3.11"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { pcre2 = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = <CODE>; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; devdoc = <CODE>; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "pcre2-10.42"; nativeBuildInputs = [ ]; out = «repeated»; outPath = <CODE>; outputName = "bin"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "pcre2"; postFixup = "moveToOutput bin/pcre2-config \"$dev\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "10.42"; }; }; patches = [ ]; pcre2 = «repeated»; pname = "gnugrep"; postInstall = "rm $out/bin/egrep $out/bin/fgrep\necho \"#! /bin/sh\" > $out/bin/egrep\necho \"exec $out/bin/grep -E \\\"\\$@\\\"\" >> $out/bin/egrep\necho \"#! /bin/sh\" > $out/bin/fgrep\necho \"exec $out/bin/grep -F \\\"\\$@\\\"\" >> $out/bin/fgrep\nchmod +x $out/bin/egrep $out/bin/fgrep\n"; postPatch = null; preConfigure = "export MKDIR_P=\"mkdir -p\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "3.11"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; mesonFlags = [ ]; name = "patch-2.7.6"; nativeBuildInputs = [ «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "CC=cc" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; mesonFlags = [ ]; name = "ed-1.19"; nativeBuildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "CPPFLAGS=-DNDEBUG" "CFLAGS=-O3" "CXXFLAGS=-O3" "CXX=c++" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "lzip-1.23"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "lzip"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/compression/lzip/lzip-setup-hook.sh; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "lzip-1.23.tar.gz"; outputHash = "sha256-R5LAR93xXvKdVbqOaKGiHgy3aS2H7N9yBEGYZFgvKA0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://mirror.easyname.at/nongnu/lzip/lzip-1.23.tar.gz"; urls = [ "https://mirror.easyname.at/nongnu/lzip/lzip-1.23.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "lzip-1.23.tar.gz"; out = «repeated»; outPath = "/nix/store/fim96i2pigbmdkkc2rf34f71g9v50i5x-lzip-1.23.tar.gz"; outputHash = "sha256-R5LAR93xXvKdVbqOaKGiHgy3aS2H7N9yBEGYZFgvKA0="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://mirror.easyname.at/nongnu/lzip/lzip-1.23.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "1.23"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "lzip-1.23"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/q7cw702bxp50xzbvgf21d2psspdb1yxa-lzip-1.23"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "lzip"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/compression/lzip/lzip-setup-hook.sh; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.23"; } ]; outputs = [ "out" ]; patches = [ ]; pname = "ed"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "ed-1.19.tar.lz"; outputHash = "sha256-zi8uXEJHkKqW0J2suT2bv9wLfrYknJy3U4RS6Ox3zUg="; outputHashAlgo = ""; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/ed/ed-1.19.tar.lz"; urls = [ "https://ftpmirror.gnu.org/ed/ed-1.19.tar.lz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "ed-1.19.tar.lz"; out = «repeated»; outPath = "/nix/store/qx3m44slznqqwd7ih8fjl78wc5ka7mlh-ed-1.19.tar.lz"; outputHash = "sha256-zi8uXEJHkKqW0J2suT2bv9wLfrYknJy3U4RS6Ox3zUg="; outputHashAlgo = ""; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/ed/ed-1.19.tar.lz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "1.19"; }; drvPath = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "ed-1.19"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/a4wik3fj6icqr357dsc9h7z573nh1a3p-ed-1.19"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "ed"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.19"; } ]; outputs = [ "out" ]; patches = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/CVE-2018-6951.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/Allow_input_files_to_be_missing_for_ed-style_patches.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/CVE-2018-1000156.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/CVE-2018-6952.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/CVE-2019-13636.patch /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/tools/text/gnupatch/CVE-2019-13638-and-CVE-2018-20969.patch ]; pname = "patch"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "patch-2.7.6.tar.xz"; outputHash = "1zfqy4rdcy279vwn2z1kbv19dcfw25d2aqy9nzvdkq5bjzd0nqdc"; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/patch/patch-2.7.6.tar.xz"; urls = [ "https://ftpmirror.gnu.org/patch/patch-2.7.6.tar.xz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "patch-2.7.6.tar.xz"; out = «repeated»; outPath = "/nix/store/hl7wxzav5znk5wxfqncdrzpcb3hqy0y0-patch-2.7.6.tar.xz"; outputHash = "1zfqy4rdcy279vwn2z1kbv19dcfw25d2aqy9nzvdkq5bjzd0nqdc"; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/patch/patch-2.7.6.tar.xz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; userHook = null; version = "2.7.6"; }; drvPath = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patch-2.7.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/l6s9gwsallxxgz3qy7xk6410y842m6dn-patch-2.7.6"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = «repeated»; pname = "patch"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.7.6"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/development/tools/misc/patchelf/setup-hook.sh ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = [ "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "patchelf-0.15.0.tar.bz2"; out = «repeated»; outPath = "/nix/store/447hvnlzzi9myri1iq3bijxgx6v6b592-patchelf-0.15.0.tar.bz2"; outputHash = "sha256-9ANtPuTY4ijewb7/8PbkbYpA6eVw4AaOOdd+YuLIvcI="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0.tar.bz2"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "0.15.0"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/pyq6gyhgck1nkfyjs6842ysxkxzjxkaj-patchelf-0.15.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "0.15.0"; } «repeated» «repeated» «repeated» «repeated» «repeated» «repeated» «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bin = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = [ { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; am_cv_func_iconv_works = "yes"; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ "--with-libiconv-prefix=/nix/store/y9ixa0nmbif2afw0n420l0psxry1n4l6-bootstrap-stage0-glibc-iconv-bootstrapFiles" ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; am_cv_func_iconv_works = "yes"; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = false; enableParallelInstalling = true; mesonFlags = [ ]; name = "libunistring-1.1"; nativeBuildInputs = [ ]; outputs = [ "out" "dev" "info" "doc" ]; patches = [ ]; pname = "libunistring"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libunistring-1.1.tar.gz"; outputHash = "sha256-oiUr7uyDCsREufaNazitiD2xmRnbNbUiIs+CfDhb22o="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftpmirror.gnu.org/libunistring/libunistring-1.1.tar.gz"; urls = [ "https://ftpmirror.gnu.org/libunistring/libunistring-1.1.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libunistring-1.1.tar.gz"; out = «repeated»; outPath = "/nix/store/zkas816mjrr8ijdj29qs4wqyn38l4j12-libunistring-1.1.tar.gz"; outputHash = "sha256-oiUr7uyDCsREufaNazitiD2xmRnbNbUiIs+CfDhb22o="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftpmirror.gnu.org/libunistring/libunistring-1.1.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "1.1"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = false; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libunistring-1.1"; nativeBuildInputs = [ ]; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; am_cv_func_iconv_works = "yes"; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = false; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libunistring-1.1"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/i93s7xxblavsacpy82zdbn4kplsyq48l-libunistring-1.1"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libunistring"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.1"; }; outPath = "/nix/store/zk09imb4y93zlp9jnicm1dc4d3l65zvl-libunistring-1.1-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libunistring"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "1.1"; } ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ «repeated» ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bin = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; devdoc = <CODE>; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; mesonFlags = [ ]; name = "libidn2-2.3.4"; nativeBuildInputs = [ ]; outputs = [ "bin" "dev" "out" "info" "devdoc" ]; patches = [ ]; pname = "libidn2"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs -e '/nix/store/i93s7xxblavsacpy82zdbn4kplsyq48l-libunistring-1.1' \\\n  \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = { all = <CODE>; builder = "builtin:fetchurl"; drvAttrs = { builder = "builtin:fetchurl"; executable = false; impureEnvVars = [ "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy" ]; name = "libidn2-2.3.4.tar.gz"; outputHash = "sha256-k8q6crTgUdH41PWgdqtjyZt3+u4Bm3K5eDsmeYbbtF8="; outputHashAlgo = "sha256"; outputHashMode = "flat"; preferLocalBuild = true; system = "builtin"; unpack = false; url = "https://ftp.gnu.org/gnu/libidn/libidn2-2.3.4.tar.gz"; urls = [ "https://ftp.gnu.org/gnu/libidn/libidn2-2.3.4.tar.gz" ]; }; drvPath = <CODE>; executable = false; impureEnvVars = «repeated»; name = "libidn2-2.3.4.tar.gz"; out = «repeated»; outPath = "/nix/store/vp4896rkv185vzcda28y4f4k0l0ssilf-libidn2-2.3.4.tar.gz"; outputHash = "sha256-k8q6crTgUdH41PWgdqtjyZt3+u4Bm3K5eDsmeYbbtF8="; outputHashAlgo = "sha256"; outputHashMode = "flat"; outputName = "out"; preferLocalBuild = true; system = "builtin"; type = "derivation"; unpack = false; url = "https://ftp.gnu.org/gnu/libidn/libidn2-2.3.4.tar.gz"; urls = «repeated»; }; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; version = "2.3.4"; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libidn2-2.3.4"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/9ynx16fvbz41aswy7iz3a4iszss1ql4f-libidn2-2.3.4-dev"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libidn2"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs -e '/nix/store/i93s7xxblavsacpy82zdbn4kplsyq48l-libunistring-1.1' \\\n  \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.3.4"; }; devdoc = <CODE>; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libidn2-2.3.4"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/0fcg274gaw647vpqqxpppgyy04xjawmv-libidn2-2.3.4-bin"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libidn2"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs -e '/nix/store/i93s7xxblavsacpy82zdbn4kplsyq48l-libunistring-1.1' \\\n  \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.3.4"; }; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; devdoc = <CODE>; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "libidn2-2.3.4"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/ji01n9vinnj22nbrb86nx8a1ssgpilx8-libidn2-2.3.4"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; pname = "libidn2"; postFixup = "/nix/store/gnd61qxf08dhjgl25km162c65bbkbdwv-nuke-references/bin/nuke-refs -e '/nix/store/i93s7xxblavsacpy82zdbn4kplsyq48l-libunistring-1.1' \\\n  \"$out\"/lib/lib*.so.*.*\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = <CODE>; userHook = null; version = "2.3.4"; } «repeated» «repeated» «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = { NIX_CFLAGS_COMPILE = "-static-libgcc"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; configurePlatforms = «repeated»; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = <CODE>; doCheck = false; doInstallCheck = true; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; hasGold = true; hasPluginAPI = true; info = «repeated»; inputDerivation = <CODE>; isGNU = true; lib = «repeated»; man = «repeated»; mesonFlags = [ ]; meta = «repeated»; name = "binutils-2.40"; nativeBuildInputs = «repeated»; noSysDirs = true; out = «repeated»; outPath = "/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "binutils"; postAutoreconf = "# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n"; postInstall = ""; preConfigure = "# Clear the default library search path.\nif test \"$noSysDirs\" = \"1\"; then\n    echo 'NATIVE_LIB_DIRS=' >> ld/configure.tgt\nfi\n\n# Use symlinks instead of hard links to save space (\"strip\" in the\n# fixup phase strips each hard link separately).\nfor i in binutils/Makefile.in gas/Makefile.in ld/Makefile.in gold/Makefile.in; do\n    sed -i \"$i\" -e 's|ln |ln -s |'\ndone\n\n# autoreconfHook is not included for all targets.\n# Call it here explicitly as well.\n# As we regenerated configure build system tries hard to use\n# texinfo to regenerate manuals. Let's avoid the dependency\n# on texinfo in bootstrap path and keep manuals unmodified.\ntouch gas/doc/.dirstamp\ntouch gas/doc/asconfig.texi\ntouch gas/doc/as.1\ntouch gas/doc/as.info\n\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; stripDebugList = null; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; userHook = null; version = "2.40"; }; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnugrep-3.11"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/by6918gg7srjyixqk8kbcdlz82d5pcwx-gnugrep-3.11"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pcre2 = «repeated»; pname = "gnugrep"; postInstall = "rm $out/bin/egrep $out/bin/fgrep\necho \"#! /bin/sh\" > $out/bin/egrep\necho \"exec $out/bin/grep -E \\\"\\$@\\\"\" >> $out/bin/egrep\necho \"#! /bin/sh\" > $out/bin/fgrep\necho \"exec $out/bin/grep -F \\\"\\$@\\\"\" >> $out/bin/fgrep\nchmod +x $out/bin/egrep $out/bin/fgrep\n"; postPatch = null; preConfigure = "export MKDIR_P=\"mkdir -p\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "3.11"; }; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/b65xn2ilnyzd8vfflsxk446m1s9fj016-binutils-2.40-man $man\nln -s /nix/store/hl6d33kdka9ma9xis87kapxbk98f066z-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/bintools-wrapper/setup-hook.sh ]; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; drvPath = <CODE>; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; bintools_bin = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; dynamicLinker = "/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld-linux-x86-64.so.2"; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $bintools_bin > $out/nix-support/orig-bintools\n\nldPath=\"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin\"\nfor binary in objdump objcopy size strings as ar nm gprof dwp c++filt addr2line \\\n    ranlib readelf elfedit dlltool dllwrap windmc windres; do\n  if [ -e $ldPath/\${binary} ]; then\n    ln -s $ldPath/\${binary} $out/bin/\${binary}\n  fi\ndone\n\nif [ -e \${ld:-$ldPath/ld} ]; then\n  wrap ld /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh \${ld:-$ldPath/ld}\nfi\n\nfor variant in $ldPath/ld.*; do\n  basename=$(basename \"$variant\")\n  wrap $basename /nix/store/p2ynpdqzm8lfdq6xywa8igkjp56b8q65-ld-wrapper.sh $variant\ndone\n"; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "binutils-wrapper-2.40"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; out = «repeated»; outPath = "/nix/store/lwqnazddv8037sin49482dnzc9iwgg8l-binutils-wrapper-2.40"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; emacsBufferSetup = <CODE>; isGNU = <CODE>; isLLVM = <CODE>; libc = «repeated»; nativeLibc = false; nativePrefix = ""; nativeTools = false; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/b65xn2ilnyzd8vfflsxk446m1s9fj016-binutils-2.40-man $man\nln -s /nix/store/hl6d33kdka9ma9xis87kapxbk98f066z-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; }; outPath = "/nix/store/lwqnazddv8037sin49482dnzc9iwgg8l-binutils-wrapper-2.40"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "binutils-wrapper"; postFixup = "touch \"$out/nix-support/libc-ldflags\"\necho \"-L/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib\" >> $out/nix-support/libc-ldflags\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\nif [[ -z \${dynamicLinker+x} ]]; then\n  echo \"Don't know the name of the dynamic linker for platform 'x86_64-unknown-linux-gnu', so guessing instead.\" >&2\n  local dynamicLinker=\"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/ld*.so.?\"\nfi\ndynamicLinker=($dynamicLinker)\n\ncase \${#dynamicLinker[@]} in\n  0) echo \"No dynamic linker found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\n  1) echo \"Using dynamic linker: '$dynamicLinker'\" >&2;;\n  *) echo \"Multiple dynamic linkers found for platform 'x86_64-unknown-linux-gnu'.\" >&2;;\nesac\n\nif [ -n \"\${dynamicLinker-}\" ]; then\n  echo $dynamicLinker > $out/nix-support/dynamic-linker\n\n  if [ -e /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 ]; then\n  echo /nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/32/ld-linux.so.2 > $out/nix-support/dynamic-linker-m32\nfi\ntouch $out/nix-support/ld-set-dynamic-linker\n\nfi\nprintWords /nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40 /nix/store/bh4lz3c2n3qfbm2hhwjhnqcaxcjs2sm8-glibc-2.38-27-bin > $out/nix-support/propagated-user-env-packages\nln -s /nix/store/b65xn2ilnyzd8vfflsxk446m1s9fj016-binutils-2.40-man $man\nln -s /nix/store/hl6d33kdka9ma9xis87kapxbk98f066z-binutils-2.40-info $info\nexport hardening_unsupported_flags=\"\"\nif [[ \"$($ldPath/ld -z now 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" bindnow\"\nfi\nif [[ \"$($ldPath/ld -z relro 2>&1 || true)\" =~ un(recognized|known)\\ option ]]; then\n  hardening_unsupported_flags+=\" relro\"\nfi\nwrap strip /nix/store/m9qvr6m0bylrjqb5ind6hfzsax14xys9-gnu-binutils-strip-wrapper.sh \\\n  \"/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin/strip\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/9rq2ab2wl3ia1ism6zjvdxcnpv9s9rgn-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "2.40"; wrapperName = "BINTOOLS_WRAPPER"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; mesonFlags = [ ]; name = "gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; outputs = [ "out" "man" "info" ]; patches = [ ]; pname = "gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = [ «repeated» ]; propagatedNativeBuildInputs = [ ]; setupHooks = [ /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/role.bash /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/setup-hook.sh ]; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; buildPhase = "NIX_CC_USE_RESPONSE_FILE=0 \"$CC\" -std=c99 -O3 -o \"expand-response-params\" expand-response-params.c\n"; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; name = "expand-response-params"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; installPhase = "mkdir -p $prefix/bin\nmv expand-response-params $prefix/bin/\n"; mesonFlags = [ ]; meta = <CODE>; name = "expand-response-params"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/expand-response-params/expand-response-params.c; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; unpackPhase = "cp \"$src\" expand-response-params.c\nsrc=$PWD\n"; userHook = null; }; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; bintools = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cc = «repeated»; cmakeFlags = [ ]; configureFlags = [ ]; coreutils_bin = «repeated»; darwinMinVersion = ""; darwinMinVersionVariable = ""; darwinPlatformForCC = ""; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; drvAttrs = «repeated»; drvPath = <CODE>; emacsBufferSetup = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; expand-response-params = «repeated»; expandResponseParams = "/nix/store/6wg6ak0cczpb00lxfpsi7jlfyxgs5c4k-expand-response-params/bin/expand-response-params"; gnugrep_bin = «repeated»; info = <CODE>; inputDerivation = <CODE>; installPhase = "mkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  export use_response_file_by_default=0\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/bin\"\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\nexport named_cc=cc\nexport named_cxx=c++\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc $wrapper $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang $wrapper $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ $wrapper $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ $wrapper $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nelif [ -e $ccPath/cpp ]; then\n  wrap cpp $wrapper $ccPath/cpp\nfi\n"; isClang = false; isGNU = true; libc = «repeated»; libc_bin = «repeated»; libc_dev = «repeated»; libc_lib = «repeated»; libcxx = null; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gcc-wrapper-12.3.0"; nativeBuildInputs = [ ]; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; out = «repeated»; outPath = "/nix/store/sfgnb6rr428bssyrs54d6d0vv2avi95c-gcc-wrapper-12.3.0"; outputName = <CODE>; outputSpecified = true; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { bintools = «repeated»; cc = «repeated»; emacsBufferSetup = <CODE>; expand-response-params = «repeated»; isClang = false; isGNU = true; libc = «repeated»; libcxx = null; nativeLibc = false; nativePrefix = ""; nativeTools = false; nixSupport = { }; suffixSalt = "x86_64_unknown_linux_gnu"; targetPrefix = ""; }; patches = [ ]; pname = "gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = <CODE>; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; }; outPath = "/nix/store/sfgnb6rr428bssyrs54d6d0vv2avi95c-gcc-wrapper-12.3.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gcc-wrapper"; postFixup = "touch \"$out/nix-support/cc-cflags\"\ntouch \"$out/nix-support/cc-ldflags\"\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\necho \"-L/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0\" >> $out/nix-support/cc-ldflags\necho \"-L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\" >> $out/nix-support/cc-ldflags\ntouch \"$out/nix-support/libc-cflags\"\ntouch \"$out/nix-support/libc-ldflags\"\necho \"-B/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27/lib/\" >> $out/nix-support/libc-crt1-cflags\necho \"-idirafter /nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev/include\" >> $out/nix-support/libc-cflags\nfor dir in \"/nix/store/qfqjymymsd2x29yknsgllfiq1h64s3f4-gcc-12.3.0\"/lib/gcc/*/*/include-fixed; do\n  echo '-idirafter' \${dir} >> $out/nix-support/libc-cflags\ndone\n\necho \"/nix/store/9y8pmvk8gdwwznmkzxa6pwyah52xy3nk-glibc-2.38-27\" > $out/nix-support/orig-libc\necho \"/nix/store/jhi4wsbrxfscrf57k46d1lfq1v8d25kx-glibc-2.38-27-dev\" > $out/nix-support/orig-libc-dev\ntouch \"$out/nix-support/libcxx-cxxflags\"\ntouch \"$out/nix-support/libcxx-ldflags\"\nif [ -e \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" -a ! -L \"/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\" ]; then\n  ccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\n  ccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib64\"\nfi\nccLDFlags+=\" -L/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\nccCFlags+=\" -B/nix/store/dghjv6hfz0s0z4kffa5ahyw2mhp79215-gcc-12.3.0-lib/lib\"\n\necho \"$ccLDFlags\" >> $out/nix-support/cc-ldflags\necho \"$ccCFlags\" >> $out/nix-support/cc-cflags\nln -s /nix/store/4l05np1n1bx1syq6hrg6m2n4xk14c9zc-gcc-12.3.0-man $man\nln -s /nix/store/a144vkd9syahra6wkafkfr4qm06piw5q-gcc-12.3.0-info $info\nexport hardening_unsupported_flags=\"\"\nfor flags in \"$out/nix-support\"/*flags*; do\n  substituteInPlace \"$flags\" --replace $'\\n' ' '\ndone\n\nsubstituteAll /nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /nix/store/szpv2max74jm772lxkbmq5bvx0lrqz69-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /nix/store/kgcmpr4i443sdyszl1b7i4k86ddxbrwi-utils.bash $out/nix-support/utils.bash\n"; preferLocalBuild = true; propagatedBuildInputs = «repeated»; propagatedNativeBuildInputs = [ ]; setupHooks = «repeated»; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; stdenv = «repeated»; strictDeps = true; suffixSalt = "x86_64_unknown_linux_gnu"; system = "x86_64-linux"; targetPrefix = ""; type = "derivation"; unpackPhase = "src=$PWD\n"; userHook = null; version = "12.3.0"; wrapper = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/cc-wrapper/cc-wrapper.sh; wrapperName = "CC_WRAPPER"; } «repeated» «repeated» «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildCommand = "mkdir -p $out/nix-support\ncp /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\nrecordPropagatedDependencies\nsubstituteAll /nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh $out/nix-support/setup-hook\n"; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/default-builder.sh ]; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; dontBuild = true; dontConfigure = true; dontUpdateAutotoolsGnuConfigScripts = true; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; outputs = [ "out" ]; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; drvPath = <CODE>; inputDerivation = <CODE>; installPhase = "runHook preInstall\ninstall -Dm755 ./config.guess $out/config.guess\ninstall -Dm755 ./config.sub $out/config.sub\nrunHook postInstall\n"; mesonFlags = [ ]; meta = <CODE>; name = "gnu-config-2023-09-19"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/y83pz60av31hpr11zlbvc7bb93bk5fkd-gnu-config-2023-09-19"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnu-config"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; unpackPhase = "runHook preUnpack\ncp /nix/store/ifggbq5cc2rnm57jc8573smj534sabzw-config.guess-28ea239 ./config.guess\ncp /nix/store/qwp924351jxqvlrsm3hg1zwglnwc5amd-config.sub-28ea239 ./config.sub\nchmod +w ./config.sub ./config.guess\nrunHook postUnpack\n"; userHook = null; version = "2023-09-19"; }; mesonFlags = [ ]; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; outputs = [ "out" ]; passAsFile = [ "buildCommand" ]; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; userHook = null; }; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; gnu_config = «repeated»; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "update-autotools-gnu-config-scripts-hook"; nativeBuildInputs = [ ]; out = <CODE>; outPath = "/nix/store/j0blrlhddcnqgq1v1cd4pfggjr2wah8n-update-autotools-gnu-config-scripts-hook"; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passAsFile = «repeated»; passthru = { }; patches = [ ]; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; } «repeated» «repeated» «repeated» «repeated» «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patchelf-0.15.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/pyq6gyhgck1nkfyjs6842ysxkxzjxkaj-patchelf-0.15.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "patchelf"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; setupHook = «repeated»; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "0.15.0"; } «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; args = [ "-e" /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/builder.sh ]; bootstrapTools = «repeated»; buildPlatform = «repeated»; builder = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; cc = «repeated»; defaultBuildInputs = [ ]; defaultNativeBuildInputs = [ «repeated» «repeated» /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/audit-tmpdir.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/compress-man-pages.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/make-symlinks-relative.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-docs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-lib64.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-sbin.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/move-systemd-user-units.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/multiple-outputs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/patch-shebangs.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/prune-libtool-files.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/reproducible-builds.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/set-source-date-epoch-to-latest.sh /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/build-support/setup-hooks/strip.sh «repeated» ]; disallowedRequisites = [ «repeated» ]; drvAttrs = { allowedRequisites = «repeated»; args = «repeated»; builder = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = «repeated»; initialPath = [ { FORCE_UNSAFE_CONFIGURE = ""; NIX_CFLAGS_COMPILE = ""; NIX_LDFLAGS = ""; PERL = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "coreutils-9.4"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4"; outputName = "out"; outputs = «repeated»; override = { __functionArgs = <CODE>; __functor = <LAMBDA>; }; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "coreutils"; postInstall = "rm -r \"$out/share\"\n"; postPatch = "# The test tends to fail on btrfs, f2fs and maybe other unusual filesystems.\nsed '2i echo Skipping dd sparse test && exit 77' -i ./tests/dd/sparse.sh\nsed '2i echo Skipping du threshold test && exit 77' -i ./tests/du/threshold.sh\nsed '2i echo Skipping cp reflink-auto test && exit 77' -i ./tests/cp/reflink-auto.sh\nsed '2i echo Skipping cp sparse test && exit 77' -i ./tests/cp/sparse.sh\nsed '2i echo Skipping rm deep-2 test && exit 77' -i ./tests/rm/deep-2.sh\nsed '2i echo Skipping du long-from-unreadable test && exit 77' -i ./tests/du/long-from-unreadable.sh\n\n# Some target platforms, especially when building inside a container have\n# issues with the inotify test.\nsed '2i echo Skipping tail inotify dir recreate test && exit 77' -i ./tests/tail/inotify-dir-recreate.sh\n\n# sandbox does not allow setgid\nsed '2i echo Skipping chmod setgid test && exit 77' -i ./tests/chmod/setgid.sh\nsubstituteInPlace ./tests/install/install-C.sh \\\n  --replace 'mode3=2755' 'mode3=1755'\n\n# Fails on systems with a rootfs. Looks like a bug in the test, see\n# https://lists.gnu.org/archive/html/bug-coreutils/2019-12/msg00000.html\nsed '2i print \"Skipping df skip-rootfs test\"; exit 77' -i ./tests/df/skip-rootfs.sh\n\n# these tests fail in the unprivileged nix sandbox (without nix-daemon) as we break posix assumptions\nfor f in ./tests/chgrp/{basic.sh,recurse.sh,default-no-deref.sh,no-x.sh,posix-H.sh}; do\n  sed '2i echo Skipping chgrp && exit 77' -i \"$f\"\ndone\nfor f in gnulib-tests/{test-chown.c,test-fchownat.c,test-lchown.c}; do\n  echo \"int main() { return 77; }\" > \"$f\"\ndone\n\n# intermittent failures on builders, unknown reason\nsed '2i echo Skipping du basic test && exit 77' -i ./tests/du/basic.sh\n"; preInstall = ""; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "9.4"; } { CFLAGS = [ ]; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = [ ]; info = <CODE>; inputDerivation = <CODE>; locate = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "findutils-4.9.0"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/sq0w0jchkjqbxl47h52kfwa33qp1adfh-findutils-4.9.0"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = «repeated»; pname = "findutils"; postFixup = "moveToOutput share/man/man5 $locate\nmoveToOutput share/man/man1/locate.1.gz $locate\nmoveToOutput share/man/man1/updatedb.1.gz $locate\n"; postInstall = "moveToOutput bin/locate $locate\nmoveToOutput bin/updatedb $locate\n"; postPatch = "substituteInPlace xargs/xargs.c --replace 'char default_cmd[] = \"echo\";' 'char default_cmd[] = \"/nix/store/zx8aqgdy735qzk81glfwil6mbi6ddqb1-coreutils-9.4/bin/echo\";'\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "4.9.0"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "diffutils-3.10"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/f3g84l92p0njh0gyk1z7cp2k4qnh91ha-diffutils-3.10"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "diffutils"; postPatch = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "3.10"; } { PERL = null; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnused-4.9"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/7fqp73ncnbwr5bxxszqicf6r33d9yhkw-gnused-4.9"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnused"; preConfigure = "patchShebangs ./build-aux/help2man"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "4.9"; } «repeated» { NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; libsigsegv = null; makeFlags = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gawk-5.2.2"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/1713hchhyzawkxfhk9srxklv03bqj55y-gawk-5.2.2"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = [ ]; pname = "gawk"; postInstall = "rm \"$out\"/bin/gawk-*\nln -s gawk.1 \"\${!outputMan}\"/share/man/man1/awk.1\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "5.2.2"; } { FORCE_UNSAFE_CONFIGURE = ""; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnutar-1.35"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/1y7cqy8y76gsx037mhs3cvb33srj4c7g-gnutar-1.35"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gnutar"; postPatch = ""; preConfigure = null; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "1.35"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; info = <CODE>; inputDerivation = <CODE>; makeFlags = «repeated»; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gzip-1.13"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/21drzcpzpi485f9m6ihspg4kayly5425-gzip-1.13"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = [ ]; pname = "gzip"; preFixup = "sed -i '1{;/#!\\/bin\\/sh/aPATH=\"'$out'/bin:$PATH\"\n}' $out/bin/*\nwrapProgram $out/bin/gzip \\\n  --add-flags \"\\\${GZIP_NO_TIMESTAMPS:+-n}\"\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "1.13"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; debug = <CODE>; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = false; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; info = <CODE>; inputDerivation = <CODE>; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "gnumake-4.4.1"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/452v8bl3sjaq4kil1d9vqxc5vns4cvpp-gnumake-4.4.1"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "gnumake"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; tests = <CODE>; type = "derivation"; userHook = null; version = "4.4.1"; } { NIX_CFLAGS_COMPILE = "-DSYS_BASHRC=\"/etc/bashrc\"\n-DSYS_BASH_LOGOUT=\"/etc/bash_logout\"\n-DDEFAULT_PATH_VALUE=\"/no-such-path\"\n-DSTANDARD_UTILS_PATH=\"/no-such-path\"\n-DNON_INTERACTIVE_LOGIN_SHELLS\n-DSSH_SOURCE_BASHRC\n"; NIX_HARDENING_ENABLE = «repeated»; __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = «repeated»; debug = <CODE>; depsBuildBuild = «repeated»; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = false; doInstallCheck = false; doc = <CODE>; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; hardeningDisable = «repeated»; info = <CODE>; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "bash-5.2-p21"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patchFlags = «repeated»; patches = «repeated»; postFixup = "rm -rf \"$out/share\" \"$out/bin/bashbug\"\n"; postInstall = "ln -s bash \"$out/bin/sh\"\nrm -f $out/lib/bash/Makefile.inc\n"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; separateDebugInfo = true; shellPath = "/bin/bash"; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = "derivation"; userHook = null; version = "5.2"; } { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = [ ]; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; inputDerivation = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "patch-2.7.6"; nativeBuildInputs = «repeated»; out = «repeated»; outPath = "/nix/store/l6s9gwsallxxgz3qy7xk6410y842m6dn-patch-2.7.6"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = { }; patches = «repeated»; pname = "patch"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = false; system = "x86_64-linux"; type = "derivation"; userHook = null; version = "2.7.6"; } «repeated» { __ignoreNulls = true; __structuredAttrs = false; all = <CODE>; args = «repeated»; buildInputs = «repeated»; builder = "/nix/store/dsn6vl7x1hbn1akgpxync19gpx2dzy8w-bootstrap-tools/bin/bash"; cmakeFlags = [ ]; configureFlags = [ ]; depsBuildBuild = [ ]; depsBuildBuildPropagated = [ ]; depsBuildTarget = [ ]; depsBuildTargetPropagated = [ ]; depsHostHost = [ ]; depsHostHostPropagated = [ ]; depsTargetTarget = [ ]; depsTargetTargetPropagated = [ ]; dev = «repeated»; doCheck = true; doInstallCheck = false; drvAttrs = «repeated»; drvPath = <CODE>; enableParallelBuilding = true; enableParallelChecking = true; enableParallelInstalling = true; inputDerivation = <CODE>; makeFlags = [ ]; man = <CODE>; mesonFlags = [ ]; meta = <CODE>; name = "file-5.45"; nativeBuildInputs = [ ]; out = «repeated»; outPath = "/nix/store/hnz8p5w9xc0ivsiyrgky6f6h7sjb28a5-file-5.45"; outputName = "out"; outputs = «repeated»; override = <CODE>; overrideAttrs = <CODE>; overrideDerivation = <CODE>; passthru = «repeated»; patches = «repeated»; pname = "file"; propagatedBuildInputs = [ ]; propagatedNativeBuildInputs = [ ]; src = «repeated»; stdenv = «repeated»; strictDeps = true; system = "x86_64-linux"; tests = <CODE>; type = "derivation"; userHook = null; version = "5.45"; } ]; name = "stdenv-linux"; preHook = "export NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; system = "x86_64-linux"; }; drvPath = <CODE>; extraBuildInputs = [ ]; extraNativeBuildInputs = [ «repeated» «repeated» ]; extraSandboxProfile = ""; fetchurlBoot = <LAMBDA>; hasCC = true; hostPlatform = «repeated»; initialPath = «repeated»; is32bit = <CODE>; is64bit = <CODE>; isAarch32 = <CODE>; isAarch64 = <CODE>; isBSD = <CODE>; isBigEndian = <CODE>; isCygwin = <CODE>; isDarwin = false; isFreeBSD = <CODE>; isLinux = <CODE>; isMips = <CODE>; isOpenBSD = <CODE>; isSunOS = <CODE>; isi686 = <CODE>; isx86_32 = <CODE>; isx86_64 = <CODE>; meta = <CODE>; mkDerivation = <LAMBDA>; name = "stdenv-linux"; out = { all = <CODE>; allowedRequisites = «repeated»; args = «repeated»; builder = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; defaultBuildInputs = [ ]; defaultNativeBuildInputs = «repeated»; disallowedRequisites = «repeated»; drvAttrs = «repeated»; drvPath = <CODE>; initialPath = «repeated»; name = "stdenv-linux"; out = «repeated»; outPath = "/nix/store/d4jf1cbbk494zwgbqz31pxgigpsbh6w2-stdenv-linux"; outputName = "out"; preHook = "export NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; system = "x86_64-linux"; type = "derivation"; }; outPath = "/nix/store/d4jf1cbbk494zwgbqz31pxgigpsbh6w2-stdenv-linux"; outputName = "out"; override = <CODE>; overrideDerivation = <CODE>; overrides = <LAMBDA>; passthru = <CODE>; preHook = "export NIX_ENFORCE_PURITY=\"\${NIX_ENFORCE_PURITY-1}\"\nexport NIX_ENFORCE_NO_NATIVE=\"\${NIX_ENFORCE_NO_NATIVE-1}\"\n"; setup = /nix/store/fn4i255gjsbqhza45ih8mgxgx47zan8i-source/pkgs/stdenv/generic/setup.sh; shell = "/nix/store/q8qq40xg2grfh9ry1d9x4g7lq4ra7n81-bash-5.2-p21/bin/bash"; shellDryRun = <CODE>; shellPackage = <CODE>; system = <CODE>; targetPlatform = «repeated»; tests = <CODE>; type = "derivation"; }; strictDeps = <CODE>; system = <CODE>; unpackPhase = ""; userHook = <CODE>; version = "2023-12-15"; }; drvPath = <CODE>; forceShare = <CODE>; inputDerivation = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; meta = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; out = <CODE>; outPath = <CODE>; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { dependencies = <CODE>; }; patches = <CODE>; pname = "nvim-treesitter"; postInstall = ""; postPatch = "rm -r parser\n"; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; rtp = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; type = "derivation"; unpackPhase = ""; userHook = <CODE>; version = "2023-12-15"; } { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; all = <CODE>; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; forceShare = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; outputs = [ "out" ]; patches = <CODE>; pname = "nvim-lspconfig"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; unpackPhase = ""; userHook = <CODE>; version = "master"; }; drvPath = <CODE>; forceShare = <CODE>; inputDerivation = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; meta = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; out = <CODE>; outPath = <CODE>; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { vimPlugin = true; }; patches = <CODE>; pname = "nvim-lspconfig"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; rtp = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; type = "derivation"; unpackPhase = ""; userHook = <CODE>; version = "master"; vimPlugin = true; } { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; all = <CODE>; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; forceShare = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; outputs = [ "out" ]; patches = <CODE>; pname = "startup-nvim"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; unpackPhase = ""; userHook = <CODE>; version = "master"; }; drvPath = <CODE>; forceShare = <CODE>; inputDerivation = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; meta = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; out = <CODE>; outPath = <CODE>; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { vimPlugin = true; }; patches = <CODE>; pname = "startup-nvim"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; rtp = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; type = "derivation"; unpackPhase = ""; userHook = <CODE>; version = "master"; vimPlugin = true; } { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; all = <CODE>; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; drvAttrs = { __ignoreNulls = true; __structuredAttrs = false; addonInfo = null; args = <CODE>; buildInputs = <CODE>; buildPhase = ":"; builder = <CODE>; cmakeFlags = <CODE>; configureFlags = <CODE>; configurePhase = ":"; depsBuildBuild = <CODE>; depsBuildBuildPropagated = <CODE>; depsBuildTarget = <CODE>; depsBuildTargetPropagated = <CODE>; depsHostHost = <CODE>; depsHostHostPropagated = <CODE>; depsTargetTarget = <CODE>; depsTargetTargetPropagated = <CODE>; doCheck = <CODE>; doInstallCheck = <CODE>; dontBuild = true; forceShare = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; outputs = [ "out" ]; patches = <CODE>; pname = "catppuccin"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; unpackPhase = ""; userHook = <CODE>; version = "master"; }; drvPath = <CODE>; forceShare = <CODE>; inputDerivation = <CODE>; installPhase = <CODE>; mesonFlags = <CODE>; meta = <CODE>; name = <CODE>; nativeBuildInputs = <CODE>; out = <CODE>; outPath = <CODE>; outputName = "out"; outputs = «repeated»; overrideAttrs = <CODE>; passthru = { vimPlugin = true; }; patches = <CODE>; pname = "catppuccin"; postInstall = ""; preInstall = ""; propagatedBuildInputs = <CODE>; propagatedNativeBuildInputs = <CODE>; rtp = <CODE>; src = <CODE>; stdenv = «repeated»; strictDeps = <CODE>; system = <CODE>; type = "derivation"; unpackPhase = ""; userHook = <CODE>; version = "master"; vimPlugin = true; } «repeated» <CODE> ]
